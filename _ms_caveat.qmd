:::: {.callout-important collapse='false' appearance='default'}

## Mastering Shiny (a caveat)

::: {style='font-size: 1.10em; color: #696969;'}

This book was written because the transition from building Shiny applications to writing R packages is complicated and involves a shift in focus, skill set, and development practices. 

The [Packages](https://mastering-shiny.org/scaling-packaging.html) chapter from [Mastering Shiny](https://mastering-shiny.org/) gets '*your toes into the water of package development*', but in my opinion, is probably not enough for you to get your shiny app project into an R package that's ready to be shipped into most production environments. 

For example, if you happened to download or clone the [`monthApp`](https://github.com/hadley/monthApp) example from the [Packages Chapter](https://mastering-shiny.org/scaling-packaging.html), you may have notice a few things:

1. `DESCRIPTION` contains additional fields that are not addressed.[^pkgs-1] 

2. `monthApp.Rproj` has been configured to work with package.[^pkgs-2a]

3. `devtools::build()` ([<kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd>]{style="font-weight: bold; font-size: 0.90em"}) has been configured to have additional behaviors.[^pkgs-2b]

4. Dependency management is discussed briefly but not documented in the application.[^pkgs-3]
  
5. `monthApp` doesn't have any help files[^pkgs-4] or tests.[^pkgs-5] 

None of the items above make the `monthApp` example from Mastering Shiny incomplete or incorrect--it's been written for an audience with a particular experience level and skill-set. [Mastering Shiny](https://mastering-shiny.org/) assumes the reader has relatively minimal experience with R package development,[^pkgs-6a] while [Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/) and the [`golem` package](https://thinkr-open.github.io/golem/) assumes it's readers "*are comfortable with building an R package.*"[^pkgs-6b]

Creating a resource that covers *all* shiny app-package considerations while taking into account the particulars of experience level and development environment is impossible. [The contents of this book are intended to help close the gap between developing shiny apps and writing R packages.]{style='font-weight: bold; color: #3a506b;'}

[^pkgs-1]: The [`DESCRIPTION`](https://github.com/hadley/monthApp/blob/master/DESCRIPTION) file in `monthApp` contains fields not included in the arguments passed to `usethis::use_description()` (these were added [separately](https://github.com/hadley/monthApp/commit/9899da4c89f4114a0611b415f4a329daeb753069)), and a few arguments can be adapted or removed to save time.

[^pkgs-2a]: The `.Rproj` file is the connection between the `DESCRIPTION` fields, the code in the `R/` folder, and the IDE's **Build** pane or “package development mode.” If you already have an `.Rproj` file in your shiny app project, you can activate these settings under **Tools** > **Project Options** > **Build Tools**. 

[^pkgs-2b]: The [`monthApp.Rproj`](https://github.com/hadley/monthApp/blob/9899da4c89f4114a0611b415f4a329daeb753069/monthApp.Rproj#L22) file contains additional settings you can add with **Tools** > **Project Options** > **Build Tools**, then under **Generate documentation with Roxygen**, click **Configure** and select **Install and Restart**.

[^pkgs-3]: The [`NAMESPACE` file](https://github.com/hadley/monthApp/blob/master/NAMESPACE) is empty and the `Imports` field is missing from the [`DESCRIPTION`](https://github.com/hadley/monthApp/blob/master/DESCRIPTION) (although the chapter discusses [importing `shiny`](https://mastering-shiny.org/scaling-packaging.html#r-cmd-check)).

[^pkgs-4]: `roxygen2` is mentioned, but it's beyond the scope of [Mastering Shiny](https://mastering-shiny.org/), so for now just know `roxygen2` syntax is placed in the code below `R/` to create the help files and the `NAMESPACE`.

[^pkgs-5]: `monthApp` doesn't have the testing infrastructure provided by [`testthat`](https://testthat.r-lib.org/), but this can be quickly created using `usethis::use_testthat()` (and an entire chapter is dedicated to [testing](https://mastering-shiny.org/scaling-testing.html).

[^pkgs-6a]: Mastering Shiny includes an example for  *[converting](https://mastering-shiny.org/scaling-packaging.html?#converting-an-existing-app)* an existing application with `usethis::use_description()`, but not creating a new app-package (i.e., with `usethis::create_package()`).

[^pkgs-6b]: Most of the pain points/barriers to adopting [`golem`](https://thinkr-open.github.io/golem/) I've heard from developers are related to structuring their application as a package. 



::: 

::::