### Initial values 

Shiny inputs are initiated with a `NULL` value, so it's tempting to want to test an `inputId` exists using `expect_null(input$x)`. However, this test is not helpful because *any* value will pass this test.

For example, the test below looks like it tests an initial `NULL` value for `input$x` in `mod_var_input_server()`:

```{r}
#| eval: false 
#| include: true 
#| code-fold: false
shiny::testServer(app = mod_var_input_server, expr = {
  test_logger(start = "input$x", msg = "initial null")
  testthat::expect_null(input$x)
  test_logger(end = "input$x", msg = "initial null")
})
```

This test passes:

```{verbatim}
#| eval: false 
#| code-fold: false
[ FAIL 0 | WARN 0 | SKIP 0 | PASS 0 ]
 [ START | 2023-09-14 11:58:59 | input$x = initial null] 
[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]
 [ END   | 2023-09-14 11:58:59 | input$x = initial null]  
```

Unfortunately, we can pass anything to `expect_null()` when `testServer()` is used this way:

```{r}
#| eval: false 
#| include: true 
#| code-fold: false
shiny::testServer(app = mod_var_input_server, expr = {
  test_logger(start = "input$anything", msg = "initial null")
  testthat::expect_null(input$anything)
  test_logger(end = "input$anything", msg = "initial null")
})
```

This test also passes:

```{verbatim}
#| eval: false 
#| code-fold: false
 [ START | 2023-09-14 11:58:59 | input$anything = initial null] 
[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]
 [ END   | 2023-09-14 11:58:59 | input$anything = initial null] 
```

To check the initial `NULL` value of an `inputId`, it's better to build the shiny app object, then pass this to `testServer()`.[^tests-11]

[^tests-11]: The `shiny::is.shiny.appobj()` will test if an object is a 'shiny app object.'

```{r}
#| eval: false 
#| code-fold: false
# build app object with shinyApp()
app <- shinyApp(ui = movies_ui(bslib = FALSE), 
                  server = movies_server)
shiny::testServer(app = app, expr = {
  # check shiny app object 
  test_logger(start = "is.shiny.appobj", msg = "movies_app()")
  testthat::expect_true(is.shiny.appobj(app))
  test_logger(end = "is.shiny.appobj", msg = "movies_app()")
  # check input for y axis is initially NULL
  test_logger(start = "input$`vars-y`", msg = "initial NULL")
  testthat::expect_null(
    object = input$`vars-y`)
  test_logger(end = "input$`vars-y`", msg = "initial NULL")
})
```

```{verbatim}
#| eval: false 
#| code-fold: false
[ FAIL 0 | WARN 0 | SKIP 0 | PASS 0 ]

 [ START | 2023-09-14 12:08:53 | is.shiny.appobj = movies_app()] 
[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]
 [ END   | 2023-09-14 12:08:53 | is.shiny.appobj = movies_app()] 

 [ START | 2023-09-14 12:08:53 | input$`vars-y` = initial NULL] 
[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]
 [ END   | 2023-09-14 12:08:53 | input$`vars-y` = initial NULL] 
```

Note the use of the `input` with the appended module IDs. This is an easy place to get tripped up with `testServer()`: in the `app` object, we have to access the inputs with  ```` input$`[module id]-[inputId]` ````
