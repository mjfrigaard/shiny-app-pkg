# [`app.R`]{style="font-size: 1.05em;"} {.unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  header = "Warning!",
  contents = "This section is currently under development. Thank you for your patience."
)
```

Let's review the files and folders in `pkgApp`.

## [`pkgApp`]{style="font-size: 1.05em"} folders 

There are three folders in `pkgApp`: `R/`, `man/`, and `www/`

### [`R/`]{style="font-size: 1.05em"} folder

```{verbatim}
#| eval: false
#| code-fold: false
pkgApp/
  R/
  ├── mod_scatter_display.R
  ├── mod_var_input.R
  ├── movies_app.R
  ├── movies_server.R
  ├── movies_ui.R
  └── scatter_plot.R
  
  1 directory, 6 files
  
```

### [`man/`]{style="font-size: 1.05em"} folder

```{verbatim}
#| eval: false
#| code-fold: false
pkgApp/
  man/
  ├── mod_scatter_display_server.Rd
  ├── mod_scatter_display_ui.Rd
  ├── mod_var_input_server.Rd
  ├── mod_var_input_ui.Rd
  ├── movies_app.Rd
  ├── movies_server.Rd
  ├── movies_ui.Rd
  └── scatter_plot.Rd
  
  1 directory, 8 files
```

### [`www/`]{style="font-size: 1.05em"} folder

```{verbatim}
#| eval: false
#| code-fold: false
pkgApp/
    www/
     └── shiny.png

1 directory, 1 file
```

## [`pkgApp`]{style="font-size: 1.05em"} files

There are six files in `pkgApp`: `DESCRIPTION`, `NAMESPACE`, `README.md`, `movies.RData`, `pkgApp.Rproj`, and `app.R`

### [`DESCRIPTION`]{style="font-size: 1.05em"}

```{verbatim}
#| eval: false
#| code-fold: false
Package: pkgApp
Title: movies app
Version: 0.0.0.9000
Author: John Smith <John.Smith@email.io> [aut, cre]
Maintainer: John Smith <John.Smith@email.io>
Description: A movie-review shiny application.
License: GPL-3
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.2.3
Imports:
  shiny,
  ggplot2,
  rlang,
  stringr,
  tools
```


### [`NAMESPACE`]{style="font-size: 1.05em"}

```{verbatim}
#| eval: false
#| code-fold: false
# Generated by roxygen2: do not edit by hand

export(mod_scatter_display_server)
export(mod_scatter_display_ui)
export(mod_var_input_server)
export(mod_var_input_ui)
export(movies_app)
export(movies_server)
export(movies_ui)
export(scatter_plot)
import(shiny)
importFrom(ggplot2,aes)
importFrom(ggplot2,geom_point)
importFrom(ggplot2,ggplot)
importFrom(ggplot2,labs)
importFrom(ggplot2,theme)
importFrom(ggplot2,theme_minimal)
importFrom(rlang,.data)
importFrom(stringr,str_replace_all)
importFrom(tools,toTitleCase)
```

### [`README.md`]{style="font-size: 1.05em"}

```{verbatim}
#| eval: false
#| code-fold: false
# movies app

The original code and data for this shiny app comes from the [Building Web Applications with Shiny](https://rstudio-education.github.io/shiny-course/) course. It's been converted to use [shiny modules](https://shiny.posit.co/r/articles/improve/modules/). 

View the code for this application in the [`pkgApp` branches](https://github.com/mjfrigaard/pkgApp/branches/).
```


### [`movies.RData`]{style="font-size: 1.05em"}

```{verbatim}
#| eval: false
#| code-fold: false

```

### [`pkgApp.Rproj`]{style="font-size: 1.05em"}

```{verbatim}
#| eval: false
#| code-fold: false
Version: 1.0

RestoreWorkspace: Default
SaveWorkspace: Default
AlwaysSaveHistory: Default

EnableCodeIndexing: Yes
UseSpacesForTab: Yes
NumSpacesForTab: 2
Encoding: UTF-8

RnwWeave: Sweave
LaTeX: XeLaTeX

BuildType: Package
PackageUseDevtools: Yes
PackageInstallArgs: --no-multiarch --with-keep.source
PackageRoxygenize: rd,collate,namespace
```

### [`app.R`]{style="font-size: 1.05em"}

```{r}
#| eval: false 
#| code-fold: false
# pkgs <- c("shiny", "shinythemes", "stringr", "ggplot2", "rlang")
# install.packages(pkgs, quiet = TRUE)

# load pacakge ----------------------------------
library(pkgApp)

# movies_app ------------------------------------
movies_app()
```


#### [`movies_app()`]{style="font-size: 1.05em"}

```{r}
#| eval: false 
#| code-fold: false
#' Movies app standalone function
#'
#' Wrapper function for `shiny::shinyApp()`
#'
#' @return shiny app
#' 
#' 
#' @seealso [mod_var_input_ui()], [mod_var_input_server()], [mod_scatter_display_ui()], [mod_scatter_display_server()]
#'
#' @export
#' 
#' @import shiny
#' 
movies_app <- function() {
  shiny::shinyApp(ui = movies_ui, server = movies_server)
}
```

[`loadSupport`]{style="font-size: 1.10em"} warning

```{bash}
#| eval: false 
#| code-fold: false
Warning in loadSupport(appDir, renv = sharedEnv, globalrenv = NULL) :
  Loading R/ subdirectory for Shiny application, but this directory appears to
  contain an R package. Sourcing files in R/ may cause unexpected behavior.
```

## Running the app

### [`runApp()`]{style="font-size: 1.10em"}

#### [`test.mode`]{style="font-size: 1.05em"}

```{r}
#| eval: false 
#| code-fold: false
#' Movies app standalone function
#'
#' Wrapper function for `shiny::shinyApp()`
#'
#' @return shiny app
#' 
#' 
#' @seealso [mod_var_input_ui()], [mod_var_input_server()], [mod_scatter_display_ui()], [mod_scatter_display_server()]
#'
#' @export
#' 
#' @import shiny
#' 
movies_app <- function(runApp = TRUE) {
  app <- shiny::shinyApp(
                  ui = movies_ui, 
                  server = movies_server)
   if (runApp)
      shiny::runApp(app, test.mode = TRUE)
   else
      app
}
```




## Updated [`app.R`]{style="font-size: 1.10em"}

### [`interactive()`]{style="font-size: 1.05em"}

```{r}
#| eval: false 
#| code-fold: false
# load package ----------------------------------
if (!interactive()) {
  
} else {
   
}
```

### [`stderr()`]{style="font-size: 1.05em"}

```{r}
#| eval: false 
#| code-fold: false
# load package ----------------------------------
if (!interactive()) {
   sink(stderr(), type = "output")
   tryCatch({
      library(pkgApp)
   }, error = function(e) {
      
   })
} else {
   
}
```

### [`pkgload::load_all()`]{style="font-size: 1.05em"}

```{r}
#| eval: false 
#| code-fold: false
# load package ----------------------------------
if (!interactive()) {
   sink(stderr(), type = "output")
   tryCatch({
      library(pkgApp)
   }, error = function(e) {
      pkgload::load_all()
   })
} else {
   pkgload::load_all()
}
```

```{r}
#| eval: false 
#| code-fold: false
# load package ----------------------------------
if (!interactive()) {
   sink(stderr(), type = "output")
   tryCatch({
      library(pkgApp)
   }, error = function(e) {
      pkgload::load_all()
   })
} else {
   pkgload::load_all()
}

# movies_app ------------------------------------
pkgApp::movies_app(runApp = interactive())
```


## Recap