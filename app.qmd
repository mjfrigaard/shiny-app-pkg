# [`app.R`]{style="font-size: 1.05em;"} {.unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  header = "Warning!",
  contents = "This section is currently under development. Thank you for your patience."
)
```

In the previous chapter we removed the calls to `library()` in `app.R`, which is a critical step in managing the dependencies. This chapter will cover the differences between shiny's `shinyApp()` and `runApp()` functions, which one belongs in the `app.R` file, and other options for running an app (or apps) in your app-package.

## [`app.R`]{style="font-size: 1.05em"} ([`main`]{style="font-size: 1.05em"})

We're going to revert back to the `main` branch of `pkgApp` to get a better understanding of the evolution of our `app.R` file. When we initially used `app.R` to run `movies_app(),` it contained the `library()` calls for the necessary packages, the code for `movies_app()`, *and* a call to the function:

```{r}
#| label: git_box_pkgApp_main
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "alt",
  fig_pw = '75%', 
  branch = "main", 
  repo = 'pkgApp')
```

```{r}
#| eval: false 
#| code-fold: true
#| code-summary: 'show/hide initial version of movies_app()'
# packages ------------------------------------
library(shiny)
library(shinythemes)
library(stringr)
library(ggplot2)
library(rlang)

movies_app <- function() {
  shiny::shinyApp(
    ui = shiny::fluidPage(
      theme = shinythemes::shinytheme("spacelab"),
      shiny::titlePanel(
        shiny::div(
          shiny::img(
            src = "shiny.png",
            height = 60,
            width = 55,
            style = "margin:10px 10px"
            ), 
         "Movies Reviews"
        )
      ),
      shiny::sidebarLayout(
        shiny::sidebarPanel(
          mod_var_input_ui("vars")
        ),
        shiny::mainPanel(
          mod_scatter_display_ui("plot")
        )
      )
    ),
    server = function(input, output, session) {
      
      selected_vars <- mod_var_input_server("vars")

      mod_scatter_display_server("plot", var_inputs = selected_vars)
    }
  )
}
movies_app()
```


`movies_app()` is a wrapper function for `shiny::shinyApp()`, but it creates the `ui` and `server` arguments internally (with the modules). As we can see in the image below, the **Run App** icon is available in the **Source** pane:

:::{#fig-05_app_main_runApp_icon}

![`app.R` in `main` branch](img/05_app_main_runApp_icon.png){#fig-05_app_main_runApp_icon width=100%}

**Run App** icon in `app.R` of `main` branch
:::

Clicking on **Run App** will call `shiny::runApp()` in the **Console**, but it also produces a warning: 

:::{#fig-05_app_main_runApp_console}

![`runApp()` in **Console** of `main` branch](img/05_app_main_runApp_console.png){#05_app_main_runApp_console-05_app_main_runApp_icon width=100%}

Clicking on **Run App** in `app.R` of `main` branch
:::

So even though `app.R` contains a call to `shinyApp()`, `movies_app()` is *actually* run with `runApp()` (we'll come back to this in a moment).

### [`loadSupport`]{style="font-size: 1.10em"} warning

The warning in the **Console** tells us we should be mindful of '*unexpected behavior(s)*' when sourcing the `R/` subdirectory in an R package (or app-package in this case):

```{verbatim}
#| eval: false 
#| code-fold: false
Warning in loadSupport(appDir, renv = sharedEnv, globalrenv = NULL) :
  Loading R/ subdirectory for Shiny application, but this directory appears to
  contain an R package. Sourcing files in R/ may cause unexpected behavior.
```

The warning above also tells us that despite `pkgApp` being structured as an app-package, the `R/` folding is still being sourced like it's a shiny project.

## [`app.R`]{style="font-size: 1.05em"} ([`02_roxygen2`]{style="font-size: 1.05em"})

Let's fast-forward to the `02_roxygen2` branch of `pkgApp`. This is the first version of `movies_app()` that's contained in the `R/` folder (in `R/movies_app.R`).

```{r}
#| label: git_box_pkgApp_02_roxygen2
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "alt",
  fig_pw = '75%', 
  branch = "02_roxygen2", 
  repo = 'pkgApp')
```

```{verbatim}
#| eval: false
#| code-fold: false
R/
├── mod_scatter_display.R
├── mod_var_input.R
├── movies_app.R <- movies_app()
├── movies_server.R
├── movies_ui.R
└── utils.R

1 directory, 6 files
```


If you recall, in the `02_roxygen2` branch, `movies_app()` isn't exported yet, so the error below is expected when we run the contents of `app.R`:

```{r}
#| eval: false
#| code-fold: false
# packages ------------------------------------
library(shiny)
library(shinythemes)
library(stringr)
library(ggplot2)
library(rlang)

# movies_app ------------------------------------
movies_app()
```

```{verbatim}
#| eval: false
#| code-fold: false
Error in movies_app() : could not find function "movies_app"
```

However, if we run call `shiny::runApp()` in the **Console**, we see the following: 

:::: {.column-page-inset-right layout="[ [1,3] ]"}

```{r}
#| eval: false
#| code-fold: false
shiny::runApp()
```


![Calling `runApp()` in `02_roxygen2`](img/05_app_roxygen2_runApp_console.png){#fig-05_runApp width=100%}

::::

#### Feature or bug?

We're seeing the `loadSupport()` warning because one of the features of `shiny` projects is to `source()` the files in the `R/` folder (which we covered in [Chapter 1](https://mjfrigaard.github.io/shinyap/shiny.html#r)). 

However, after converting the contents of `pkgApp` into an app-package (like the one in the `02_roxygen2` branch), the contents of `R/` are loaded with `devtools::load_all()` instead of `source()`. We should make sure the `app.R` accounts for `pkgApp` the app-package (not a `shiny` project).

In the following section we'll compare `shinyApp()` and `runApp()` to uncover why `shinyApp()` should be used when the app has inline definitions for the `ui` and `server` arguments in a single `.R` script , while `runApp()` is geared towards running directory-based apps. 

## [`shinyApp()`]{style="font-size: 1.05em"} vs. [`runApp()`]{style="font-size: 1.05em"}

`shinyApp()` is typically used to create apps within an interactive R session (like the R console or in Posit Workbench). When provided a pair of `ui` and `server` definitions (e.g. as `shinyApp(ui, server)`), developers can use `shinyApp()` to quickly spin up simple applications (that's why its included as the boilerplate app with new `shiny` project). 

`runApp()` is designed to run standalone `shiny` apps that are located in a separate directory containing `ui.R` and `server.R` (or `app.R`) files. In app-packages, apps can be organized inside an `inst/` or `inst/apps/` directory, and we can use `runApp()` to launch it.

In practice, if you're just testing out a quick idea or demonstrating something in a single script, `shinyApp()` is convenient. For more complex or production-level apps, the directory structure supported by `runApp()` offers more flexibility and organization.

## Updated [`app.R`]{style="font-size: 1.10em"}

```{r}
#| label: git_box_pkgApp_05_run-app
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "alt",
  fig_pw = '75%', 
  branch = "05_run-app", 
  repo = 'pkgApp')
```

#### [`test.mode`]{style="font-size: 1.05em"}

```{r}
#| eval: false 
#| code-fold: false
#' Movies app standalone function
#'
#' Wrapper function for `shiny::shinyApp()`
#'
#' @return shiny app
#' 
#' 
#' @seealso [mod_var_input_ui()], [mod_var_input_server()], [mod_scatter_display_ui()], [mod_scatter_display_server()]
#'
#' @export
#' 
#' @import shiny
#' 
movies_app <- function(runApp = TRUE) {
  app <- shiny::shinyApp(
                  ui = movies_ui, 
                  server = movies_server)
   if (runApp)
      shiny::runApp(app, test.mode = TRUE)
   else
      app
}
```

### [`interactive()`]{style="font-size: 1.05em"}

```{r}
#| eval: false 
#| code-fold: false
if (!interactive()) {
  
} else {
   
}
```

### [`stderr()`]{style="font-size: 1.05em"}

```{r}
#| eval: false 
#| code-fold: false
if (!interactive()) {
   sink(stderr(), type = "output")
   tryCatch({
      library(pkgApp)
   }, error = function(e) {
      
   })
} else {
   
}
```

### [`pkgload::load_all()`]{style="font-size: 1.05em"}

```{r}
#| eval: false 
#| code-fold: false
if (!interactive()) {
   sink(stderr(), type = "output")
   tryCatch({
      library(pkgApp)
   }, error = function(e) {
      pkgload::load_all()
   })
} else {
   pkgload::load_all()
}
```

```{r}
#| eval: false 
#| code-fold: false
if (!interactive()) {
   sink(stderr(), type = "output")
   tryCatch({
      library(pkgApp)
   }, error = function(e) {
      pkgload::load_all()
   })
} else {
   pkgload::load_all()
}

# movies_app ------------------------------------
pkgApp::movies_app(runApp = interactive())
```


## Recap

### [`shinyApp()`]{style="font-size: 1.05em"} 

-   `shinyApp()` is useful for quick prototyping or when your app is defined in a single `.R` script.

-   `shinyApp()` doesn't care about file structure since you are passing `ui` and `server` definitions directly.

-   Since the app's definition is contained directly within the call to `shinyApp()`, it can be a bit more portable in the sense of sharing a single script. However, this can become unwieldy for larger apps.

-   It's possible to bundle `shinyApp()` in a wrapper function to integrate within an R package (like we've done with `movies_app()`).

-    `shinyApp()` can return a Shiny app object, which can be useful if you want to further manipulate or explore the app structure programmatically.

### [`runApp()`]{style="font-size: 1.05em"} 

-   `runApp()` is intended for running Shiny apps that are contained in a directory structure. If you've organized your app with separate `ui.R` and `server.R` files, or `app.R` in a directory, you would use `runApp()` to launch it

-   The primary argument in `runApp()` is a path to the directory containing the Shiny app, e.g., `runApp("path/to/app")`. However, `runApp()` can also be called without any arguments from within a directory that contains a Shiny app.

-    Expects a specific directory structure. If you have separate `ui.R` and `server.R` files, `runApp()` will automatically look for these. If you have a single `app.R` file, it will execute that.

-   Designed for apps that have grown beyond a simple script, where separating UI and server logic, and perhaps including additional assets like datasets or `www` content, makes sense.

-   Typically does not return a value; its primary purpose is to execute the app.
