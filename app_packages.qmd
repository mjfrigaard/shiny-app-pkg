# App-packages 

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o", look = "minimal",
  header = "Caution",
  contents = "This section is still being developed--it's contents are subject to change.",
  fold = FALSE
)
```

## Introduction (Review Chapters 1 - 3)

Let's briefly review what we've covered in the last three chapters:

### Whole app game (Chapter 1)

The **Whole app game** chapter walks through the 'whole game' of the app-package development workflow. The application in this example comes from the [Packages chapter](https://mastering-shiny.org/scaling-packaging.html) of Mastering Shiny. 

```{r}
#| label: co_box_branches_chp_01
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = TRUE, look = "simple",
  header = "Chapter 1: GitHub Repository & Branches",
  contents = "
The code for Chapter 1 (Whole app game) is stored in the following repository:

1. [`monthAppPkg`](https://github.com/mjfrigaard/monthAppPkg)
  
"
)
```

### Shiny apps (Chapter 2)

The [**Shiny apps**](https://mjfrigaard.github.io/shinyap/shiny.html) Chapter covered shiny projects and some 'pre-package practices' to adopt for your shiny app that can make the transition to working with app-packages easier. 

```{r}
#| label: co_box_branches_chp_02
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = TRUE, look = "simple",
  header = "Chapter 2: GitHub Repository & Branches",
  contents = "
The code for Chapter 2 (Shiny apps) is stored in the following branches:
  
1. [`main`](https://github.com/mjfrigaard/shinyAppProj/tree/main): Contains a new shiny app project created from the **New Project Wizard** (with Old Faithful Geyser Data)   

2. [`02_movies-app`](https://github.com/mjfrigaard/shinyAppProj/tree/02_movies-app): The boilerplate app in `app.R` is replaced with the code for the movie review application, and the `scatter_plot()` utility function is added to `utils.R` and `movies.RData` is added to the project.

3. [`03_proj-app`](https://github.com/mjfrigaard/shinyAppProj/tree/03_proj-app) contains an 'fully developed' shiny app project with the following contents:  
   - `DESCRIPTION` file  
   - `README.md` file   
   - `R/` folder 
     - **Modules:** two module files are created in the `R/` folder (`mod_var_input.R` and `mod_scatter_display.R`)  
     - **Standalone app function**: the code in `app.R` is converted to a standalone app function: `movies_app()`
     - **Utility function:** Move `utils.R` into the `R/` folder   
   - The `www/` folder contains the image file (`shiny.png`)   
   - **Deployment:** The `rsconnect/` folder contains files for deploying to [shinyapps.io](https://www.shinyapps.io/)
  
"
)
```

### Packages (Chapter 3)

**Packages** illustrated what separates projects from R packages. This chapter also covered 1) how to create a new shiny app-package or 2) convert an existing shiny project into an app-package. 

```{r}
#| label: co_box_branches_chp_03
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = TRUE, look = "simple",
  header = "Chapter 3: GitHub Repository & Branches",
  contents = "
The code for Chapter 3 (Projects) is stored in the following branches:
  
1. [`03_proj-app`](https://github.com/mjfrigaard/shinyAppProj/tree/03_proj-app) is an ‘advanced’ package from the previous chapter   
  
2. [`04_description`](https://github.com/mjfrigaard/shinyAppProj/tree/04_description) is a branch from `03_proj-app` and adds the seven mandatory `DESCRIPTION` fields.  
  
3. [`05_rproj`](https://github.com/mjfrigaard/shinyAppProj/tree/05_rproj) is a branch from `04_description` and manually converts the shiny app project to a shiny app-package using the `.Rproj` file.
  
4. [`06_create-package`](https://github.com/mjfrigaard/shinyAppProj/tree/06_create-package) is a branch from `03_proj-app` and creates a package using `usethis::create_package()`

"
)
```

### Development (Chapter 4)

**Development** introduced the `devtools` package and its core functions (`load_all()`, `document()`, and `install()`).

```{r}
#| label: co_box_branches_chp_04
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = TRUE, look = "simple",
  header = "Chapter 4: GitHub Repository & Branches",
  contents = "

The code for Chapter 4 (`devtools`) is stored in the following branch:

1. [`06_devtools`](https://github.com/mjfrigaard/shinyAppProj/tree/06_devtools) is a branch from the manually converted app-package in [`05_rproj`](https://github.com/mjfrigaard/shinyAppProj/tree/05_rproj)

"
)
```

We're now at a point that we've converted a Shiny project (`shinyAppProj`) into a package. The package conversions live in the `06_devtools` and `06_create-package` branches: 

-   In the `06_devtools` branch, `shinyAppProj` was converted to a package by manually adding the required fields to the `DESCRIPTION` file, then running the key devtools development functions (`load_all()`, `document()`, and `install()`) 

    ```{bash}
    #| eval: false 
    #| code-fold: false
    #| code-line-numbers: true
    #| code-overflow: wrap
    Package: shinyAppProj
    Title: movies app
    Version: 0.0.0.9000
    Author: John Smith [aut, cre]
    Maintainer: John Smith <John.Smith@email.io>
    Description: A movie-review shiny application.
    License: GPL-3
    RoxygenNote: 7.2.3
    Encoding: UTF-8
                                                      # <1>
    ```
    1. Always leave an empty line in the `DESCRIPTION` 

-   In the `06_create-package` branch, we used the `usethis::create_package()` function to convert `shinyAppProj` into a package. 

    ```{bash}
    #| eval: false 
    #| code-fold: false
    #| code-line-numbers: true
    #| code-overflow: wrap
    Package: shinyAppProj
    Title: movies app
    Version: 0.0.0.9000
    Author: John Smith [aut, cre]
    Maintainer: John Smith <John.Smith@email.io>
    Description: A movie-review shiny application.
    License: GPL-3
    Encoding: UTF-8
    Roxygen: list(markdown = TRUE)
    RoxygenNote: 7.2.3
                                                      # <1>
    ```
    1. Always leave an empty line in the `DESCRIPTION` 

The only difference between these two branches lies in the `DESCRIPTION` files--in the `06_create-package` branch, the `Roxygen: list(markdown = TRUE)` field was added (which we will cover in the upcoming [Documentation](https://mjfrigaard.github.io/shinyap/document.html) chapter).

## App-packages (Chapters 5 - 10)

The following three sections will continue with app-package development, emphasizing developing a shiny application within a package structure. 

```{r}
#| label: git_box_pkgApp_main
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  fig_pw = '75%', 
  branch = "main", 
  repo = 'shinyAppPkg')
```


```{r}
#| label: co_box_pkgApp
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = FALSE, look = "simple",
  header = "GitHub [`shinyAppPkg`]:[`main`]",
  contents = "
  
The code for the next section can be found in the [`shinyAppPkg`](https://github.com/mjfrigaard/shinyAppPkg/tree/main) repository.
  
The [`main`](https://github.com/mjfrigaard/shinyAppPkg/tree/main) branch of `shinyAppPkg` is identical to the [`06_create-package`](https://github.com/mjfrigaard/shinyAppProj/tree/06_create-package) branch from the `shinyAppProj` repository from the previous section:
  
  \`\`\`bash
  shinyAppPkg/ 
    ├── DESCRIPTION
    ├── NAMESPACE
    ├── R
    │   ├── mod_scatter_display.R
    │   ├── mod_var_input.R
    │   └── utils.R
    ├── README.md
    ├── app.R
    ├── man
    ├── movies.RData
    ├── shinyAppPkg.Rproj
    └── www
        └── shiny.png
    
    4 directories, 10 files
  \`\`\`
  
The `rsconnect/` folder has been removed because we'll cover deploying `shinyAppPkg` in future sections. 
  
"
  
)
```

A preview of the topics covered in the following chapters is provided below.  

### Documentation (Chapter 5)

1. `roxygen2` basics:
    -   Required tags   
        -   `@title`, `@description`, `@details`, `@param`, `@return`, and `@examples`  
    -   App-package considerations for modules and standalone app functions:    
        -   `@seealso`, `@family`, and `@section`

### Dependencies (Chapter 6)

1. Exporting functions from your package namespace   
    -   `@export`/`export()`     
2. Importing functions from add-on packages into your package namespace  
    -   `@import`/`import()`, `@importFrom`/`importFrom()`   
3. The `Imports` field in the `DESCRIPTION`

### Data (Chapter 7)

-   Documenting data with 
    -   `roxygen2`: `@format`, `\describe`, `\item`    
-   Location of data files: `data/` vs. `data-raw/` vs. `inst/extdata/`

### Launch (Chapter 8)

-   What goes in `app.R`? 
    -   `shinyApp()` vs. `runApp()`

### External files (Chapter 9)

-   `inst/` & `www/` 

-   `system.file()`

-   `addResourcePath()`

### Tests (Chapter 10)

-   User specifications, feature requirements, functional requirements

-   Unit tests with `testthat`

-   Module server function tests with `testServer()`

-   End-to-end/system tests with `shinytest2`

