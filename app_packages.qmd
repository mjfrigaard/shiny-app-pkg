# App-packages {.unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "y",
  header = "Caution",
  contents = "This section is currently under development. Thank you for your patience.", 
  fold = FALSE
)
```

## Introduction (Review Chapters 1 - 3)

Let's review what we've coverd in the last three chapters:

### Shiny apps (Chapter 1)

The **Shiny apps** Chapter covered shiny projects and some 'pre-package practices' to adopt for your shiny app that can make the transition to working with app-packages easier. 

```{r}
#| label: co_box_branches_chp_01
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = FALSE, look = "minimal",
  header = "Chapter 1: GitHub branches",
  contents = "
The code for Chapter 1 (Shiny apps) is stored in the following branches:
  
1. [`main`](https://github.com/mjfrigaard/projApp/tree/main): Contains a new shiny app project created from the **New Project Wizard** (with Old Faithful Geyser Data)   

2. [`02_movies-app`](https://github.com/mjfrigaard/projApp/tree/02_movies-app): The boilerplate app in `app.R` is replaced with the code for the movie review application, and the `scatter_plot()` utility function is added to `utils.R` and `movies.RData` is added to the project.

3. [`03_projApp`](https://github.com/mjfrigaard/projApp/tree/03_projApp) contains an 'advanced' shiny app project with the following contents:  
   - `DESCRIPTION` file  
   - `README.md` file   
   - `R/` folder 
     - **Modules:** two module files are created in the `R/` folder (`mod_var_input.R` and `mod_scatter_display.R`)  
     - **Standalone app function**: the code in `app.R` is converted to a standalone app function: `movies_app()`
     - **Utility function:** Move `utils.R` into the `R/` folder   
   - The `www/` folder contains the image file (`shiny.png`)   
   - **Deployment:** The `rsconnect/` folder contains files for deploying to [shinyapps.io](https://www.shinyapps.io/)
  
"
)
```


### Packages (Chapter 2)

**Packages** illustrated what separates projects from R packages. This chapter also covered 1) how to create a new shiny app-package or 2) convert an existing shiny project into an app-package. 

```{r}
#| label: co_box_branches_chp_02
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = FALSE, look = "minimal",
  header = "Chapter 2: GitHub branches",
  contents = "
The code for Chapter 2 (Projects) is stored in the following branches:
  
1. [`03_projApp`](https://github.com/mjfrigaard/projApp/tree/03_projApp) is an ‘advanced’ package from the previous chapter   
  
2. [`04_description`](https://github.com/mjfrigaard/projApp/tree/04_description) is a branch from `03_projApp` and adds the seven mandatory `DESCRIPTION` fields.  
  
3. [`05_rproj`](https://github.com/mjfrigaard/projApp/tree/05_rproj) is a branch from `04_description` and manually converts the shiny app project to a shiny app-package using the `.Rproj` file.
  
4. [`06_create-package`](https://github.com/mjfrigaard/projApp/tree/06_create-package) is a branch from `03_projApp` and creates a package using `usethis::create_package()`

"
)
```

### `devtools` (Chapter 3)

**`devtools`** introduced the `devtools` package and its core functions (`load_all()`, `document()`, and `install()`).

```{r}
#| label: co_box_branches_chp_03
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = FALSE, look = "minimal",
  header = "Chapter 3: GitHub branches",
  contents = "

The code for Chapter 3 (`devtools`) is stored in the following branch:

1. [`06_devtools`](https://github.com/mjfrigaard/projApp/tree/06_devtools) is a branch from the manually converted app-package in [`05_rproj`](https://github.com/mjfrigaard/projApp/tree/05_rproj)

"
)
```

## App-packages (Chapters 4 - 9)

The following three sections will continue with app-package development, emphasizing developing a shiny application in a package structure. We'll be using the code stored in the [`pkgApp` repository](https://github.com/mjfrigaard/pkgApp). 

```{r}
#| label: git_box_pkgApp_main
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  fig_pw = '75%', 
  branch = "main", 
  repo = 'pkgApp')
```


```{r}
#| label: co_box_pkgApp
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = FALSE, look = "minimal",
  header = "GitHub [`pkgApp`]:[`main`]",
  contents = "
  
The code for the next section can be found in the `main` branch of the [`pkgApp`](https://github.com/mjfrigaard/pkgApp/tree/main) repo.
  
The `main` branch of `pkgApp` is identical to the [`06_create-package` branch](https://github.com/mjfrigaard/projApp/tree/06_create-package) from the `projApp` repository from the previous section:
  
  `\`\`\bash
  pkgApp [06_create-package]
    ├── DESCRIPTION
    ├── NAMESPACE
    ├── R
    │   ├── mod_scatter_display.R
    │   ├── mod_var_input.R
    │   └── utils.R
    ├── README.md
    ├── app.R
    ├── man
    ├── movies.RData
    ├── pkgApp.Rproj
    └── www
        └── shiny.png
    
    4 directories, 10 files
  `\`\`\
  
The `rsconnect/` folder has been removed because we'll cover deploying `pkgApp` in future sections. 
  
"
  
)
```

A summary of each chapter in this section is provided below. 

### `roxygen2` (Chapter 4)

1. `roxygen2` basics:
    -   Required tags: `@title`, `@description`, `@details`, `@param`, `@return`, and `@examples`   
    -   App-package considerations for modules and standalone app functions: `@seealso`, `@family`, and `@section`

### Dependencies (Chapter 5)

1. Exporting functions from your package namespace   
    -   `@export`/`export()`
    
2. Importing functions from add-on packages into your package namespace  
    -   `@import`/`import()`, `@importFrom`/`importFrom()`   

3. The `Imports:` field in the `DESCRIPTION`

### Running the app (Chapter 6)

-   What goes in `app.R`? 

-   `shinyApp()` vs. `runApp()`

### Data files (Chapter 7)

-   Documenting data with `roxygen2`: `@format`, `\describe`, `\item`

-   Location of data files: `data/` vs. `data-raw/` vs. `inst/extdata/`

### `inst/` & `www/` (Chapter 8)

-   `system.file()`

-   `addResourcePath()`

### Tests (Chapter 9)

-   `testthat`

-   `testServer()`

-   `shinytest2`

