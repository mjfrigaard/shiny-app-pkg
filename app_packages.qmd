# App-packages {#sec-app-pkgs .unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
library(shinypak)
```

## Review Chapters 1 - 4

Let's briefly review what we've covered in the last four chapters:

### Whole app game (Chapter 1)

@sec-whole-game walks through the 'whole game' of the app-package development workflow. The application in this example comes from the [Packages](https://mastering-shiny.org/scaling-packaging.html) chapter of Mastering Shiny. 

:::: {.callout-tip collapse='true' appearance='simple'}

## [Chapter 1: GitHub Branches]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 1 (Whole app game) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 1 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^01')
```

::: 

::::

### Shiny (Chapter 2)

The [Shiny](shiny.qmd) chapter covered

1.    Basic Shiny projects (@sec-shiny-projects)

2.    Shiny app folders (@sec-shiny-folders) and files (@sec-shiny-files)

3.    Shiny modules (@sec-shiny-modules) and standalone app functions (@sec-shiny-standalone-app-fun), and 

4.    Other 'pre-package' advanced practices (@sec-adv-shiny-projects) you may have adopted in your Shiny app. 

:::: {.callout-tip collapse='true' appearance='simple'}

## [Chapter 2: GitHub Branches]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 2 (Shiny) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 2 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^02')
```

::: 

::::

### Packages (Chapter 3)

[Packages](packages.qmd) illustrates what separates R projects from R packages. This chapter covers:

1. The essential ingredients of an R package (@sec-packages-essential-ingredients)

2. How to create a new Shiny app-package (@sec-create-new-app-packages) and

3. Convert an existing Shiny app (@sec-convert-shiny-app-packages) into an app-package. 

:::: {.callout-tip collapse='true' appearance='simple'}

## [Chapter 3: GitHub Branches]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 3 (Packages) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 3 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^03')
```

::: 

::::


### Development (Chapter 4)

@sec-dev introduced the `devtools` package and its core functions:

1. `load_all()` (@sec-dev-load)

2. `document()` (@sec-dev-document), and 

3. `install()` (@sec-dev-install)

:::: {.callout-tip collapse='true' appearance='simple'}

## [Chapter 4: GitHub Branches]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 2 (Development) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 4 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^04')
```

::: 

::::

## App-packages

We now have two branches of `moviesApp` with a functioning app-package: 

-   In the `04_devtools` branch (created in @sec-dev-install), `moviesApp` was converted to a package by manually adding the required fields to the `DESCRIPTION` file, then running the key `devtools` development functions (`load_all()`, `document()`, and `install()`) 

    ```{bash}
    #| eval: false 
    #| code-fold: false
    #| code-line-numbers: true
    Package: moviesApp
    Title: movies app
    Version: 0.0.0.9000
    Author: John Smith [aut, cre]
    Maintainer: John Smith <John.Smith@email.io>
    Description: A movie-review Shiny application.
    License: GPL-3
    RoxygenNote: 7.2.3
    Encoding: UTF-8
                                                      
    ```
    
:::{.column-margin}

***Always leave an empty line in the `DESCRIPTION`***

:::

-   In the `03.3_create-package` branch (created in @sec-convert-shiny-app-packages), we used the `usethis::create_package()` function to convert `moviesApp` into a package. 

    ```{bash}
    #| eval: false 
    #| code-fold: false
    Package: moviesApp
    Title: movies app
    Version: 0.0.0.9000
    Author: John Smith [aut, cre]
    Maintainer: John Smith <John.Smith@email.io>
    Description: A movie-review Shiny application.
    License: GPL-3
    Encoding: UTF-8
    Roxygen: list(markdown = TRUE)
    RoxygenNote: 7.2.3
    ```

The only difference between these two branches lies in the `DESCRIPTION` file--in the `03.3_create-package` branch, the `Roxygen: list(markdown = TRUE)` field was added (which we will cover in the upcoming [Documentation](document.qmd) chapter).

The following chapters will continue with app-package development, emphasizing developing a Shiny application within a package structure. A preview of each topic covered in the upcoming chapters is provided below.  

### Documentation (Chapter 5)

@sec-doc covers documenting your app-package code in the `R/` folder:

-   `roxygen2` basics:
    -   Required tags:   
        -   `@title`, `@description`, `@details`, `@param`, `@return`, and `@examples`  
    -   App-package tags for modules and standalone app functions:    
        -   `@seealso`, `@family`, and `@section`

### Dependencies (Chapter 6)

@sec-depends dives into dependencies. We'll cover how to export functions and objects from your app-packages for others to use, and how to handle functions from add-on (i.e., external) packages.

-   Exporting functions from your package namespace   
    -   `@export`/`export()`     
-   Importing functions from add-on packages into your package namespace  
    -   `@import`/`import()`, `@importFrom`/`importFrom()`   
-   The `Imports` field in the `DESCRIPTION`   
    -   `usethis::use_package()`

### Data (Chapter 7)

@sec-data covers how to include datasets in your app-package namespace, and the various kinds of data in R packages. 

-   Documenting data with 
    -   `roxygen2`: `@format`, `\describe`, `\item`    
-   Location of data files: `data/` vs. `data-raw/` vs. `inst/extdata/`

### Launch (Chapter 8)

The @sec-launch chapter covers how to 1) run your application during development, 2) how to run your app using a standalone app function, and 3) how to deploy your application to shinyapps.io.

-   What goes in `app.R`? 
    -   `shinyApp()` vs. `shinyAppDir()` vs. `runApp()`   
    -   `rsconnect::deployApp()`

### External files (Chapter 9)

@sec-inst covers how to include external resources (i.e. the images, CSS, html, or other files that are typically included in the `www/` folder and served when you run your Shiny app). This chapter also covers other uses for the `isnt/` folder in app-packages.

-   `www/` vs. `inst/` 

-   `system.file()`

-   `addResourcePath()`


```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```