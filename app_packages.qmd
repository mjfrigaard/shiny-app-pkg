# App-packages {#sec-app-pkgs .unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
library(shinypak)
```

Expand the callout boxes below to review what we've covered in the last four chapters:

::: {.callout-note collapse='true'}

## [Whole app game (Chapter 1)]{style='font-size: 1.15em;'}

@sec-whole-game walks through the 'whole game' of the app-package development workflow. The application in this example comes from the [Packages](https://mastering-shiny.org/scaling-packaging.html) chapter of Mastering Shiny. 

:::: {.callout-tip collapse='true' appearance='default'}

## [Chapter 1 Applications]{style='font-weight: bold; font-size: 1.05em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 1 (Whole app game) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 1 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^01')
```

::: 

::::

:::

::: {.callout-note collapse='true'}

## [Shiny (Chapter 2)]{style='font-size: 1.15em;'}

The [Shiny](shiny.qmd) chapter covered

1.    Basic Shiny projects (@sec-shiny-projects)

2.    Shiny app folders (@sec-shiny-folders) and files (@sec-shiny-files)

3.    Shiny modules (@sec-shiny-modules) and standalone app functions (@sec-shiny-standalone-app-fun), and 

4.    Other 'pre-package' advanced practices (@sec-adv-shiny-projects) you may have adopted in your Shiny app. 

:::: {.callout-tip collapse='true' appearance='deafult'}

## [Chapter 2 Applications]{style='font-size: 1.05em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 2 (Shiny) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 2 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^02')
```

::: 

::::

:::

::: {.callout-note collapse='true'}

## [Packages (Chapter 3)]{style='font-size: 1.15em;'}

[Packages](packages.qmd) illustrates what separates R projects from R packages. This chapter covers:

1. The essential ingredients of an R package (@sec-packages-essential-ingredients)

2. How to create a new Shiny app-package (@sec-create-new-app-packages) and

3. Convert an existing Shiny app (@sec-convert-shiny-app-packages) into an app-package. 

:::: {.callout-tip collapse='true' appearance='deafult'}

## [Chapter 3 Applications]{style='font-weight: bold; font-size: 1.05em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 3 (Packages) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 3 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^03')
```

::: 

::::

:::

::: {.callout-note collapse='true'}

## [Development (Chapter 4)]{style='font-size: 1.15em;'}

@sec-dev introduced the `devtools` package and its core functions:

1. `load_all()` (@sec-dev-load)

2. `document()` (@sec-dev-document), and 

3. `install()` (@sec-dev-install)

:::: {.callout-tip collapse='true' appearance='deafult'}

## [Chapter 4 Applications]{style='font-weight: bold; font-size: 1.05em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 2 (Development) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 4 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^04')
```

::: 

::::

:::


<!--

We now have two branches of `sap` with a functioning app-package: 

1. In the `04_devtools` branch (created in @sec-dev-install), `sap` was converted to a package by manually adding the required fields to the `DESCRIPTION` file, then running the key `devtools` development functions (`load_all()`, `document()`, and `install()`) 

2. In the `03.3_create-package` branch (created in @sec-convert-shiny-app-packages), we used the `usethis::create_package()` function to convert `sap` into a package.

The only difference between these two branches lies in the `DESCRIPTION` file

```{bash}
#| eval: false
#| code-fold: false
Package: sap
Title: Shiny App-Packages
Version: 0.0.0.9000
Author: John Smith [aut, cre]
Maintainer: John Smith <John.Smith@email.io>
Description: An R package with a collection of Shiny applications.
License: GPL-3
Encoding: UTF-8
Roxygen: list(markdown = TRUE) #<1>
RoxygenNote: 7.3.2
```
1. In the `03.3_create-package` branch, the `Roxygen: list(markdown = TRUE)` field was added (which we will cover in the upcoming [documentation](document.qmd) chapter).

-->

## App-packages

The following chapters will continue with app-package development, emphasizing developing a Shiny application within the R package structure. A preview of each topic covered in the upcoming chapters is provided below.  

### Documentation (Chapter 5)

@sec-doc covers documenting the code in your app-package with `roxygen2`:

- Required tags: 
    - @sec-roxygen2-md-support
    - @sec-roxygen2-title 
    - @sec-roxygen2-param-return and 
    - @sec-roxygen2-examples  
  
- App-package tags for modules and standalone app functions:
    - @sec-roxygen2-seealso  
    - @sec-roxygen2-family  
    - @sec-roxygen2-usage, and   
    - @sec-roxygen2-section

### Dependencies (Chapter 6)

@sec-depends dives into the external (i.e. add-on) functions and packages you've used to build your app-package. We'll also cover how to export functions and objects from your app-packages for others to use.

-   Exporting functions from your package namespace: @sec-depends-exports      
-   Importing functions from add-on packages into your package namespace: @sec-depends-imports   

### Data (Chapter 7)

@sec-data covers how to include datasets in your app-package namespace, and the various kinds of data in R packages. 

-   Storing and Documenting data: @sec-data-data and @sec-document-data

-   Raw data files: @sec-data-data-raw

-   Other locations for data: @sec-data-inst-extdata

### Launch (Chapter 8)

The @sec-launch chapter covers how to 1) run your application during development, 2) how to run your app using a standalone app function, and 3) how to deploy your application to shinyapps.io.

- App run functions: 
  -   @sec-launch-shiny-app
  -   @sec-launch-shiny-app-dir
  -   @sec-launch-run-app

- Launching app files: 
  -   @sec-launch-app-dot-r

### Resources (Chapter 9)

@sec-resources covers how to include external resources (i.e. the images, CSS, html, or other files that are typically included in the `www/` folder and served when you run your Shiny app). This chapter also covers other uses for the `isnt/` folder in app-packages.

- Static files: 
  -   @sec-resources-image-files  
  -   @sec-resources-add-resource-path  
- Data files:
  -   @sec-resources-inst-dev   
- Quarto apps:
  -   @sec-resources-inst-quarto   
- Production:
  -   @sec-resources-inst-prod


```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```
