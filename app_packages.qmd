# App-packages {#sec-app-pkgs .unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o", look = "minimal",
  header = "Caution",
  contents = "This chapter is under review.",
  fold = FALSE
)
```

## Review Chapters 1 - 4

Let's briefly review what we've covered in the last three chapters:

### Whole app game (Chapter 1)

@sec-whole-game walks through the 'whole game' of the app-package development workflow. The application in this example comes from the [Packages](https://mastering-shiny.org/scaling-packaging.html) chapter of Mastering Shiny. 

```{r}
#| label: co_box_branches_chp_01
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = TRUE, look = "simple",
  header = "Chapter 1: GitHub Repository & Branches",
  contents = "
The code for Chapter 1 (Whole app game) is stored in the following repository:

1. [`monthAppPkg`](https://github.com/mjfrigaard/monthAppPkg)
  
"
)
```

### Shiny (Chapter 2)

The [Shiny](shiny.qmd) Chapter covered Shiny projects and some 'pre-package practices' to adopt for your Shiny app that can make the transition to working with app-packages easier. 

```{r}
#| label: co_box_branches_chp_02
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = TRUE, look = "simple",
  header = "Chapter 2: GitHub Repository & Branches",
  contents = "
The code for Chapter 2 (Shiny) is stored in the following branches:
  
1. [`main`](https://github.com/mjfrigaard/moviesApp/tree/main): Contains a new Shiny app project created from the **New Project Wizard** (with Old Faithful Geyser Data)   

2. [`02_movies-app`](https://github.com/mjfrigaard/moviesApp/tree/02_movies-app): The boilerplate app in `app.R` is replaced with the code for the movie review application, and the `scatter_plot()` utility function is added to `utils.R` and `movies.RData` is added to the project.

3. [`03_proj-app`](https://github.com/mjfrigaard/moviesApp/tree/03_proj-app) contains an 'fully developed' Shiny app project with the following contents:  
   - `DESCRIPTION` file  
   - `README.md` file   
   - `R/` folder 
     - **Modules:** two module files are created in the `R/` folder (`mod_var_input.R` and `mod_scatter_display.R`)  
     - **Standalone app function**: the code in `app.R` is converted to a standalone app function: `movies_app()`
     - **Utility function:** Move `utils.R` into the `R/` folder   
   - The `www/` folder contains the image file (`shiny.png`)   
   - **Deployment:** The `rsconnect/` folder contains files for deploying to [shinyapps.io](https://www.shinyapps.io/)
  
"
)
```

### Packages (Chapter 3)

[Packages](packages.qmd) illustrated what separates projects from R packages. This chapter also covered 1) how to create a new Shiny app-package or 2) convert an existing Shiny project into an app-package. 

```{r}
#| label: co_box_branches_chp_03
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = TRUE, look = "simple",
  header = "Chapter 3: GitHub Repository & Branches",
  contents = "
The code for Chapter 3 (Packages) is stored in the following branches:
  
1. [`03_proj-app`](https://github.com/mjfrigaard/moviesApp/tree/03_proj-app) is an ‘advanced’ package from the previous chapter   
  
2. [`04_description`](https://github.com/mjfrigaard/moviesApp/tree/04_description) is a branch from `03_proj-app` and adds the seven mandatory `DESCRIPTION` fields.  
  
3. [`05_rproj`](https://github.com/mjfrigaard/moviesApp/tree/05_rproj) is a branch from `04_description` and manually converts the Shiny app project to a Shiny app-package using the `.Rproj` file.
  
4. [`06a_create-package`](https://github.com/mjfrigaard/moviesApp/tree/06a_create-package) is a branch from `05_rproj` and creates a package using `usethis::create_package()`

"
)
```

### Development (Chapter 4)

@sec-dev introduced the `devtools` package and its core functions (`load_all()`, `document()`, and `install()`).

```{r}
#| label: co_box_branches_chp_04
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = TRUE, look = "simple",
  header = "Chapter 4: GitHub Repository & Branches",
  contents = "

The code for Chapter 4 (Development) is stored in the following branch:

1. [`06b_devtools`](https://github.com/mjfrigaard/moviesApp/tree/06b_devtools) is a branch from the manually converted app-package in [`05_rproj`](https://github.com/mjfrigaard/moviesApp/tree/05_rproj)

"
)
```

We're now at a point that we've converted a Shiny project (`moviesApp`) into a package. The package conversions live in the `06_devtools` and `06_create-package` branches: 

-   In the `06_devtools` branch, `moviesApp` was converted to a package by manually adding the required fields to the `DESCRIPTION` file, then running the key devtools development functions (`load_all()`, `document()`, and `install()`) 

    ```{bash}
    #| eval: false 
    #| code-fold: false
    #| code-line-numbers: true
    Package: moviesApp
    Title: movies app
    Version: 0.0.0.9000
    Author: John Smith [aut, cre]
    Maintainer: John Smith <John.Smith@email.io>
    Description: A movie-review Shiny application.
    License: GPL-3
    RoxygenNote: 7.2.3
    Encoding: UTF-8
                                                      # <1>
    ```
    1. Always leave an empty line in the `DESCRIPTION` 

-   In the `06_create-package` branch, we used the `usethis::create_package()` function to convert `moviesApp` into a package. 

    ```{bash}
    #| eval: false 
    #| code-fold: false
    Package: moviesApp
    Title: movies app
    Version: 0.0.0.9000
    Author: John Smith [aut, cre]
    Maintainer: John Smith <John.Smith@email.io>
    Description: A movie-review Shiny application.
    License: GPL-3
    Encoding: UTF-8
    Roxygen: list(markdown = TRUE)
    RoxygenNote: 7.2.3
    
    ```

-   The only difference between these two branches lies in the `DESCRIPTION` files--in the `06_create-package` branch, the `Roxygen: list(markdown = TRUE)` field was added (which we will cover in the upcoming [Documentation](https://mjfrigaard.github.io/shinyap/document.html) chapter).

## App-packages

The following six chapter will continue with app-package development, emphasizing developing a Shiny application within a package structure. 

In the following chapters, we'll be using code from the `moviesApp` repository:

```{r}
#| label: co_box_pkgApp
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", 
  hsize = "1.15",
  fold = TRUE, 
  look = "minimal",
  header = "`moviesApp/tree/`",
  contents = "
  
The code for the next section can be found in the [`06b_devtools`](https://github.com/mjfrigaard/moviesApp/tree/06b_devtools) branch of [`moviesApp`](https://github.com/mjfrigaard/moviesApp/) repository.
  
  \`\`\`bash
  moviesApp/ 
    ├── DESCRIPTION
    ├── NAMESPACE
    ├── R
    │   ├── mod_scatter_display.R
    │   ├── mod_var_input.R
    │   └── utils.R
    ├── README.md
    ├── app.R
    ├── man
    ├── movies.RData
    ├── moviesApp.Rproj
    └── www
        └── shiny.png
    
    4 directories, 10 files
  \`\`\`
  
The `rsconnect/` folder has been removed because we'll cover deploying `moviesApp` in future sections. 
  
"
  
)
```

A preview of the topics covered in the following chapters is provided below.  

### Documentation (Chapter 5)

@sec-doc covers documenting your app-package code in the `R/` folder:

-   `roxygen2` basics:
    -   Required tags:   
        -   `@title`, `@description`, `@details`, `@param`, `@return`, and `@examples`  
    -   App-package tags for modules and standalone app functions:    
        -   `@seealso`, `@family`, and `@section`

### Dependencies (Chapter 6)

@sec-depends dives into dependencies. We'll cover how to export functions and objects from your app-packages for others to use, and how to handle functions from add-on (i.e., external) packages.

-   Exporting functions from your package namespace   
    -   `@export`/`export()`     
-   Importing functions from add-on packages into your package namespace  
    -   `@import`/`import()`, `@importFrom`/`importFrom()`   
-   The `Imports` field in the `DESCRIPTION`   
    -   `usethis::use_package()`

### Data (Chapter 7)

[Data](data.qmd) covers how to include datasets in your app-package namespace, and the various kinds of data in R packages. 

-   Documenting data with 
    -   `roxygen2`: `@format`, `\describe`, `\item`    
-   Location of data files: `data/` vs. `data-raw/` vs. `inst/extdata/`

### Launch (Chapter 8)

The [Launch](launch.qmd) chapter covers how to 1) run your application during development, how to run your app using a standalone app function, and 3) how to deploy your application to shinyapps.io.

-   What goes in `app.R`? 
    -   `shinyApp()` vs. `shinyAppDir()` vs. `runApp()`   
    -   `rsconnect::deployApp()`

### External files (Chapter 9)

The @sec-inst covers how to include external resources (i.e. the images, CSS, html, or other files that are typically included in the `www/` folder and served when you run your Shiny app). This chapter also covers other uses for the `isnt/` folder in app-packages.

-   `www/` vs. `inst/` 

-   `system.file()`

-   `addResourcePath()`