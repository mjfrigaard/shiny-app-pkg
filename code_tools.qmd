# Code tools {.unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r",
  header = "ALERT!",
  contents = "This section is currently under development. Thank you for your patience."
)
```

> "*We're in the business of keystrokes and neurons*"

While developing, it's hard to keep your code format looking clean and perfect. Fortunately, the R ecosystem has some excellent tools for keeping your code formatted and easy to read.

## `styler` & `lintr`

The `styler` and `lintr` packages in R serve related but distinct purposes and have different focuses in their functionality. The primary difference between `lintr` and `styler` is that `styler` can automatically fix any stylistic issues it identifies in your code (rather than just reporting them). 

`lintr`: `lintr` is a static code analysis tool used to identify syntax errors, semantic issues, and violations of stylistic guidelines in your code. The package contains a list of 'linters' for various potential problems and can be customized according to your needs. lintr is designed to help improve your code's quality and readability by generating reports in the 'markers' pane. Running `lintr` won't automatically correct the identified issues (you'll need to fix the linting issues it reports manually). 

`styler`: On the other hand, the purpose of `styler` is to ensure consistency in the code formatting, which is crucial if you're working in a team or contributing to open-source projects (like `tidyverse` packages). The `styler` package will change your code's format according to specified style guidelines. These changes include indentation, spaces, and line breaks that adhere to your style guidelines. 

While there is some overlap (both packages can help enforce coding style guidelines), `lintr` is a more general tool for code quality, spotting potential issues and bugs. At the same time, `styler` focuses on code formatting and can automatically apply fixes. Many developers find combining both can help catch potential issues and ensure a consistent, readable coding style.


## `sinew`

The `sinew` package also warrants mentioning because it can help ensure you're namespacing functions from add-on packages.


end `code_tools.qmd`