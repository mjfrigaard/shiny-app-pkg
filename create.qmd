# Appendix: Creating packages in Posit Workbench {.unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

["Can the `.Rproj` file convert an R]{style="font-size: 1.15em; font-weight: bold; font-style: italic; color: #696969;"} [project]{style="font-size: 1.15em; font-weight: bold; font-style: italic; color: #137a7f;"} [into an R ]{style="font-size: 1.15em; font-weight: bold; font-style: italic; color: #696969;"} [package]{style="font-size: 1.15em; font-weight: bold; font-style: italic; color: #940000;"}[?"]{style="font-size: 1.15em; font-weight: bold; font-style: italic; color: #696969;"}

The technical answer is no, because the `.Rproj` only activates the **Build** pane in the IDE. The tools in the **Build** pane are directly connected to the [`devtools` package](https://devtools.r-lib.org/) (hence the `PackageUseDevtools: Yes` in the `.Rproj` file). 

For example, if the mandatory fields are added to the `DESCRIPTION`, but the `.Rproj` file doesn't have any of the package configuration fields, then the **Build** pane will not be displayed:

::: {#fig-build_pane_tools}

![Build pane tools](img/shiny_app_pkg_ide_desc_no_build.png){#fig-build_pane_tools height="100%" width="100%" fig-align="center"}
Mandatory `DESCRIPTION` fields with package configuration in `.Rproj` file
:::


Conversely, changing the **Project build tools** to **Package** will add the package development fields in the `.Rproj` file without having the mandatory fields in the `DESCRIPTION` will trigger the **Build** pane:

:::: {.column-page-inset-right}

::: {#fig-shiny_app_ide_desc}
![`DESCRIPTION`](img/shiny_app_ide_desc.png){#fig-shiny_app_ide_desc width="100%" fig-align="center"}


Unchanged `DESCRIPTION` file after changing `projApp.Rproj`
:::

::::

However, if we install `devtools` and try to load the code in the `R/` folder with **Build** > **Load All**, we will get the following error: 

```{r}
#| eval: false
#| code-fold: false
install.packages("devtools")
library(devtools)
devtools::load_all()
```


::: {#fig-load_all_error}
![Build pane tools](img/load_all_error.png){#fig-load_all_error height="100%" width="100%" fig-align="center"}

Attempt to `load_all()` code in `R/` folder
:::

The image above demonstrates why setting the **Project build tools** in your **Project Options** is insufficient to convert a project into a package. The directory must include a `DESCRIPTION` file containing the mandatory fields *and* an `.Rproj` file with the package configuration fields listed above to be a functional R package.


Read more about `DESCRIPTION` file fields in [R Packages, 2ed](https://r-pkgs.org/description.html#the-description-file)

```{r}
#| label: co_box_rproj
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g",
  header = "RStudio project files",
  contents = "
You can read more about the benefits of using RStudio projects to configuring project-level options [here](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects).  
  ", fold = FALSE
)
```

### Terminate

To get the IDE to re-read the `.Rproj` file, you can terminate the session (**Session** > **Terminate R...** > **Yes**)

::: {#fig-terminate layout-ncol=2}

![Session > Terminate](img/terminate_session.png){#fig-terminate_session width=50%}

![Click Yes](img/terminate_yes.png){#fig-terminate_yes width=50%}

Terminate your R session
:::

## Creating app-packages: scenarios

The callout blocks below represent scenarios I've encountered requiring an [app-package]{style="font-weight: bold; color: #940000"}:

### Scenario #1

```{r}
#| label: co_shiny_cond_new
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  header = "**Scenario #1**: Create a new shiny [app-package]{style='font-weight: bold; color: #940000'}",
  contents = "

*You're in the 'brainstorming' stages of app development, and no code (or very little code) has been written. Maybe you’ve investigated using a framework (like `golem` or `rhino`) but can’t decide if their features will fit your needs.*
  
  ", fold = FALSE, look = "minimal"
)
```

In this case, you're in the perfect position to create a new package with `usethis::create_package()` or `devtools::create()`. If you're using Posit Workbench, do **File** > **New Project** > **New Directory** > **R Package**.

### Scenario #2

```{r}
#| label: co_shiny_cond_working
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  header = "**Scenario #2**: Convert a working app [project]{style='font-weight: bold; color: #137a7f'} into an [app-package]{style='font-weight: bold; color: #940000'}",
  contents = "
  
*The app is currently deployed and is being accessed by users, but the underlying code lives in the 'root' folder (i.e., an `app.R` or `ui.R` and `server.R`, `global.R`, `helper.R`, and/or other `.R` files, data, static resources, etc.). The application works, but you'd like to convert it to a package structure without breaking it.*
  
  ", fold = FALSE, look = "minimal"
)
```

This is a circumstance where I'd manually create the `DESCRIPTION` file (or use `usethis::use_description()`) and set the package-level build tools (**Tools** > **Project options** > **Build Tools** > **Project build tools**). Then I'd begin organizing the shiny app files into a package structure (i.e., move `.R` files into the `R/` folder, data files into the `data/` folder, etc.)

### Scenario #3

```{r}
#| label: co_shiny_cond_legacy
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  header = "**Scenario #3**: Convert a legacy app [project]{style='font-weight: bold; color: #137a7f'} into a shiny [app-package]{style='font-weight: bold; color: #940000'}",
  contents = "
  
*The app was written some time ago, used superseded or deprecated functions (i.e., `callModule()`), and needs updating. Updating the apps might include adding data or static resources, writing utility functions and modules, etc.* 
  
  *The critical distinction is that this application is not working and requires updates.*
  
  ", fold = FALSE, look = "minimal"
)
```

### Scenario #4

```{r}
#| label: co_shiny_cond_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  header = "**Scenario #4**: Convert your 'dev' app [project]{style='color: #137a7f'} into an [app-package]{style='color: #940000'}",
  contents = "
  
*You’re currently developing an app project, and you read somewhere it should be an app-package; however, you can’t find clear instructions on how to accomplish this incrementally.*

*And maybe you’re a minimalist (like me) who likes to have complete control over every aspect of the development process.*
  ", fold = FALSE, look = "minimal"
)
```





