# Creating packages in Posit Workbench 

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

["Can the `.Rproj` file convert an R]{style="font-size: 1.15em; font-weight: bold; font-style: italic; color: #696969;"} [project]{style="font-size: 1.15em; font-weight: bold; font-style: italic; color: #137a7f;"} [into an R ]{style="font-size: 1.15em; font-weight: bold; font-style: italic; color: #696969;"} [package]{style="font-size: 1.15em; font-weight: bold; font-style: italic; color: #940000;"}[?"]{style="font-size: 1.15em; font-weight: bold; font-style: italic; color: #696969;"}

The technical answer is no, because the `.Rproj` only activates the **Build** pane in the IDE. The tools in the **Build** pane are directly connected to the [`devtools` package](https://devtools.r-lib.org/) (hence the `PackageUseDevtools: Yes` in the `.Rproj` file). 

For example, if the mandatory fields are added to the `DESCRIPTION`, but the `.Rproj` file doesn't have any of the package configuration fields, then the **Build** pane will not be displayed:

::: {#fig-build_pane_tools}

![Build pane tools](img/shiny_app_pkg_ide_desc_no_build.png){#fig-build_pane_tools height="100%" width="100%" fig-align="center"}
Mandatory `DESCRIPTION` fields with package configuration in `.Rproj` file
:::


Conversely, changing the **Project build tools** to **Package** will add the package development fields in the `.Rproj` file without having the mandatory fields in the `DESCRIPTION` will trigger the **Build** pane:

:::: {.column-page-inset-right}

::: {#fig-shiny_app_ide_desc}
![`DESCRIPTION`](img/shiny_app_ide_desc.png){#fig-shiny_app_ide_desc width="100%" fig-align="center"}


Unchanged `DESCRIPTION` file after changing `shinyAppProj.Rproj`
:::

::::

However, if we install `devtools` and try to load the code in the `R/` folder with **Build** > **Load All**, we will get the following error: 

```{r}
#| eval: false
#| code-fold: false
install.packages("devtools")
library(devtools)
devtools::load_all()
```


::: {#fig-load_all_error}
![Build pane tools](img/02_pkgs_load_all_error.png){#fig-load_all_error height="100%" width="100%" fig-align="center"}

Attempt to `load_all()` code in `R/` folder
:::

The image above demonstrates why setting the **Project build tools** in your **Project Options** is insufficient to convert a project into a package. The directory must include a `DESCRIPTION` file containing the mandatory fields *and* an `.Rproj` file with the package configuration fields listed above to be a functional R package.


Read more about `DESCRIPTION` file fields in [R Packages, 2ed](https://r-pkgs.org/description.html#the-description-file)

```{r}
#| label: co_box_rproj
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g",
  header = "RStudio project files",
  contents = "
You can read more about the benefits of using RStudio projects to configuring project-level options [here](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects).  
  ", fold = FALSE
)
```

### Terminate

To get the IDE to re-read the `.Rproj` file, you can terminate the session (**Session** > **Terminate R...** > **Yes**)

::: {#fig-terminate layout-ncol=2}

![Session > Terminate](img/terminate_session.png){#fig-terminate_session width=50%}

![Click Yes](img/terminate_yes.png){#fig-terminate_yes width=50%}

Terminate your R session
:::
