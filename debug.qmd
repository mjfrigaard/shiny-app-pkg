# Debug {.unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
library(shinypak)
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r", 
  header = "Warning",
  contents = "The contents in this section are under development. Thank you for your patience."
)
```

Expand the callout boxes below to review what we've covered in the last section:

::: {.callout-note collapse='true'}

## [Documentation (Chapter 5)]{style='font-size: 1.35em;'}

In the [Documentation](document.qmd) chapter we covered: 

- @sec-intro-roxygen2  
  - @sec-roxygen2-md-support
  - @sec-roxygen2-title
  - @sec-roxygen2-param-return  
  - @sec-roxygen2-examples 
  
- @sec-document-app-functions  
  - @sec-roxygen2-family 
  - @sec-roxygen2-section 
  - @sec-roxygen2-usage

:::

::: {.callout-note collapse='true'}

## [Dependencies (Chapter 6)]{style='font-size: 1.35em;'}

In [Dependencies](dependencies.qmd), we walked through:

- @sec-depends-exports  
- @sec-depends-imports  

:::

::: {.callout-note collapse='true'}

## [Data (Chapter 7)]{style='font-size: 1.35em;'}

[Data](data.qmd) covered three common locations for storing and documenting data in R packages: 

- @sec-data-data  
  - @sec-document-data

- @sec-data-data-raw  
- @sec-data-inst-extdata  

:::

::: {.callout-note collapse='true'}

## [Launch (Chapter 8)]{style='font-size: 1.35em;'}

[Launch](launch.qmd) describes the differences between Shiny run functions and what to include in the app.R file and standalone app function:

- App functions: 
  - @sec-launch-shiny-app
  - @sec-launch-run-app
  - @sec-launch-shiny-app-dir

- @sec-launch-app-dot-r
  - @sec-launch-standalone-app-function

:::

::: {.callout-note collapse='true'}

## [Resources (Chapter 9)]{style='font-size: 1.35em;'}

[Resources](resources.qmd) covered how to include external files and/or resources in your app (i.e., those previously stored in `www/`): 

- @sec-resources-image-files
    - @sec-resources-system-file 
    - @sec-resources-add-resource-path 

- Other uses of `inst/`:
    - @sec-resources-inst-dev
    - @sec-resources-inst-quarto
    - @sec-resources-inst-prod

:::

Debugging is the process of identifying, analyzing, and fixing errors in our code.[^debug-define] In Shiny apps, debugging can be challenging because the reactive model involves dynamic interactions and a non-linear flow of execution between inputs, reactive expressions, and outputs. Consider the diagram below that illustrates the reactive flow for the scatter plot graph in our application: 

[^debug-define]: The definition in [this article from AWS](https://aws.amazon.com/what-is/debugging/#:~:text=Debugging) gives a great general overview of debugging. 

```{=html}

<style>

.codeStyle span:not(.nodeLabel) {
  font-family: monospace;
  font-size: 1.5em;
  font-weight: bold;
  color: #9753b8 !important;
  background-color: #f6f6f6;
  padding: 0.2em;
}

</style>
```

```{mermaid}
%%| fig-align: center
%%| fig-cap: 'Debugging'
%%{init: {'theme': 'base', 'themeVariables': { 'fontFamily': 'monospace', 'primaryColor': '#33a02c', 'edgeLabelBackground':'#02577A'}}}%%
flowchart
    subgraph Inputs["Inputs"]
        A1["Variables 
		   & Aesthetics"]
    end
    subgraph React["Reactives"]
        R1["<code>var_inputs()</code>"]
        R2["<code>inputs()</code>"]
    end
    subgraph Output["Output"]
        O1[Graph]
    end
    Inputs --> React
    R1 --> R2
    React --> Output

    style Inputs fill:#FFFFFF,color:#000000,stroke:#333,stroke-width:1px,rx:10,ry:10
    style A1 fill:#4CBB9D,color:#FFFFFF,rx:5,ry:5
    style React fill:#FFFFFF,color:#000000,stroke:#333,stroke-width:1px,rx:5,ry:5
    style R1 fill:#4CBB9D,color:#FFFFFF,rx:5,ry:5
    style R2 fill:#4CBB9D,color:#FFFFFF,rx:5,ry:5
    style Output fill:#FFFFFF,color:#000000,stroke:#333,stroke-width:1px,rx:5,ry:5
    style O1 fill:#4CBB9D,color:#FFFFFF,rx:5,ry:5
```

 
The inputs are collected by the variable input module[^mod_var_input] (as `var_inputs()`) and passed to the scatter display module[^mod_scatter_display], where they become the `inputs()` for our graph utility function.[^scatter_plot]

[^mod_var_input]: Our variable input model is in `R/mod_var_input.R`.

[^mod_scatter_display]: The graph display module is in `R/mod_scatter_display.R`.

[^scatter_plot]: The graph utility function is in `R/scatter_plot.R`

![](images/debug_positron_launch_app.png){width='100%' fig-align='center'}

:::{.column-margin}

Our application launches with pre-selected values for the `x`, `y` and `color` graph inputs, along with values for the size and opacity (alpha) of the points. 

:::

Users can change the graph inputs or add a title, but by having pre-selected values, we guarantee the graph renders when the application launches.

![*The new title is passed with `var_inputs()` to `inputs()` and updates the graph to display the text.*](images/debug_positron_update_launch_app.png){width='100%' fig-align='center'}

```{=html}

<style>

.codeStyle span:not(.nodeLabel) {
  font-family: monospace;
  font-size: 1.5em;
  font-weight: bold;
  color: #9753b8 !important;
  background-color: #f6f6f6;
  padding: 0.2em;
}

</style>
```

```{mermaid}
%%| label: function_exec_browser
%%| fig-align: center
%%| fig-cap: '*Updating the plot title*'
%%{init: {'theme': 'base', 'themeVariables': { 'fontFamily': 'monospace'}}}%%
flowchart TD
    subgraph Inputs["Inputs"]
        VarInput[Variables/aesthetics]
        TitleInput["'new plot title'"]
        
    end
    subgraph React["Reactives"]
        R1["<code>var_inputs()</code> "]
        R2["<code>inputs()</code>"]
        R3["Updates <code>var_inputs</code>"]
        R4["Adds title 
            with <code>labs()</code>"]
    end
    subgraph Output["Output"]
        O1[Graph]
    end
    VarInput --> R1
    TitleInput <--> R3
    R1 --> R2
    R2 <--> R4
    R3 <--> R2
    R2 --> O1
    R4 <--> O1


    style Inputs fill:#FFFFFF,stroke:#333,stroke-width:1px,rx:5,ry:5
    style React fill:#FFFFFF,stroke:#333,stroke-width:1px,rx:5,ry:5
    style Output fill:#FFFFFF,stroke:#333,stroke-width:1px,rx:5,ry:5
    style VarInput fill:#4CBB9D
    style TitleInput fill:#4CB7DB
    style R1 fill:#4CBB9D
    style R2 fill:#4CB7DB
    style R3 fill:#4CB7DB
    style R4 fill:#4CB7DB
    style O1 fill:#4CB7DB
```



Shiny is inherently asynchronous, so bugs can originate from reactive dependencies, execution order, utility functions, hidden states, lazy evaluation, and invalidation (i.e., `reactive()`, `observe()`, `isolate()`, etc.).

For example, we could have an incorrectly defined `inputId`s or `outputId`s in the UI, which causes our graph utility function to fail. We could also have missing parentheses on reactive values in the server. Finally, the bug could be originating from the output/render point.


```{=html}

<style>

.codeStyle span:not(.nodeLabel) {
  font-family: monospace;
  font-size: 1.5em;
  font-weight: bold;
  color: #9753b8 !important;
  background-color: #f6f6f6;
  padding: 0.2em;
}

</style>
```

```{mermaid}
%%| label: bugs_reactive
%%| fig-align: center
%%| fig-cap: '*Possible locations of bugs in a reactive model*'
%%{init: {'theme': 'base', 'themeVariables': { 'fontFamily': 'monospace'}}}%%
flowchart 
    subgraph Inputs["Inputs"]
        InputsVars["Variables & 
                   aesthetics"]
        InputsTitle[" 'New plot title' "]
        
    end
    
    subgraph React["Reactives"]
        ReactVarInput["<code>var_inputs()</code>"]
        ReactInput["<code>inputs()</code>"]
        ReactUpdateVarInput["Update
                             <code>var_inputs()</code>"]
        ReactLabsTitle["Adds title 
                        with <code>labs()</code>"]
        BugIds["Incorrect <code>inputId</code> or <code>outputId</code>"]
        BugObsListen["<code>observe()</code> 
                      listener error"]
        BugPlotFun["<code>scatter_plot()</code> 
                    bug"]
        
    end
    
    subgraph Output["Output"]
        OutputGraph[Graph]
        BugRenderFuns["<code>render_*</code> 
                       function 
                       error"]
    end


    InputsVars --> ReactVarInput
    Inputs --> BugIds <--> ReactVarInput 
    Inputs --> BugIds <--> ReactUpdateVarInput
    InputsTitle <--> ReactUpdateVarInput

    ReactVarInput --> ReactInput 
    ReactUpdateVarInput <--> BugObsListen
    BugObsListen <--> ReactInput
    ReactInput <--> BugPlotFun <--> ReactLabsTitle

    ReactLabsTitle <--> BugRenderFuns <--> OutputGraph


    style Inputs fill:#FFFFFF,stroke:#333,stroke-width:1px,rx:10,ry:10
    style React fill:#FFFFFF,stroke:#333,stroke-width:1px,rx:10,ry:10
    style Output fill:#FFFFFF,stroke:#333,stroke-width:1px,rx:10,ry:10
    
    style InputsVars fill:#4CBB9D,rx:5,ry:5
    style InputsTitle fill:#4CB7DB,rx:5,ry:5

    style ReactVarInput fill:#4CBB9D
    style ReactInput fill:#4CB7DB
    style ReactUpdateVarInput fill:#4CB7DB
    style ReactLabsTitle fill:#4CB7DB
    
    style BugIds fill:#FFFFFF,color:#931314,stroke:#931314,stroke-width:2px,rx:10,ry:10
    style BugPlotFun fill:#FFFFFF,color:#931314,stroke:#931314,stroke-width:2px,rx:10,ry:10
    style BugObsListen fill:#FFFFFF,color:#931314,stroke:#931314,stroke-width:2px,rx:10,ry:10
    style BugRenderFuns fill:#FFFFFF,color:#931314,stroke:#931314,stroke-width:2px,rx:10,ry:10

    style OutputGraph fill:#4CBB9D
```


```{bash}
#| include: false 
#| eval: false
# flowchart TD
#     subgraph Inputs["Inputs"]
#         A1[Variables/aesthetics]
#         A2["'graph title'"]
#     end
#     subgraph React["Reactives"]
#         B1("ðŸª² <code>input$</code> ðŸª²")
#         R1["Update <code>var_inputs()</code>"]
#         B2("ðŸª² <code>scatter_plot()</code> ðŸª² ")
#         R2["<code>inputs()</code>"]
#         B3("ðŸª²  Parentheses ðŸª²")
#         R3["Add title with <code>labs()</code>"]
#     end
#     subgraph Output["Output"]
#         O1["Graph"]
#         B4("ðŸª² <code>render*()</code> ðŸª²")
#     end
#     A1 --> B1 
#     B1 --> R2
#     A2 <--> R1
#     R1 <--> R2
#     R2 --> B2 & B3
#     B2 <--> R3
#     R3 <--> B4
#     B3 <--> B4
#     B4 <--> O1
#     
#     style Inputs fill:#FFFFFF,stroke:#333,stroke-width:1px,rx:5,ry:5
#     style React fill:#FFFFFF,stroke:#333,stroke-width:1px,rx:5,ry:5
#     style Output fill:#FFFFFF,stroke:#333,stroke-width:1px,rx:5,ry:5
#     style A1 fill:#4CBB9D
#     style R1 fill:#4CBB9D
#     style R2 fill:#4CBB9D
#     style A2 fill:#4CB7DB
#     style R3 fill:#4CB7DB
#     style B1 fill:#FFFFFF,color:#FFFFFF,stroke:#931314,stroke-width:3px,rx:10,ry:10
#     style B2 fill:#FFFFFF,color:#FFFFFF,stroke:#931314,stroke-width:3px,rx:10,ry:10
#     style B3 fill:#FFFFFF,color:#931314,stroke:#931314,stroke-width:3px,rx:10,ry:10
#     style B4 fill:#FFFFFF,color:#FFFFFF,stroke:#931314,stroke-width:3px,rx:10,ry:10
#     style O1 fill:#4CBB9D
```


 
Understanding the interplay of reactivity, lazy evaluation, asynchronous execution, and hidden states will help us diagnose and resolve bugs in our Shiny app-packages. We have to employ specific strategies and tools to handle Shiny bugs effectively, and some of the traditional debugging approaches can fall short in reactive contexts. The chapters in this section will cover how to adapt common methods for debugging R code to use with our Shiny application.

