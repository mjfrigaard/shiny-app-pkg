# Interactive debugging {#sec-debug-funs}

```{r}
#| label: _common
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
library(lobstr)
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r", 
  header = "Warning",
  contents = "The contents for section are under development. Thank you for your patience."
)
```

## Debugging methods {#sec-debug-explore-methods}

Debugging allows us to ‘peek inside’ functions, see intermediate values/variables, and break down their execution line-by-line. The two most common methods for debugging R code are:

1. Interactive debugging (i.e., using `browser()` or setting a breakpoint)

2. Print debugging (with `print()` or `cat()`)

However, these methods are not as straightforward to use within reactive contexts. For instance, `browser()` can disrupt the reactive flow, making maintaining an interactive debugging session challenging. Similarly, `print()` and `cat()` can only provide a snapshot of variable values *at the location and time of the print call*, limiting their usefulness in exploring the other parts of the environment or interacting with the running application.

In the following sections, I’ll provide examples of how these methods can be adapted to a Shiny context.


:::: {.callout-tip collapse='true' appearance='default'}

## [Accessing applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

I've created the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/) In an effort to make each section accessible and easy to follow:
  
Install `shinypak` using `pak` (or `remotes`):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
```

Review the chapters in each section:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
library(shinypak)
list_apps(regex = 'debug')
```

Launch the app: 

```{r}
#| code-fold: false 
#| eval: false
launch(app = "23.1_debug-error")
```

Download the app: 

```{r}
#| code-fold: false 
#| eval: false
get_app(app = "23.1_debug-error")
```

::: 

::::


### [`browser()`]{style="font-size: 1.02em; font-weight: bold;"} + [`observe()`]{style="font-size: 1.02em; font-weight: bold;"}

As noted above, `browser()` pauses code execution and activates the interactive debugger mode, allowing us to view objects, execute code, and ‘step through’ a function line-by-line:

```{=html}

<style>

.codeStyle span:not(.nodeLabel) {
  font-family: monospace;
  font-size: 1.5em;
  font-weight: bold;
  color: #9753b8 !important;
  background-color: #f6f6f6;
  padding: 0.2em;
}

</style>
```

```{mermaid}
%%| label: function_exec_browser
%%| fig-width: 5
%%| fig-height: 6
%%| fig-align: center
%%| fig-cap: 'debugging functions with `browser()`'
%%{init: {'theme': 'base', 'themeVariables': { 'fontFamily': 'Inconsolata', 'primaryColor': '#8dd38d', 'edgeLabelBackground':'#ffd700'}}}%%
flowchart TD
    Start["Run <code>.R</code> File"] --> Running[Function Executes]
    Running --> Browser["<code>browser()</code>"]
    Browser --> Pause[Execution paused]
    Pause --> Debugger[View intermediate variables/values]
    Debugger --> Exit["Exit <code>browser()</code>"]
    Exit --> Resume[Resume Execution]
    Resume --> Running
    
```

<!--
Within the server, any call to `observe()` will create a reactive observer that 'listens' for changes to reactive dependencies (and runs any enclosed code whenever those dependencies change). 
-->

For debugging Shiny apps, we want to pause execution without altering or stopping the reactive flow. Fortunately, Shiny already has a function that performs this: `observe()`.

Consider the following `observeApp()`: 

```{r}
#| eval: false 
#| code-fold: false
observeApp <- function() {
  ui <- bslib::page_fluid(
    titlePanel(p("Simple", code("observe()"), "Shiny App")),
    bslib::layout_column_wrap(
      width = 1/2,
      bslib::card(
        bslib::card_header("Press the Button"),
        actionButton(
          inputId = "btn", 
          label = "Click Me!")
      )
    )
  )
  server <- function(input, output, session) {
    observe({
      if (input$btn > 0) {  
        print("Clicked!")  
      }
    })
  }
  shinyApp(ui, server)
}
```

In the `server`, the `observe()` function listens to the button click, checks if the button has been clicked at least once, and when the click event is detected, it prints `"Clicked!"` to the R console:

:::{layout="[50, 50]" layout-valign="top"}

![](images/debug_explore_positron_observeApp_viewer.png){fig-align='center'}

![](images/debug_explore_positron_observeApp_console.png){fig-align='center'}

:::

`observe()` does not inherently pause or interrupt other reactive processes—it just triggers when changes occur within its scope.

While debugging, we need to define the context (or scope) for `browser()`'s behavior. When `browser()` is called from inside `observe()`, the code execution pauses at that point and temporarily suspends the reactive process so we can inspect the environment.

```{r}
#| eval: false 
#| code-fold: false
  server <- function(input, output, session) { # <1>
    observe({ # <2>
      browser() # <3>
      if (input$btn > 0) {  
        print("Clicked!")  
      }
    }) # <2>
  } # <1>
```
1. Shiny server function
2. `observe()` function scope  
3. `browser()` called at the top of the `observe()` scope

Below is a diagram of how `browser()` works inside the `observe()`d scope (without altering or stopping the reactive flow):

```{=html}

<style>

.codeStyle span:not(.nodeLabel) {
  font-family: monospace;
  font-size: 1.5em;
  font-weight: bold;
  color: #9753b8 !important;
  background-color: #f6f6f6;
  padding: 0.2em;
}

</style>
```

```{mermaid}
%%| label: function_observe_browser
%%| fig-width: 5.0
%%| fig-align: center
%%| fig-cap: '`observe()` and `browser()` functions'
%%{init: {'theme': 'base', 'themeVariables': { 'fontFamily': 'Inconsolata', 'primaryColor': '#8dd38d', 'edgeLabelBackground':'#ffd700'}}}%%
flowchart TD
    subgraph shinyServer["Shiny <code>server()</code> Function"]
        S1["<code>observe({...</code>"]
        S1 --> S2["<code>browser()</code> invalidates observer"]
        S2 --> S3["<code>observe()</code> scope execution paused"]
        S3 --> S4["View variables/reactives"]
        S4 --> S5["Exit <code>browser()</code>"]
        S5 --> S6["<code>...})</code> (end of <code>observe</code> scope)"]
        S6 --> S1
    end
    
    style shinyServer fill:#fafafa,stroke:#333,stroke-width:1px
```


```{r}
#| label: co_box_observe_browser
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g",
  look = "default", hsize = "1.10", size = "1.05",
  header = "`observe()` and `browser()`",
  fold = FALSE,
  contents = "
Wrapping `browser()` with `observe()` will trigger the debugger when the observer is invalidated, allowing us to interactively examine variables and reactive expressions (within the scope of the `observe()` function).
")
```

`observe()` and `browser()` are useful for addressing bugs; we can also use the debugger to understand how an application works.

## Example: [`ggplot2movies`]{style="font-size: 1.02em; font-weight: bold;"} app

```{r}
#| label: git_box_10_debug-explore
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "launch",
  fig_pw = '65%', 
  branch = "10_debug-explore", 
  repo = 'sap')
```

Suppose it's been awhile since we've looked at our development `ggplot2movies` application,[^ggp2-callback] and we can't remember how the 'Remove missing' checkbox works:

![Remove missing checkbox in `ggplot2movies` development application ](images/debug_explore_remove_missing_checkbox.png){width='80%' fig-align='center'}

We'll place debugging functions in the module containing this input, load the changes, and launch the application to refresh our memory on how this code is evaluated. Debugging in RStudio is covered elsewhere,[^debug-other-resources] so this chapter will focus on Positron's debugging features.

[^debug-other-resources]: For an introduction to the IDE's debugging tools, see this [Posit article](https://support.posit.co/hc/en-us/articles/205612627-Debugging-with-the-RStudio-IDE). Debugging is also covered in [Advanced R, 2ed](https://adv-r.hadley.nz/debugging.html) and [Mastering Shiny.](https://mastering-shiny.org/action-workflow.html#debugging)

[^ggp2-callback]: We covered the `ggplot2movies` application in @sec-external-inst-dev.

```{r}
#| label: co_box_positron_version
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", 
  look = "simple", 
  hsize = "1.10", 
  size = "1.05",
  header = "![](images/positron.png){height=20} Positron Version", 
  fold = TRUE,
  contents = "At the time of this writing, the [2024.09.0-1](https://github.com/posit-dev/positron/releases/tag/2024.09.0-1) pre-release of Positron was available for testing."
)
```

We'll place the call to  `observe()` inside `dev_mod_scatter_server()` (right after the `moduleServer()` function), and then place `browser()` just before the alternate dataset is loaded:

```{r}
#| eval: false 
#| code-fold: false 
dev_mod_scatter_server <- function(id, var_inputs) {
  moduleServer(id, function(input, output, session) {
    observe({ # <1>
      browser() # <2>
      # load alternate data
      all_data <- fst::read_fst("tidy_movies.fst") # <3>

      # build reactive data based on missing checkbox input
      graph_data <- reactive({ # <4>
        if (input$missing) {
          tidyr::drop_na(data = all_data)
        } else {
          all_data
        }
      }) |>
        # bind to input to update when it changes
        bindEvent(input$missing) # <4>

      inputs <- reactive({ # <5>
        plot_title <- tools::toTitleCase(var_inputs()$plot_title)
        list(
          x = var_inputs()$x,
          y = var_inputs()$y,
          z = var_inputs()$z,
          alpha = var_inputs()$alpha,
          size = var_inputs()$size,
          plot_title = plot_title
        )
      }) # <5>
      
    })  # <1>
    
    # <6>
    
  })
}
```
1. Observer scope   
2. Call to `browser()` (execution paused) 
3. Read `tidy_movies.fst` data  
4. Missing data checkbox logic  
5. Reactive values from user inputs  
6. Omitted module code

You might wonder why we didn’t end the `observe()` scope right after the`graph_data` reactive was created. We’ll cover that in the next section.
Load the package and run the app:

Load the package and run the app:

```{r}
#| label: hot_key_ggp2_movies_app
#| echo: false
#| results: asis
#| eval: true
hot_key(fun = "L")
```

```{verbatim}
#| eval: false 
#| code-fold: false
ℹ Loading sap
```

```{r}
#| label: co_box_dbug_modules
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r", 
  size = '1.05', 
  header = "Loading code changes", 
  hsize = '1.15', 
  fold = TRUE, 
  look = 'simple',
  contents = "
  
***Don't forget to load any debugging calls with `devtools::load_all()` _before_ re-launching the app*** 
  
\`\`\`r
devtools::load_all('.')
`\`\`\

***Or***
  
<kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>

  "
)
```

```{r}
#| eval: false 
#| code-fold: false
ggp2_launch_app(options = list(test.mode = TRUE))
```

## Interactive debugging

Below, we'll cover what happens to each IDE when they enter 'interactive debugger' mode. As noted above, RStudio's ![](images/rstudio-icon.png){height=20} debugger is covered elsewhere,[^debug-other-resources] so we'll focus on debugging tools in Positron ![](images/positron.png){height=20}. 

### IDE changes

:::: {.panel-tabset}

### Positron ![](images/positron.png){height=20}

When the app is launched, Positron ![](images/positron.png){height=20} alerts us that we're in debugging with the following changes to the IDE: 

1. The **Console** displays the interactive debugger prompt: [`Browse[1]>`]{style="font-weight: bold;"}

2. The `dev_mod_scatter.R` file in the **Editor** [highlights the call to `browser()` in yellow]{style="background-color: #FAFFC1; font-weight: bold;"}

3. The **Run and Debug** sidebar menu item is displayed (which I've [outlined in orange]{style="color: #FF9300; font-weight: bold;"}):

4. The footer is [highlighted in red]{style="background-color: #F78F8F; font-weight: bold;"}

:::{.column-page-inset-right}

![Click to enlarge Positron IDE in debugger mode](images/debug_explore_positron_all.png){width='100%' fig-align='center'}

:::

The changes to the **Console** and **Editor** are also displayed below:

:::{layout="[50, 50]" layout-valign="top"}

![Click to enlarge Positron **Console** in debugger mode](images/debug_explore_positron_console.png){fig-align='center'}

![Click to enlarge Positron **Editor** in debugger mode](images/debug_explore_positron_editor.png){fig-align='center'}


:::

### RStudio ![](images/rstudio-icon.png){height=20}

In RStudio ![](images/rstudio-icon.png){height=20}, launching the apps triggers the interactive debugger and we see the following changes in the IDE: 

1. The **Console** displays the interactive debugger prompt ([`Browse[1]>`]{style="font-weight: bold;"})

2. The `dev_mod_scatter.R` file [highlights the `browser()` call]{style="background-color: #FFF399; font-weight: bold;"}. 

3. In the **Environment** pane, we can see the *Traceback* section [highlights the execution of our call to `shiny::observe()`.]{style="background-color: #FFF399; font-weight: bold;"}

:::{.column-page-inset-right}

![Click to enlarge debugging `dev_mod_scatter_server()`in RStudio](images/debug_explore_rstudio_all.png){width='100%'}

:::

The changes to the **Console** and **Source** panes are also displayed below:

:::{layout="[50, 50]" layout-valign="top"}

![Click to enlarge RStudio **Console** pane in debugger mode](images/debug_explore_rstudio_console.png){fig-align='center'}

![Click to enlarge RStudio **Source** pane in debugger mode](images/debug_explore_rstudio_source.png){fig-align='center'}

:::

::::

In both IDEs, our `observe()` and `browser()` placement will suspend the execution of the application before the data are loaded (`tidy_movies.fst`) and the graph is rendered. 

![Click to enlarge suspended `ggplot2movies` data app](images/debug_explore_browser_suspend_app.png){width='80%' fig-align='center'}

In the next sections, we'll 'step through' the module function to explore how the `tidy_movies.fst` data are loaded (and missing values are removed). 

## Variables and values

We’ll proceed through the code in `dev_mod_scatter.R` until `tidy_movies.fst` is loaded, and the data object enters the logic for the missing checkbox, then we’ll confirm its structure.

:::{.column-margin}

Step through/execute each line of code by entering **`n`** in the **Console**. 

:::{style="font-weight: bold;"}

```
Browse[1]> n
```

:::

:::

:::: {.panel-tabset}

### Positron ![](images/positron.png){height=20}

As we step through the function, Positron's ![](images/positron.png){height=20} **Console** displays the `debug at` location, followed by the code line number: 

![Click to enlarge full path and line number to the file containing our call to `browser()`](images/debug_explore_positron_step.png){width='100%' fig-align='center'}

In the **Editor**, the same line of code is [highlighted in yellow]{style="background-color: #FAFFC1; font-weight: bold;"}:

![Click to enlarge corresponding line number in **Editor**](images/debug_explore_positron_highlight_next_exec.png){width='100%' fig-align='center'}

The line creating `graph_data` gives us a hint for how the missing data are removed (i.e., with `bindEvent()`), but we'll explore this more in [Print debugging](debug_print.qmd).

![The [gray highlighted]{style="background-color: #E6E6E6; font-weight: bold;"} area tells us what will be evaluated next if we enter **`n`** in the **Console** (click to enlarge)](images/debug_explore_positron_reactives.png){width='100%' fig-align='center'}

Under *Locals* in the **DEBUG VARIABLES** sidebar, we can see `all_data` is listed as a `<data.frame>`, and `graph_data` are listed as a `<reactive.event>`:

![Click to enlarge **DEBUG VARIABLES** in sidebar](images/debug_explore_positron_reactive_event.png){width='80%' fig-align='center'}



### RStudio ![](images/rstudio-icon.png){height=20}

In RStudio's ![](images/rstudio-icon.png){height=20} interactive debugger, the **Source** pane [highlights the next line]{style="background-color: #FFF399; font-weight: bold;"} to be evaluated: 

![Click to enlarge the line of code following the call to `browser()` in the **Source** pane](images/debug_explore_rstudio_source_next.png){width='100%' fig-align='center'}

As we step through the function, the **Source** pane continues [highlighting each section of code]{style="background-color: #FFF399; font-weight: bold;"}. 

![Click to enlarge the creation of the reactive `graph_data`](images/debug_explore_rstudio_source_step.png){width='100%' fig-align='center'}

After the data are loaded and the missing logic is executed, both `all_data` and `graph_data` are visible in the **Environment**: 

![Click to enlarge the `all_data` **Data** and the `graph_data`  **Values** (as a function) in the **Environment**](images/debug_explore_rstudio_env_data_values.png){width='100%' fig-align='center'}


::::

### Inspecting variables

We can use the **Console** to evaluate code while the interactive debugger is running. This comes in handy if we want to check the structure of an object inside a module (like `all_data`).

::: {layout="[35, 65]" layout-valign="top"}

```r
Browse[2]> str(all_data)
```

```sh
'data.frame':	46002 obs. of  8 variables: 
 $ title     : chr  "'Til There Was You" ...
 $ length    : int  113 97 98 98 102 120 ...
 $ year      : int  1997 1999 2002 2004 ...
 $ budget    : int  23000000 16000000 ...
 $ avg_rating: num  4.8 6.7 5.6 6.4 6.1 ...
 $ votes     : int  799 19095 181 7859 ...
 $ mpaa      : Factor w/ 5 levels "G","PG" ...
 $ genre     : Factor w/ 8 levels "Action"...
```
    
:::

This gives us an idea of the total rows before missing are removed.

### Inspecting values 

The reactive values and inputs can also be viewed in the **Console**, and we can see `graph_data()` is 'bound' to `input$missing` with `bindEvent()`. We can confirm the `input$missing` value in the **Console**:

::: {layout="[35, 65]" layout-valign="top"}

```r
Browse[2]> input$missing
```

```sh
[1] TRUE
```

:::

This tells us the '*Remove missing*' checkbox has been selected, and we can verify the missing values have been removed from `graph_data()`:

::: {layout="[35, 65]" layout-valign="top"}


```r
Browse[2]> identical(
              nrow(tidyr::drop_na(all_data)), 
              nrow(graph_data())
            )
```

```sh
[1] TRUE
```

:::


Using `browser()` to 'step through' an application gives us a better understanding of the 'order of execution', and it lets us see how `input$missing` and `bindEvent()` work together to remove the missing values with the checkbox. 


---


Let's start by loading the `sap` package and launching the application. 

```{r}
#| label: hot_key_intro
#| echo: false
#| results: asis
#| eval: true
hot_key(fun = "L")
```

```{r}
#| eval: false 
#| code-fold: false
launch_app(test = FALSE)
```

:::{#fig-debug_movies_app_01}

![Error in `launch_app()`](images/debug_movies_app_01.png){#fig-debug_movies_app_01 width='100%' align='center'}

The Error messages in the UI is not always informative
:::

The error printed in the UI is not very descriptive, but fortunately the following output is also printed to the **Console**: 

:::{.column-margin}

`ggplot2` has excellent error messages 👌

:::

```{verbatim}
#| eval: false 
#| code-fold: false
Warning: Error in ggplot2::geom_point: Problem while computing aesthetics.
ℹ Error occurred in the 1st layer.
Caused by error in `.data[[NULL]]`:
! Must subset the data pronoun with a string, not `NULL`.
```

We can see the error is coming from `ggplot2::geom_point()`, specifically from one of the calls to `.data`. We can safely assume the source of this bug is the `scatter_plot()` utility function. However, we'll proceed as if the message wasn't very helpful or informative.

## Debugging utility functions

```{r}
#| label: git_box_25.3_debug-scatter_plot
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "launch",
  fig_pw = '65%', 
  branch = "25.3_debug-scatter_plot", 
  repo = 'sap')
```

If we want to debug the scatter plot output, we need to move our `observe(browser())` functions inside the call to `renderPlot()`:

```{r}
#| eval: false 
#| code-fold: false
output$scatterplot <- renderPlot({
  observe({ # <1>
    browser() # <2>

    
  }) # <1>
})
```
1. Observe scope   
2. Call to `browser()`   

Load the package and run the application again:

```{r}
#| label: hot_key_render_plot
#| echo: false
#| results: asis
#| eval: true
hot_key(fun = "L")
```

```{verbatim}
#| eval: false 
#| code-fold: false
ℹ Loading sap
```

```{r}
#| eval: false 
#| code-fold: false
launch_app(options = list(test.mode = FALSE), run = 'p')
```

Inside `renderPlot()`, we can progress to the creation of the `plot` object:

::: {layout="[35, 65]" layout-valign="top"}

``` r
Browse[1]> n
```

``` sh
debug at sap/R/mod_scatter_display.R#68: 
  plot <- scatter_plot(
    df = movies, 
    x_var = inputs()$x, 
    y_var = inputs()$y, 
    col_var = inputs()$col, 
    alpha_var = inputs()$alpha, 
    size_var = inputs()$size)
```

:::

From here we can step inside the `scatter_plot()` utility function to identify the source of the error:

```{r}
#| eval: false 
#| code-fold: false 
Browse[2]> s
```

:::{#fig-debug_scatter_plot_03}

![Step into `scatter_plot()`](images/debug_scatter_plot_03.png){#fig-debug_scatter_plot_03 width='100%' align='center'}

Use `s` in the debugger console to 'step into' `scatter_plot()`
:::

Note the changes in the debugger console when we 'step into' `scatter_plot()`:

```{bash}
#| eval: false 
#| code-fold: false
debugging in: 
  scatter_plot(df = movies, 
    x_var = inputs()$x, 
    y_var = inputs()$y, 
    col_var = inputs()$col, 
    alpha_var = inputs()$alpha, 
    size_var = inputs()$size)
debug at /sap/R/scatter_plot.R#30: # <1> 
{   
    ggplot2::ggplot(data = df, 
      ggplot2::aes(x = .data[[x_var]], 
                   y = .data[[y_var]], 
                   color = .data[[col_var]])) + 
      ggplot2::geom_point(alpha = alpha_var, 
                          size = size_var)
}
```
1. Location of debugger in utility function  

After some examination, we can identify the source of the error.

```{r}
#| eval: false 
#| code-fold: true
#| code-summary: 'show/hide source of scatter_plot() bug'
inputs <- reactive({
  plot_title <- tools::toTitleCase(var_inputs()$plot_title)
  list(
    x = var_inputs()$x,
    y = var_inputs()$y,
    col = var_inputs()$z, # <1>
    alpha = var_inputs()$alpha,
    size = var_inputs()$size,
    plot_title = plot_title
  )
})
plot <- scatter_plot(
  df = movies,
  x_var = inputs()$x,
  y_var = inputs()$y,
  col_var = inputs()$z, # <2>
  alpha_var = inputs()$alpha,
  size_var = inputs()$size
)
```
1. Color is assigned as **`col`** in `inputs`   
2. Color is passed to `scatter_plot()` as **`col_var`**


## Recap {.unnumbered}

```{r}
#| label: co_box_recap
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g", 
  fold = FALSE,
  look = "default", hsize = "1.10", size = "1.05", 
  header = "Recap: CI/CD!",
  contents = "

`browser()` and `observe()` are powerful tools for debugging your application. Navigating a function using the debugger console gives you control over the execution of each line. If we want to see what's happening 'behind the scenes', we can collect the reactive values and print them in the UI while the app is running. 

The Shiny documentation also has a [list of methods](https://shiny.posit.co/r/articles/improve/debugging/) for debugging apps, and learning how to read call stacks (or a stacktrace) will help you debug your shiny app.[^debug-call-stacks], [^call-stack-shiny]")
```

```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```

[^call-stack-shiny]: Stack traces are also covered in [Advanced R, 2ed](https://adv-r.hadley.nz/debugging.html#traceback), [Mastering Shiny](https://mastering-shiny.org/action-workflow.html#tracebacks-in-shiny), and in the [Shiny documentation](https://github.com/rstudio/shiny/wiki/Stack-traces-in-R). I've summarized some tips on reading Shiny call stacks in the [stack traces](stack_traces.qmd) section on the Appendix.


[^debug-call-stacks]: Watch [this video](https://www.youtube.com/watch?v=g1h-YDWVRLc) to learn about call stacks and abstract folder trees with `lobstr`. 

