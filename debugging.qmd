# Debugging {.unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
library(shinypak)
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r", 
  header = "Warning",
  contents = "The contents for section are under development. Thank you for your patience."
)
```

Expand the callout boxes below to review what we've covered in the last five chapters:

::: {.callout-note collapse='true'}

## [Documentation (Chapter 5)]{style='font-size: 1.35em;'}

In the [Documentation](document.qmd) chapter we covered: 

1. An introduction to the `roxygen2` (@sec-intro-roxygen2) package, and

2. Some tips for documenting app-package functions (@sec-document-app-functions)

:::: {.callout-tip collapse='true' appearance='default'}

### [Chapter 5 Applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 5 (Documentation) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 1 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^05')
```

::: 

::::

:::

::: {.callout-note collapse='true'}

## [Dependencies (Chapter 6)]{style='font-size: 1.35em;'}

In [Dependencies](dependencies.qmd), we walked through:

1. How to give users of our app-package access to it's functions (i.e., exports (@sec-depends-exports)), and

2. What to do with the functions we use from other packages in the `R/` folder (i.e., imports (@sec-depends-imports))

:::: {.callout-tip collapse='true' appearance='default'}

### [Chapter 6 Applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 6 (Dependencies) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 6 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^06')
```

::: 

::::

:::

::: {.callout-note collapse='true'}

## [Data (Chapter 7)]{style='font-size: 1.35em;'}

[Data](data.qmd) covered the three common locations for data in R packages: 

1. `data/` (@sec-data-data), 

2. `data-raw/` (@sec-data-data-raw), and

3. `inst/extdata/` (@sec-data-inst-extdata)

:::: {.callout-tip collapse='true' appearance='default'}

### [Chapter 7 Applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 7 (Data) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 7 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^07')
```

::: 

::::

:::

::: {.callout-note collapse='true'}

## [Launch (Chapter 8)]{style='font-size: 1.35em;'}

[Launch](launch.qmd) described the differences between

1. `shinyApp()` (@sec-launch-shiny-app),

2. `runApp()` (@sec-launch-run-app), and

3. `shinyAppDir()` (@sec-launch-shiny-app-dir)

This chapter also provided some options to include in `app.R` (@sec-launch-app-dot-r) and the standalone app function (@sec-launch-standalone-app-function).

:::: {.callout-tip collapse='true' appearance='default'}

### [Chapter 8 Applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 8 (Launch) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 8 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^08')
```

::: 

::::

:::

::: {.callout-note collapse='true'}

## [External files (Chapter 9)]{style='font-size: 1.35em;'}

[External files](external.qmd) covered how to include external files and/or resources in your app (i.e., those previously stored in `www/`): 

1. Combining `system.file()` (@sec-external-system-file) and `addResourcePath()` (@sec-external-add-resource-path), and  

2. The various uses of the `inst/` folder (@sec-inst)
<br>
    a. Alternative images and layout options (@sec-external-system-file)
<br><br>
    b. Development versions of your application using alternative data and modules (@sec-external-inst-dev)
<br><br>
    c. A production version of your application (@sec-external-inst-prod)

:::: {.callout-tip collapse='true' appearance='default'}

### [Chapter 9 Applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 9 (External files) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 9 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^09')
```

::: 

::::

:::

Debugging Shiny apps can be challenging because the reactive model involves dynamic interactions and a non-linear flow of execution between inputs, outputs, and reactive expressions. 

```{=html}

<style>

.codeStyle span:not(.nodeLabel) {
  font-family: monospace;
  font-size: 1.5em;
  font-weight: bold;
  color: #9753b8 !important;
  background-color: #f6f6f6;
  padding: 0.2em;
}

</style>
```

```{mermaid}
%%| label: function_exec_browser
%%| fig-width: 5
%%| fig-height: 6
%%| fig-align: center
%%| fig-cap: 'Reactive workflow'
%%{init: {'theme': 'base', 'themeVariables': { 'fontFamily': 'Inconsolata', 'primaryColor': '#8dd38d', 'edgeLabelBackground':'#ffd700'}}}%%
flowchart TD
    subgraph Inputs["Inputs"]
        A1[Title]
        A2[Axis/color variables]
    end
    subgraph React["Reactives"]
        R1["Update <code>var_inputs()</code>"]
        R2["<code>var_inputs()</code> -> <code>inputs()</code>"]
        R3["Add title with <code>labs()</code>"]
    end
    subgraph Output["Output"]
        O1[Graph]
    end
    A1 --> R1
    A2 --> R2
    R1 --> R2
    R2 --> R3
    R3 --> O1
    R2 --> O1

    style Inputs fill:#FFFFFF
    style React fill:#FFFFFF
    style Output fill:#FFFFFF
```

Shiny bugs can originate from reactive dependencies, execution order (Shiny is inherently asynchronous), hidden states, lazy evaluation, and reactive context/invalidation (i.e., with `isolate()`,`reactive()`, and `observe()`). Understanding the interplay of reactivity, lazy evaluation, asynchronous execution, and hidden states will help us diagnose and resolve bugs in our Shiny app-packages. 

```{=html}

<style>

.codeStyle span:not(.nodeLabel) {
  font-family: monospace;
  font-size: 1.5em;
  font-weight: bold;
  color: #9753b8 !important;
  background-color: #f6f6f6;
  padding: 0.2em;
}

</style>
```

```{mermaid}
%%| label: bugs_reactive
%%| fig-width: 5
%%| fig-height: 6
%%| fig-align: center
%%| fig-cap: 'Bugs in reactive workflow'
%%{init: {'theme': 'base', 'themeVariables': { 'fontFamily': 'Inconsolata', 'primaryColor': '#8dd38d', 'edgeLabelBackground':'#ffd700'}}}%%
flowchart TD
 subgraph Inputs["Inputs"]
        A1["Title"]
        A2["Axis/color variables"]
  end
 subgraph React["Reactives"]
        R1["Update <code>var_inputs()</code>"]
        R2["<code>var_inputs()</code> -&gt; <code>inputs()</code>"]
        R3["Create title with <code>labs()</code>"]
        B1("ðŸª² Invalid inputs")
        B2("Utility function ðŸª² ")
        B3("ðŸª²  Problems with parentheses")
  end
 subgraph Output["Output"]
        O1["Graph"]
        B4("ðŸª²  Output format")
  end
    A1 --> B1
    B1 --> R1
    A2 --> R2
    R2 --> B2 & B3
    B2 --> R3
    R1 --> R2
    R3 --> B4
    B3 --> B4
    B4 --> O1
    
    style Inputs fill:#FFFFFF
    style React fill:#FFFFFF
    style Output fill:#FFFFFF
    style B1 fill:#D50000,color:#FFFFFF
    style B2 fill:#D50000,color:#FFFFFF
    style B3 fill:#D50000,color:#FFFFFF
    style B4 fill:#D50000,color:#FFFFFF
```

However, weâ€™ll have to employ specific strategies and tools to handle Shiny bugs effectively, and some of the traditional debugging approaches can fall short in reactive contexts. The chapters in this section will cover common methods for debugging R code and how we can adapt them for our Shiny application. 

<!--

### Print Debugging and Interactive Debugging

Debugging is an essential skill for any programmer, and it's not restricted to fixing errors or broken code. Both print debugging and interactive debugging are commonly used techniques for identifying and resolving issues in code. They have different approaches and are suited to different types of development workflows. Letâ€™s compare and describe these methods in detail.

### **1. Print Debugging**

**Description**:
Print debugging is the practice of inserting print statements (or log statements) into your code to output the values of variables, the flow of execution, or other important information at various points in the program.

**Workflow**:
1. Insert `print()` or logging statements into your code where you want to observe values or program flow.
2. Run the program.
3. Examine the output from the print statements.
4. Adjust the code as necessary, add or remove print statements, and rerun.

**Advantages**:
- **Simplicity**: Itâ€™s very easy to implement. Just insert a few lines of code and run the program.
- **Universal**: Works in any programming environment, even if sophisticated debugging tools arenâ€™t available.
- **Non-intrusive**: It doesnâ€™t require special configurations or debugging tools.
  
**Disadvantages**:
- **Limited context**: You only see what you explicitly print. If you miss a key variable or condition, you may need to add more print statements.
- **Manual effort**: It can be time-consuming to insert, remove, and adjust print statements, especially in large or complex codebases.
- **Clutter**: Excessive use of print statements can clutter the code and output.
- **No runtime control**: You canâ€™t pause execution or inspect the program state in real-time.

---

### **2. Interactive Debugging**

**Description**:
Interactive debugging uses specialized tools like `gdb`, `pdb` (for Python), or IDE-integrated debuggers (e.g., Visual Studio Code, PyCharm) to allow developers to pause execution, inspect variables, step through code line by line, and modify values at runtime.

**Workflow**:
1. Set breakpoints in the code where you want the execution to pause.
2. Start the program in debug mode.
3. When the program hits a breakpoint, the debugger pauses execution, allowing you to inspect variable values, evaluate expressions, and step through code interactively.
4. Adjust variables, continue execution, or step through the program to analyze behavior.
  
**Advantages**:
- **Full control over execution**: You can pause execution at any point, inspect the full program state, and even modify variables on the fly.
- **Stepping through code**: You can step through the program line by line, making it easier to see where things go wrong.
- **Comprehensive context**: You get access to the entire programâ€™s state, including call stacks, memory, and variable values, without needing to preemptively insert print statements.
- **Dynamic**: You can modify variables and retry code execution without restarting the program.

**Disadvantages**:
- **Steeper learning curve**: Interactive debugging tools can be complex to learn and set up, especially in a more advanced debugger like `gdb`.
- **Environment-specific**: Some debuggers work best in specific IDEs or environments, and setting up debugging for large or distributed systems may be challenging.
- **Overhead**: Debugging tools may introduce a small performance overhead during runtime.
- **Configuration**: In some cases, configuring the environment to allow for interactive debugging can be complex (e.g., for remote systems or in containerized environments).

---

### **Comparison Summary**:

| Aspect                  | Print Debugging                            | Interactive Debugging                     |
|-------------------------|--------------------------------------------|-------------------------------------------|
| **Ease of use**          | Simple to implement, universally applicable | Requires setup and a learning curve       |
| **Runtime control**      | No control after program execution starts  | Full control during program execution     |
| **Visibility**           | Only what is printed is visible            | Full program context (variables, memory, etc.) |
| **Reusability**          | Temporary, needs removal after debugging   | Non-intrusive and doesnâ€™t clutter code    |
| **Performance impact**   | Minimal, but output can be excessive       | Small overhead due to the debugging tools |
| **Best suited for**      | Simple issues, small projects, or quick tests | Complex bugs, large codebases, or intricate logic |

### **When to Use Print Debugging**:
- Youâ€™re working with simple scripts or short code paths where you want a quick, non-intrusive way to track values.
- The issue is easy to reproduce and doesnâ€™t require stopping the program mid-execution.
- You donâ€™t have access to a debugging environment.

### **When to Use Interactive Debugging**:
- You need to debug complex, multi-step issues where controlling execution and inspecting state at specific points is important.
- You want to interactively test changes without modifying the source code.
- You need access to deeper details like call stacks, memory, or threads.

---

### Conclusion

Print debugging is quick and dirty but effective for simple tasks, while interactive debugging provides more powerful and flexible tools for dissecting complex problems. Depending on your workflow, you might start with print debugging and transition to interactive debugging when the issue becomes harder to trace or requires deeper inspection of the programâ€™s state.

## Utility functions

## Debugging apps 

## Print Debugging

## Exploring code

-->