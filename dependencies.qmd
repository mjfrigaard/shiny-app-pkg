# Dependencies {.unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  header = "Caution",
  contents = "This chapter is currently being revised.",
  fold = FALSE
)
```

The previous chapter showed how to document the functions with `roxygen2`. In this chapter we'll cover how to manage dependencies in your new app-package.

```{r}
#| label: co_box_tldr
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g", look = "default",
  header = "TLDR", fold = TRUE,
  contents = "
Managing dependencies: 
  
- **Exports**: export objects from using `@export`. Exported functions are the functions that an app-package offers to the world (i.e., someone installs and loads the package, these are the functions they can directly use).
  
- **Imports**: import functions from add-on packages using a 'fully qualified variable reference' (i.e., `pkg::fun()`) in the code below `R/` and add the package name to the `Imports` field in the `DESCRIPTION`.\n
    - If the object can't be imported using `::` (i.e., an operator), use the `@importFrom` tag from `roxygen2`\n
    - If your code uses a lot of functions from another package (such as `shiny` in app-packages), use the `@import` tag from `roxygen2`\n
    
**Workflow:** List the add-on package in the `Imports` field of the `DESCRIPTION` file (i.e., with `usethis::use_package('pkg')`), then decide if you're going to the functions in `pkg` with `pkg::fun()` (preferred), `@importFrom`, or `@import`.
  
  "
)
```

Dependencies are the must-have components for your app-package, and they're divided into imports and exports. **Imports** are the functions we're borrowing from add-on packages (any packages no automatically loaded in a new R session), and **exports** are the functions, data, and other R objects our app-package offers to users.

Dependencies are handled using `roxygen2` tags (to generate the `NAMESPACE`) and three fields in the `DESCRIPTION` file (`Suggests`, `Imports`, or `Depends`). If you’d like a refresher on documenting functions with `roxygen2`, a summary of the previous chapter is available below:

```{r}
#| label: co_box_roxygen2_recap
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", 
  fold = TRUE,
  header = "Chapter 4 recap: documenting functions with `roxygen2`", 
  contents = "
**Required `@tags` for all functions**: 
  
- Make sure all functions have a documented title & description (`@title` and `@description` tags optional), function inputs and outputs (`@param` and `@return`), and demonstrations of how the function works (`@examples`)
  
**Shiny-specific documentation**:
  
- Use `@seealso` to link module UI and server functions, and `@family` to link functions within a similar topic (i.e., 'import data' or 'scatter plot')
  
- Provide shiny-specific information (use within the app, reactive state, more details about the `@param`s, etc.) in `@section` blocks. 
  
See the [`roxygen2` branch](https://github.com/mjfrigaard/pkgApp/tree/02-roxygen2) for more information
"
)

```

## [`pkgApp`]{style="font-size: 1.05em"}

```{r}
#| label: co_box_03-dependencies
#| echo: false
#| results: asis
#| eval: false
co_box(
  color = "r",
  fold = FALSE,
  header = "GitHub [`pkgApp`]:[`02_roxygen2`]",
  contents = "
  
  This shiny app project can be found in the `02_roxygen2` branch of the [`pkgApp`](https://github.com/mjfrigaard/pkgApp/tree/02_roxygen2) repo.
  
This branch was created from the `02-roxygen2` branch using:
  
  `\`\`\bash
  git checkout -B 02_roxygen2
  git push -u origin 02_roxygen2
  `\`\`\
  
  "
)
```

We will use the [`02_roxygen2` branch of  `pkgApp`](https://github.com/mjfrigaard/pkgApp/tree/02_roxygen2) from the end of the previous chapter. Below is a folder tree of its contents:

```{bash}
#| eval: false
#| code-fold: false
pkgApp/
  ├── DESCRIPTION
  ├── NAMESPACE
  ├── R/
  │   ├── mod_scatter_display.R
  │   ├── mod_var_input.R
  │   ├── movies_app.R
  │   ├── movies_server.R
  │   ├── movies_ui.R
  │   └── utils.R
  ├── README.md
  ├── app.R
  ├── man/
  │   ├── mod_scatter_display_server.Rd
  │   ├── mod_scatter_display_ui.Rd
  │   ├── mod_var_input_server.Rd
  │   ├── mod_var_input_ui.Rd
  │   ├── movies_app.Rd
  │   ├── movies_server.Rd
  │   ├── movies_ui.Rd
  │   └── scatter_plot.Rd
  ├── movies.RData
  ├── pkgApp.Rproj
  └── www/
      └── shiny.png

4 directories, 21 files
```

### When in doubt...

[Load, document, and install]{style="font-style: italic; font-weight: bold; font-size: 1.10em"}

While developing your app-package, you might lose track of which `devtools` function you ran last (I know I do). If this happens, I've found loading, documenting, and installing help re-orient me to the current state of the package. 

[<kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd> / <kbd>D</kbd> / <kbd>B</kbd>]{style="font-style: italic; font-weight: bold; font-size: 1.10em"}

```{verbatim}
#| eval: false
#| code-fold: false
ℹ Loading pkgApp
```

```{verbatim}
#| eval: false
#| code-fold: false
==> devtools::document(roclets = c('rd', 'collate', 'namespace'))

ℹ Updating pkgApp documentation
ℹ Loading pkgApp
Documentation completed
```

```{verbatim}
#| eval: false
#| code-fold: false
==> R CMD INSTALL --preclean --no-multiarch --with-keep.source pkgApp

* installing to library ‘/path/to/local/install/pkgApp-090c61fc/R-4.2/x86_64-apple-darwin17.0’
* installing *source* package ‘pkgApp’ ...
** using staged installation
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (pkgApp)

Restarting R session...

> library(pkgApp)
```

It's also satisfying to see all three functions execute without any errors!

## Identifying dependencies 

The first step in managing dependencies is identifying which add-on packages `pkgApp` relies on. Our goal is to limit the dependencies to only those critical to the functioning of our app, because each additional dependency is a potential point of failure (should this package become unavailable or significantly change).

I've made this process somewhat easier by explicitly namespacing all of the add-on package functions in `pkgApp` (i.e., with `pkg::fun()`). You'll learn more about explicit namespacing in the following sections. 

### Running [`movies_app()`]{style="font-size: 1.10em"}

In the last chapter, we moved and documented the standalone app function (`movies_app()`) in the `R/` folder. The `app.R` file now only contains the following: 

```{r}
#| eval: false
#| code-fold: false
# pkgs <- c("shiny", "shinythemes", "stringr", "ggplot2", "rlang")
# install.packages(pkgs, quiet = TRUE)

# packages ------------------------------------
library(shiny)
library(shinythemes)
library(stringr)
library(ggplot2)
library(rlang)

# movies_app ------------------------------------
movies_app()
```

Ideally, we'll want to replace these calls to `libary()`, but first we have to make sure the functions we're using in these packages will be available in `pkgApp`.

When we run the contents of `app.R`, we see the following:

```{verbatim}
#| eval: false
#| code-fold: false
> library(pkgApp)
> # pkgs <- c("shiny", "shinythemes", "stringr", "ggplot2", "rlang")
> # install.packages(pkgs, quiet = TRUE)
> 
> # packages ------------------------------------
> library(shiny)
> library(shinythemes)
> library(stringr)
> library(ggplot2)
> library(rlang)
> 
> # movies_app ------------------------------------
> movies_app()
Error in movies_app() : could not find function "movies_app"
```

Why can't R find the `"movies_app"` function in `app.R`? 

Let's recap what we've done so far: 

::: {layout-ncol=2}

### [`app.R`]{style="font-size: 1.05em"}

- [x] `app.R` loads the necessary packages and calls `movies_app()`

###

```{bash}
#| eval: false 
#| code-fold: false
pkgApp/
    └── app.R
```

:::

::: {layout-ncol=2}

### [`R/`]{style="font-size: 1.05em"}

- [x] The `R/movies_app.R` file contains the code and documentation for `movies_app()`

###

```{bash}
#| eval: false 
#| code-fold: false
pkgApp/
    └── R/
        └── movies_app.R

```

:::


::: {layout-ncol=2}

### [`man/`]{style="font-size: 1.05em"}

- [x] `roxygen2` is generating the `man/movies_app.Rd` file 

###

```{bash}
#| eval: false 
#| code-fold: false
pkgApp/
    └── man/
          └── movies_app.Rd

```

:::


The error tells me that despite having documentation for `movies_app()` in `R/` *and* generating the corresponding `.Rd` file in `man/`, the `movies_app()` function isn't being **exported** from `pkgApp`.


## Exports

The exact cause of the error above becomes more apparent when we try to explicitly namespace `movies_app()` from `pkgApp`:

```{r}
#| eval: false
#| code-fold: false
pkgApp::movies_app()
```

```{verbatim}
#| eval: false
#| code-fold: false
Error: 'movies_app' is not an exported object from 'namespace:pkgApp'
```

```{r}
#| label: git_box_pkgApp_03_pkg-exports
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  fig_pw = '75%', 
  branch = "03_pkg-exports", 
  repo = 'pkgApp')
```

To make the `movies_app()` function available to users of our package, we need to export it. We export functions by including the `@export` tag in the `roxygen2` comment block (above the function we want to export):

-   **`@export`**: The function name (`my_func`) is not required. 

    ```{r}
    #| eval: false 
    #| code-fold: false
    #' @export my_func 
    #' my_func <- function() {
    #' 
    #' }
    ```
    
    -   Read more [here](https://r-pkgs.org/dependencies-in-practice.html#exports)
    
### Exporting [`movies_app()`]{style="font-size: 1.05em;"}

Let's start by exporting the `movies_app()` function from `pkgApp` by placing the `@export` tag above the function in `R/movies_app.R`:

```{r}
#| eval: false 
#| code-fold: false
#' Movies app standalone function
#'
#' Wrapper function for `shiny::shinyApp()`
#'
#' @return shiny app
#' 
#' 
#' @seealso [mod_var_input_ui()], [mod_var_input_server()], [mod_scatter_display_ui()], [mod_scatter_display_server()]
#'
#' @export
#' 
movies_app <- function() {
  shiny::shinyApp(ui = movies_ui, server = movies_server)
}
```

In `app.R`, we'll replace the calls to `library()` with a single call to `library(pkgApp)`

```{r}
#| eval: false 
#| code-fold: false
# packages ------------------------------------
library(pkgApp)

# movies_app ------------------------------------
movies_app()
```

We'll load, document, and install the package to generate the `NAMESPACE` changes: 

::: {style="font-style: italic; font-weight: bold; font-size: 1.10em"}
<kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd> / <kbd>D</kbd> / <kbd>B</kbd>
:::

Now, when we run the code `app.R`, we see the following: 

![`movies_app()`](img/05_dependencies_exported_movies_app.png){width=100%}

:::{.column-margin}

We've lost the shiny icon (`www/shiny.png`) in the UI, but we'll address this in the **`inst/` & `www/`** chapter.

:::

`movies_app()` launches our application!

<!-- first dimension defines rows and the second columns -->
<!-- "layout="[[1,1], [1]]" translates to: create two rows, the first of which has two columns of equal size and the second of which has a single column. -->

The `NAMESPACE` file now contains a single export (`movies_app`), and when we enter `pkgApp::` in the **Console**, we see the `movies_app()` function help file in the tab completion.
 
:::: {.column-body-outset-right}

::: {#fig-03_dependencies_namespace layout-ncol=2}

![updated `NAMESPACE`](img/05_dependencies_namespace.png){#fig-03_dependencies_namespace width=40%}

![`pkgApp` namespace](img/05_dependencies_tab_compl_movies_app.png){#fig-03_dependencies_namespace width=60%}

The `movies_app()` is now part of the `pkgApp` namespace
:::

::::


### What [`@export`]{style="font-size: 1.05em;"} does

We’ll pause here to notice a few things about what `@export` does. After loading, documenting, and installing `pkgApp`, the `NAMESPACE` is updated with `export(movies_app)`, and the **Console** automatically calls `library(pkgApp)`.

`ls()` returns "*the names of the objects in the specified environment*, so we can use it to confirm the `movies_app()` function is the only export from `pkgApp`:

```{r}
#| eval: false
#| code-fold: false
ls(name = "package:pkgApp")
```

```{verbatim}
#| eval: false
#| code-fold: false
[1] "movies_app"
```

#### The [`search()`]{style="font-size: 1.05em;"} list

`library(pkgApp)` attaches `pkgApp` to the search list. We can view all the attached packages in the string returned from `search()`:

```{verbatim}
#| eval: false
#| code-fold: false
"package:pkgApp" %in% search()
```

```{verbatim}
#| eval: false
#| code-fold: false
[1] TRUE
```

What about the functions from add-on packages `movies_app()` relies on, like `ggplot2`?

Let's check to see if `ggplot2` is also attached to the `search()` list: 

```{r}
#| eval: false
#| code-fold: false
c("package:ggplot2") %in% search()
```

```{verbatim}
#| eval: false
#| code-fold: false
[1] FALSE
```

Why does this matter? Because if these packages aren't attached to the `search()` list, we can't call their functions the way we would if we'd used `library()`.

For example, if we try to use `ggplot2` to build a plot (similar to the one we have in the app), we see the following:

```{r}
#| eval: false
#| code-fold: false
ggplot(data = mtcars, 
  aes(x = disp, y = mpg)) + 
  geom_point()
```

```{verbatim}
#| eval: false
#| code-fold: false
Error in ggplot(data = mtcars, 
              aes(x = disp, y = mpg)) : 
  could not find function "ggplot"
```

If we want to use functions from the packages `pkgApp` relies on, we need to explicitly namespace these functions from their original package namespaces (i.e., `pkg::fun()`): 

::: {layout-ncol=2}

```{r}
#| eval: false
#| code-fold: false
ggplot2::ggplot(data = mtcars, 
  ggplot2::aes(x = disp, y = mpg)) + 
  ggplot2::geom_point()
```

![We can use `ggplot2` if we explicitly namespace it's functions ](img/05_dependencies_using_ggplot2_with_ns.png){width=100%}

:::

```{r}
#| label: co_box_exports
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g",
  header = "Accessing add-on package functions",
  contents = "When a user loads `pkgApp` with `library(pkgApp)`, any add-on package functions used in exports are available to users if they use `pkg::fun()` (or if they load the package themselves with `library()`).", 
  fold = FALSE
)
```

Access to add-on package functions has implications for the other functions in `pkgApp`--for example, the `scatter_plot()` function uses `ggplot2` functions. But we're not exporting `scatter_plot()`, so when we attempt to run the examples, we see the following error: 

:::: {.column-body-outset-right}

::: {#fig-03_dependencies_scatter_plot_examples layout-ncol=2}

![Examples in `scatter_plot()`](img/05_dependencies_scatter_plot_examples_rd.png){#fig-03_dependencies_scatter_plot_examples width=40%}



![Error in `scatter_plot()` examples](img/05_dependencies_scatter_plot_examples_error.png){#fig-03_dependencies_scatter_plot_examples width=60%}

Examples in `scatter_plot()` function without exporting
:::

::::

[Examples for 'pkgApp::scatter_plot']{style="font-weight: bold; font-size: 1.15em;"}

The message at the top of the **Help** pane is informative because it tells us that despite `scatter_plot()` being functional when we run `movies_app()`, it's not part of the package namespace (and thus, not accessible to users in the help file). 

#### Exporting [`scatter_plot()`]{style="font-size: 1.05em;"}

Shiny apps often contain utility functions in `helper.R` or `utils.R` files. Storing non-shiny code in these files isn’t a bad practice (in fact, it's encouraged in [Mastering Shiny](https://mastering-shiny.org/scaling-functions.html#file-organisation)). However, if we're following the advice in [R Packages](https://r-pkgs.org/dependencies-in-practice.html#what-to-export), we should rename `R/utils.R` as we transition to an app-package, 

> *'most of our packages have a `utils.R` file ([Section 6.1](https://r-pkgs.org/code.html#sec-code-organising)) that contains small utility functions that are useful internally, but aren’t part of the core purpose of those packages. We don’t export such functions.'*

```{r}
#| label: co_box_utils_files
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  header = "`R/utils.R` >> `R/scatter_plot.R`",
  contents = "
  
From now on, I've renamed `R/utils.R` to `R/scatter_plot.R`, so it aligns with the naming conventions in other R packages.
  
For a deep dive on `R/utils.R` files in R packages, I recommend reading [Dissecting R Package “Utility Belts”](https://rud.is/b/2018/04/08/dissecting-r-package-utility-belts/)
  
  ", 
  fold = FALSE
)
```

Let's add the `@export` tag to `R/scatter_plot.R` so it's exported from `pkgApp`.

```{r}
#| eval: false 
#| code-fold: false
#' Create scatter plot 
#'
#' Custom [`ggplot2`](https://ggplot2.tidyverse.org/) function for building scatter plots in `pkgApp()`.
#' 
#' 
#' @param df `data.frame` or `tibble`
#' @param x_var string variable mapped to `x` axis
#' @param y_var string variable mapped to `y` axis
#' @param col_var string variable mapped to `color`
#' @param alpha_var number for point `alpha`
#' @param size_var number for point `size` 
#' 
#' @return A `ggplot2` plot object
#' 
#' 
#' @examples
#' scatter_plot(mtcars, 
#'     x_var = "mpg", 
#'     y_var = "disp", 
#'     col_var = "cyl", 
#'     alpha_var = 0.5, 
#'     size_var = 3)
#'     
#' @seealso [mod_scatter_display_server()]
#' 
#' @export
#' 
```

After loading, documenting, and installing `pkgApp`, the `NAMESPACE` is updated with the `export()` [directive](https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-NAMESPACE-file): 

::: {style="font-style: italic; font-weight: bold; font-size: 1.10em"}
<kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd> / <kbd>D</kbd> / <kbd>B</kbd>
:::


The contents of the updated `NAMESPACE` file are below (and `pkgApp::` in the **Console** now displays the `scatter_plot()` help file in the tab completion):

:::: {.column-body-outset-right}

::: {#fig-03_dependencies_namespace_scatter_plot layout-ncol=2}

![`@export` the `scatter_plot` function](img/05_dependencies_namespace_scatter_plot.png){#fig-03_dependencies_namespace_scatter_plot width='45%' fig-align='center'}

![`pkgApp::scatter_plot()`](img/05_dependencies_tab_compl_scatter_plot.png){#fig-03_dependencies_tab_compl_movies_app width='55%' fig-align='center'}

`scatter_plot()` is now part of the `pkgApp` namespace
:::

::::

Below, we confirm users can access the help file for `scatter_plot()` and run the examples:

::: {#fig-03_dependencies_scatter_plot_examples}
![`scatter_plot()` examples](img/05_dependencies_scatter_plot_examples.png){#fig-03_dependencies_scatter_plot_examples width='100%' fig-align='center'}

Running examples in `?scatter_plot`
:::

#### [`loadedNamespaces()`]{style="font-size: 0.95em;"} 

We've already confirmed that `ggplot2` isn't attached with `pkgApp` (and hence, it is not included in the `search()` list)

```{r}
#| eval: false 
#| code-fold: false
c("package:ggplot2") %in% search()
```

```{verbatim}
#| eval: false 
#| code-fold: false
[1]  FALSE
```

However, we can access the functions we used the `pkg::fun()` syntax with because those functions are included in the loaded namespaces (which we can view with `loadedNamespaces()`)

```{r}
#| eval: false 
#| code-fold: false
c("ggplot2") %in% loadedNamespaces()
```

```{verbatim}
#| eval: false 
#| code-fold: false
[1] TRUE
```

### What to [`@export`]{style="font-size: 1.05em"}

"*When a user calls `library(pkgApp)`, what functions do I want to be available?*"

When determining which functions to export, consider the question above. [R Packages, 2ed](https://r-pkgs.org) also offers the following advice on what **shouldn't** be exported: 

> *'We believe that packages that have a wide audience should strive to do one thing and do it well. All functions in a package should be related to a single problem (or a set of closely related problems). Any functions not related to that purpose should not be exported.'* - [What to export, R Packages, 2ed](https://r-pkgs.org/dependencies-in-practice.html#what-to-export)

There are multiple ways to interpret the advice above in the context of a shiny app-package:

-   If we take a narrow view of the word ‘problem’ to mean '*create a way to visualize relationships in movie review data*', then maybe we'd consider it solved by only exporting the standalone app function.

-   If the ‘problem’ `pkgApp` solves is ‘*creating a shiny movies app*’, we might also want to export any functions that perform distinct tasks with potentially reusable functionality (i.e., generate specific UI components, perform data processing tasks, etc.).

-   Extending the ‘problem’ statement to the broadest possible definition would assume users will want access to all the functions in `pkgApp`–this would allow them to customize, extend, or integrate the contents of `pkgApp` with other tools. You’ll rarely want to export everything from your app-package, but it can be helpful if your primary audience is other developers within your organization.

My advice on exports is to [balance simplicity and utility when deciding on exported functions.]{style="font-size: 1.05em; font-weight: bold; color: #DA1212;"}


```{r}
#| label: co_box_keywords_internal
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g",
  header = "Low-key `@export`s with `@keywords internal`",
  contents = "
  
  If you'd like function to be exported, but not listed in the package index, you can combine `@export` with `@keywords internal`. These should be used in combination, 
  
  \`\`\` r
  #' @export
  #' 
  #' @keywords internal
  \`\`\`
  
  For example, adding `@export` and `@keywords internal` to `R/scatter_plot.R` will make the function accessible to users: 
  
  ![](img/keywords_internal_namespace.png){width='80%' fig-align='center'}
  
  And include the help file:
  
  ![](img/keywords_internal_rd.png){width='80%' fig-align='center'}
  
  However, if a user were to click on the **Index** for `pkgApp` (at the bottom of the help file)
  
  ![](img/pkg_index.png){width='65%' fig-align='center'}
  
  `scatter_plot` is not listed:
  
  ![](img/pkgApp_index.png){width='80%' fig-align='center'}
  
  
  
  ", 
  fold = TRUE
)
```

## Imports

```{r}
#| label: git_box_pkgApp_04_pkg-imports
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  fig_pw = '75%', 
  branch = "04_pkg-imports", 
  repo = 'pkgApp')
```

Handing imports is slightly more involved than package exports because imported dependencies can live in `DESCRIPTION` and the `NAMESPACE`.

The `DESCRIPTION` file handles  **package-level dependencies**, specifying which packages `pkgApp` uses. These packages are installed whenever a user installs `pkgApp`.

On the other hand, the `NAMESPACE` directives manage  **function-level access**, importing functions from other packages to be used in `pkgApp` and--as we've seen above--exporting functions from `pkgApp` for others to use.

When `pkgApp` is documented (i.e., **[<kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd>]{style='font-size: 0.70em;'}**), `roxygen2` tags update the `NAMESPACE` with any imports or exports. However, the `DESCRIPTION` file must be edited independently:

::::{.column-margin}

::: {style='font-style: italic;'}

**[<kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>D</kbd>]{style='font-size: 0.75em;'}** updates the `NAMESPACE`, but it doesn't change anything in the `DESCRIPTION` file.

:::

::::

::: {#fig-roxygen2_connects}

![`roxygen2` does not connect the `NAMESPACE` to the `DESCRIPTION`](img/05_dependencies_roxygen2_no_connect_desc.png){#fig-roxygen2_connects width='75%' align='center'}

`roxygen2` & `NAMESPACE` = function-level access vs. `DESCRIPTION` = package-level dependencies
:::

The differences between the dependencies listed in the `NAMESPACE` directives and the `Imports` field in the `DESCRIPTION` file can be a common point of confusion [^imports-confusion-r-packages-1], which is understandable if you've consulted Writing R Extensions (specifically the sections on dependencies [^package-dependencies-r-doc-2] and namespaces.[^package-namespaces-r-doc-3] 

[^imports-confusion-r-packages-1]: See the section titled, '[Confusion about Imports](https://r-pkgs.org/dependencies-in-practice.html#confusion-about-imports)' in [R Packages, 2ed](https://r-pkgs.org/), "*Listing a package in `Imports` in `DESCRIPTION` does not 'import' that package.*"

[^package-dependencies-r-doc-2]: See section [1.1.3 Package Dependencies](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Package-Dependencies) in [Writing R Extensions](https://cran.r-project.org/doc/manuals/r-release/R-exts.html)

[^package-namespaces-r-doc-3]: See section [1.5, Package namespaces](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Package-namespaces) in [Writing R Extensions](https://cran.r-project.org/doc/manuals/r-release/R-exts.html)

I've attempted to distill and consolidate the advice I've found when I've gone looking for (and had trouble finding) answers to the following questions:

:::{style='font-style: italic;'}

[How and where]{style="font-weight: bold; font-size: 1.01em;"} should I be importing add-on functions and packages?

[Why and when]{style="font-weight: bold; font-size: 1.01em;"} should I import add-on packages/functions? and

[What]{style="font-weight: bold; font-size: 1.01em;"} happens when a package or function is imported? 

:::

I’ve also [emphasized]{style="color: #DA1212;"} the parts I’ve found worth committing to memory.

### [How and where?]{style="font-weight: bold; font-size: 1.05em;"} 

There are three ways to import dependencies:

1. Use a 'fully qualified variable reference' (i.e., the `pkg::fun()` syntax)[^pkg-fun-syntax-4] for calls to add-on functions in the `R/` folder

[^pkg-fun-syntax-4]: We're already using this method in the functions for [`pkgApp`](https://github.com/mjfrigaard/pkgApp/tree/04_pkg-imports/R) 

2. List add-on packages in the `Imports` field of the `DESCRIPTION` file

3. Include an `@import` or `@importFrom` tag for add-on packages in the `R/` folder  `roxygen2`[^roxygen-imports-tags-5] 

[^roxygen-imports-tags-5]: The `@import` and `@importFrom` tags will add the `import()` or `importFrom()` directives in the `NAMESPACE`, respectively.

:::: {.callout-note collapse="false" icon=false title="How and where to use..."}

::: {.panel-tabset}

### [`pkg::fun()`]{style="font-size: 0.90em;"}

[Writing R Extensions](https://cran.r-project.org/doc/manuals/r-release/R-exts.html) refers to the `pkg::fun()` syntax as a 'fully-qualified reference':

> "*[A fully-qualified reference]{style="color: #DA1212;"} to the function `f` in package `foo` is of the form `foo::f`.*" - [Specifying imports and exports](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Specifying-imports-and-exports)

Using '`pkg::fun()`' can seem tedious at first, but fortunately we have tools like tab-completion (if you're using the Posit Workbench IDE) and packages like [`sinew`](https://yonicd.github.io/sinew/) (which we'll cover in a later chapter)

### [`Imports` (`DESCRIPTION`)]{style="font-size: 0.90em;"}

[R Packages, 2ed](https://r-pkgs.org/) recommends using the `usethis::use_package()` function to include add-on packages to the `Imports` field of the `DESCRIRPTION` file[^how-imports-description-r-doc-6]

[^how-imports-description-r-doc-6]: The [official R documentation](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#The-DESCRIPTION-file) assumes you'll adding dependencies to the `DESCRIPTION` file manually

> "*Remember `usethis::use_package()` is helpful for [adding dependencies to `DESCRIPTION`]{style="color: #DA1212;"}*" - [Dependencies: In Practice](https://r-pkgs.org/dependencies-in-practice.html#fn2)


### [`@import/@importFrom` (`NAMESPACE`)]{style="font-size: 0.90em;"}

[R Packages, 2ed](https://r-pkgs.org/) assumes you'll be building your app-package with `roxygen2` and `devtools::document()`, so the authors recommend using the `usethis::use_import_from()`[^how-imports-namespace-r-doc-7]

[^how-imports-namespace-r-doc-7]: The [official R documentation](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Specifying-imports-and-exports) assumes you'll be editing the `NAMESPACE` manually (i.e., with `export()`, `import()`, and `importFrom()` directives)

> "*A handy function [for your interactive workflow]{style="color: #DA1212;"} is `usethis::use_import_from()`*" - [In code below R/](https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-imports-r-code)

Using `usethis::use_import_from()` also adds a new `R/[app-package]-package.R` file, which can server as a 'central repository' for the imported functions and packages (see `usethis::use_package_doc()` also).

:::

::::


#### [How and where]{style="font-weight: bold;"} in [`pkgApp`]{style="font-size: 1.05em;"}

We're already using `pkg::fun()` in the two exported functions from `pkgApp` (`movies_app()` and `scatter_plot()`): 

- [x] `pkg::fun()` in `movies_app()`:

```{r}
#| eval: false
#| code-fold: true
#| code-summary: 'show/hide explicit namespacing in movies_app()'
movies_app <- function() {
  shiny::shinyApp(ui = movies_ui, server = movies_server)
}
```

- [x] `pkg::fun()` in `scatter_plot()`:

```{r}
#| eval: false
#| code-fold: true
#| code-summary: 'show/hide explicit namespacing in scatter_plot()'
scatter_plot <- function(df, x_var, y_var, col_var, alpha_var, size_var) {
    ggplot2::ggplot(data = df,
      ggplot2::aes(x = .data[[x_var]],
          y = .data[[y_var]],
          color = .data[[col_var]])) +
      ggplot2::geom_point(alpha = alpha_var, size = size_var)

}
```


Now let's cover when and why to list these packages and functions as imports.

### [When and why?]{style="font-weight: bold; font-size: 1.05em;"}

Knowing [when and why]{style="font-weight: bold;"} to use each import method is just as important as knowing [how and where]{style="font-weight: bold;"} to import add-on packages and functions.

I've done my best to distill the available information into actionable decisions below:

:::: {.callout-note collapse="false" icon=false title="When and why to use..."}

::: {.panel-tabset}

### [`pkg::fun()`]{style="font-size: 0.90em;"}

If your app-package only uses a handful of functions from an add-on package, using `pkg::fun()` is fine[^when-pkg-fun-imports-8]

[^when-pkg-fun-imports-8]: This is the case for `ggplot2` in our exported `scatter_plot()` function from `pkgApp`

> "*If a package [only needs a few objects from another package]{style="color: #DA1212;"} it can use a fully qualified variable reference (`foo::f`) in the code instead of a formal import.*" - [Specifying imports and exports](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Specifying-imports-and-exports)

If there is a potential name conflict, use the `pkg::fun()` syntax:

> *Using the `foo::f` form will be necessary when a package needs to use a function of the [same name from more than one namespace.]{style="color: #DA1212;"}*" - [Specifying imports and exports](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Specifying-imports-and-exports)

On the other hand, [R Packages, 2ed](https://r-pkgs.org/) recommends defaulting to `pkg::fun()` for calls to *any* add-on packages in the `R/` folder because it makes these calls more explicit:

> "*...the `package::function()` calling style is also our default recommendation for how to use your dependencies in the code below R/, [because it eliminates all ambiguity.]{style="color: #DA1212;"}*" - [R packages, Namespace](https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-namespace-motivation)
> 
> "*Our recommended default is to [call external functions using the `package::function()` syntax]{style="color: #DA1212;"}*" - [R Packages 2ed, In code below `R/`](https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-imports)

### [`Imports` (`DESCRIPTION`)]{style="font-size: 0.90em;"}

[Writing R Extensions](https://r-pkgs.org/dependencies-mindset-background.html) states that any add-on package functions using `pkg::fun()` should be listed in the `DESCRIPTION`  (specifically, the `Imports` field).

> "*The `Imports` field lists packages whose namespaces are imported from (as specified in the `NAMESPACE` file) but which do not need to be attached. [Namespaces accessed by the `::` and `:::` operators must be listed here.]{style="color: #DA1212;"}*" - [Package Dependencies](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Package-Dependencies)

You might be wondering, "*What if I list a package in `DESCRIPTION`/`Imports` field, but don't list it in the `NAMESPACE`*?" [R Packages, 2ed](https://r-pkgs.org/) addresses this:

> "*It is common for a package to be listed in `Imports` in `DESCRIPTION`, but not in `NAMESPACE`. The converse is not true. [Every package mentioned in `NAMESPACE` must also be present in the `Imports` or `Depends` fields.]{style="color: #DA1212;"}*" - [Confusion about Imports](https://r-pkgs.org/dependencies-in-practice.html#confusion-about-imports)

On when to use `Imports` vs. `Depends`:

> *Unless there is a good reason otherwise, [you should always list packages in `Imports` not `Depends`]{style="color: #DA1212;"}.*" - [Whether to Import or Depend](https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-namespace)

### [`@import/@importFrom` (`NAMESPACE`)]{style="font-size: 0.90em;"}

[Writing R Extensions](https://r-pkgs.org/dependencies-mindset-background.html) states 'variables exported from other packages' need to be listed in the `NAMESPACE` (and recommends using `@importFrom` over `@import` in most cases):

> "*Variables exported from [other packages with namespaces need to be imported explicitly using the directives `Imports` and `importFrom`]{style="color: #DA1212;"}*" [Specifying imports and exports](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Specifying-imports-and-exports)
>
> "*Using `importFrom` selectively rather than `Imports` is good practice and recommended notably [when importing from packages with more than a dozen exports and especially from those written by others (so what they export can change in future)]{style="color: #DA1212;"}.*" - [Specifying imports and exports](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Specifying-imports-and-exports). 

Using `pkg::fun()` is also referred to as less efficient than a 'formal import'   in [Writing R Extensions](https://r-pkgs.org/dependencies-mindset-background.html) (a 'formal import' means the add-on package function uses a directive in the `NAMESPACE`): 

> "*[`foo::f`] is slightly [less efficient than a formal import]{style="color: #DA1212;"} and also loses the advantage of recording all dependencies in the `NAMESPACE` file"* - [Specifying imports and exports](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Specifying-imports-and-exports). 


However, [R Packages, 2ed](https://r-pkgs.org/) recommends minimizing the use of both `@import` and `@importFrom` (*the `aaapkg` represents a hypothetical package listed in the `Imports` field of the `DESCRIPTION` file in the example below*)

> "*Specifically, we recommend that you [default to not importing anything from `aaapkg` into your namespace]{style="color: #DA1212;"}. This makes it very easy to identify which functions live outside of your package, which is especially useful when you read your code in the future. This also eliminates any concerns about name conflicts between `aaapkg` and your package.*" [Package is listed in Imports](https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-imports)

But [R Packages, 2ed](https://r-pkgs.org/) also notes the following exceptions to this rule in [Package is listed in `Imports`](https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-imports):

> "*Sometimes you make such [heavy use of so many functions from another package that you want to import its entire namespace]{style="color: #DA1212;"}.*" [^when-pkg-import-9]
> 
> "*You can’t call an [operator from another package]{style="color: #DA1212;"} via ::, so you must import it.*" [^when-pkg-fun-import-from-10]

[^when-pkg-import-9]: App-packages should include `@import shiny` because nearly all the functions (modules, standalone app functions, etc.) will require `shiny`.

[^when-pkg-fun-import-from-10]: Our use of `.data` in `scatter_plot()` requires `@importFrom` because it's not accessible with `::` from [`rlang`](https://rlang.r-lib.org/reference/dot-data.html).

If you happen to read the advice from the footnote, you'll also find somewhat conflicting advice: 

> "*[Always use a `NAMESPACE` to specify imports]{style="color: #DA1212;"} so that your package code isn't harmed by other peoples' use of `Depends`.*" - [Whether to Import or Depend: footnote reference ](https://r-pkgs.org/dependencies-mindset-background.html#fn6)
:::

::::


#### [When and why]{style="font-weight: bold;"} in [`pkgApp`]{style="font-size: 1.05em;"}

I've found the best guidance on when and why to use each method (`pkg::fun()`, `Imports` in the `DESCRIPTION`, or `@import`/`@importFrom`) comes from the `roxygen2` documentation:

> *"if you are using just a few functions from another package, we recommending adding the package to the `Imports:` field of the `DESCRIPTION` file and calling the functions explicitly using `::`, e.g., `pkg::fun()`"*
>
> *"If the repetition of the package name becomes annoying you can `@importFrom` and drop the [`pkg::fun()`]"* - [Importing functions](https://roxygen2.r-lib.org/articles/namespace.html#functions)

Following this advice (and the exceptions to the rule regarding 'heavy use'[^pkg-heavy-use-11] and 'operators'[^pkg-operators-12] from add-on packages) we can: 

[^pkg-heavy-use-11]: "*Sometimes you make such heavy use of so many functions from another package that you want to import its entire namespace.*", [R Packages, 2ed, In code below `R/`](https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-imports-r-code)"

[^pkg-operators-12]: "*You can’t call an operator from another package via `::`, so you must import it*", [R Packages, 2ed, In code below `R/`](https://r-pkgs.org/dependencies-in-practice.html#sec-dependencies-in-imports-r-code)"

- [x] Replace the explicit namespacing from all calls to `shiny` functions (i.e., `shiny::`) with the `@import` tag in `R/movies_app.R`:

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide @import in movies_app()'
#' Movies app standalone function
#'
#' Wrapper function for `shinyApp()`
#'
#' @return shiny app
#' 
#' 
#' @seealso [mod_var_input_ui()], [mod_var_input_server()], [mod_scatter_display_ui()], [mod_scatter_display_server()]
#' 
#' @import shiny
#'
#' @export
#' 
movies_app <- function() {
  shinyApp(ui = movies_ui, server = movies_server)
}
```

- [x] Include `@importFrom` for the use of `.data` in `R/scatter_plot.R`:

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide @importFrom in scatter_plot()'
#' Create scatter plot 
#'
#' Custom [`ggplot2`](https://ggplot2.tidyverse.org/) function for building scatter plots in `pkgApp()`.
#' 
#' 
#' @param df `data.frame` or `tibble`
#' @param x_var string variable mapped to `x` axis
#' @param y_var string variable mapped to `y` axis
#' @param col_var string variable mapped to `color`
#' @param alpha_var number for point `alpha`
#' @param size_var number for point `size` 
#' 
#' @return A `ggplot2` plot object
#' 
#' 
#' @examples
#' scatter_plot(mtcars, 
#'     x_var = "mpg", 
#'     y_var = "disp", 
#'     col_var = "cyl", 
#'     alpha_var = 0.5, 
#'     size_var = 3)
#'     
#' @seealso [mod_scatter_display_server()]
#' 
#' @importFrom rlang .data
#' 
#' @export
#' 
scatter_plot <- function(df, x_var, y_var, col_var, alpha_var, size_var) {
    ggplot2::ggplot(data = df,
      ggplot2::aes(x = .data[[x_var]],
          y = .data[[y_var]],
          color = .data[[col_var]])) +
      ggplot2::geom_point(alpha = alpha_var, size = size_var)

}
```

Finally, we need to list each add-on package to the `Imports` field in the `DESCRIPTION` using `usethis::use_package()` (below is the output for `ggplot2`):

```{verbatim}
#| eval: false 
#| code-fold: false
usethis::use_package("ggplot2")
✔ Setting active project to '/path/to/pkgApp'
✔ Adding 'ggplot2' to Imports field in DESCRIPTION
• Refer to functions with `ggplot2::fun()`
```


After adding all add-on packages to the DESCRIPTION with `usethis::use_package()`, we'll load, document, and install `pkgApp`:

::: {style="font-style: italic; font-weight: bold; font-size: 1.10em"}
<kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd> / <kbd>D</kbd> / <kbd>B</kbd>
:::

And we should review the updated `NAMESPACE` and `DESCRIPTION` files:

::: {#fig-03_dependencies_namespace_import_shiny layout-ncol=2}

![Updated `NAMESPACE` with `Imports` and `importFrom](img/05_dependencies_namespace_import_importFrom.png){#fig-03_dependencies_namespace_import_shiny width='50%' align='center'}

![Updated `DESCRIPTION` with all  `Imports`](img/05_dependencies_description_imports.png){#fig-03_dependencies_namespace_import_shiny width='50%' align='center'}

`roxygen2` will update the `NAMESPACE`, but `usethis::use_package()` is needed to update the `DESCRIPTION`
:::

When we run `movies_app()`, we see the application launches and we can still run the `scatter_plot()` examples: 

::: {#fig-import_check_app_examples layout-ncol=2}

![`movies_app()` works](img/05_dependencies_exported_movies_app.png){#fig-03_dependencies_namespace_import_shiny width='50%' align='center'}

![Examples in `?scatter_plot`](img/05_dependencies_scatter_plot_examples.png){#fig-import_check_app_examples width='50%' align='center'}

Confirming we still have full functionality in `pkgApp`
:::

In the next section, we're going to cover what happens when these packages and functions were included as imports in `pkgApp`.

### [What happens?]{style="font-weight: bold; font-size: 1.05em;"}

What happens to imported packages and functions can get a bit technical, but I've done my best to include what I consider to be the necessary distinctions between using `pkg::fun()`, the `@import`/`@importFrom` tags, and the `Imports` field in the `DESCRIPTION.`

I strongly encourage reading the [namespaces section of Advanced R, 2ed](https://adv-r.hadley.nz/environments.html#namespaces) for a deeper understanding of these topics.

:::: {.callout-note collpase="false" icon=false title="What happens when we use..."}

::: {.panel-tabset}

### [`pkg::fun()`]{style="font-size: 0.90em;"}

> "*Evaluating `foo::f` will cause package `foo` to be [loaded, but not attached]{style="color: #DA1212;"}, if it was not loaded already*" - [Specifying imports and exports](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Specifying-imports-and-exports). 

This means if users of our package want to use `foo::f`, they will have to use `foo::f`.

### [`Imports` (`DESCRIPTION`)]{style="font-size: 0.90em;"}

[R Packages, 2ed](https://r-pkgs.org/) describes what happens to packages listed in `Imports:`

> *Consider a dependency that is listed in `DESCRIPTION` in `Imports:`*
> 
> ```
> Imports:
>     aaapkg
> ```
> 
> *The code inside your package can [assume that aaapkg is installed whenever pkg is installed]{style="color: #DA1212;"}.*

[R Packages, 2ed](https://r-pkgs.org/) also recommends using `Imports` (instead of `Depends`) and describes the the differences in their actions (i.e., loading vs. loaded & attaching)

> "*The main difference is that a package you list in `Imports` will [just be loaded when you use it]{style="color: #DA1212;"}, whereas a package you list in `Depends` [will be attached when your package is attached]{style="color: #DA1212;"}.* - [Whether to Import or Depend](https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-namespace)

### [`@import/@importFrom` (`NAMESPACE`)]{style="font-size: 0.90em;"}


Imports are covered in [Advanced R, 2ed](https://adv-r.hadley.nz/environments.html#namespaces):

> "*Each namespace has an **imports** environment that can contain bindings to functions used by the package that are defined in another package. [The **imports** environment is controlled by the package developer with the `NAMESPACE` file. Specifically, directives such as `importFrom()` and `imports()` populate this environment.]{style="color: #DA1212;"}*" - [Function lookup inside a package](https://r-pkgs.org/dependencies-mindset-background.html#function-lookup-inside-a-package)


:::

::::

#### [What happened]{style="font-weight: bold;"} in [`pkgApp`]{style="font-size: 1.05em;"}

First, let's confirm we're still only exporting `movies_app()` and `scatter_plot()` from `pkgApp`:

```{r}
#| eval: false
#| code-fold: false
ls(name = "package:pkgApp")
```

```{verbatim}
#| eval: false
#| code-fold: false
[1] "movies_app"   "scatter_plot"
```

Great. Now we've listed five packages in the `Imports` field of the `DESCRIPTION` file:

```{verbatim}
#| eval: false
#| code-fold: false
Imports: 
    ggplot2,
    rlang,
    shiny,
    shinythemes,
    stringr
```

#### The [`search()`]{style="font-size: 1.05em;"} list

Are these packages on the search list?

```{r}
#| eval: false
#| code-fold: false
pkgs <- c("package:ggplot2", "package:rlang", 
          "package:shiny", "package:shinythemes", 
          "package:stringr")
pkgs %in% search()
```

```{verbatim}
#| eval: false
#| code-fold: false
[1] FALSE FALSE FALSE FALSE FALSE
```

This demonstrates that none of these packages are attached with `pkgApp`. However, the `rlang` and `shiny` packages are included in the `loadedNamespaces()` (because we included them with `@import`/`@importFrom`). 

```{r}
#| eval: false
#| code-fold: false
pkgs <- c("ggplot2", "rlang", "shiny", 
          "shinythemes", "stringr")
pkgs %in% loadedNamespaces()
```

```{verbatim}
#| eval: false
#| code-fold: false
[1] FALSE  TRUE  TRUE FALSE FALSE
```

We can still access the add-on package functions in `pkgApp` using the `pkg::fun()` syntax: 

::: {layout-ncol=2}

```{r}
#| eval: false
#| code-fold: false
ggplot2::ggplot(data = mtcars, 
  ggplot2::aes(x = disp, y = mpg)) + 
  ggplot2::geom_point()
```

![`ggplot2` functions are still available if we explicitly namespace ](img/05_dependencies_using_ggplot2_with_ns.png){width=100%}

:::

## Checking dependencies 

With all the moving parts in dependency management, it can be easy to forget if you've documented everything correctly. So far we haven't covered using `devtools::check()` as part of your app-package habits (which [is fine](https://mastering-shiny.org/scaling-packaging.html#r-cmd-check)), but this is one area it's particularly helpful. 

For example, if I had listed `shiny` as an import using the `@import` tag (resulting in the `import(shiny)` directive in the `NAMESPACE`), `devtools::check()` would produce the following error: 

```{verbatim}
#| code-fold: false
#| eval: false
── R CMD check results ────────────────────────── pkgApp 0.0.0.9000 ────
Duration: 7.4s

❯ checking package dependencies ... ERROR
  Namespace dependency missing from DESCRIPTION Imports/Depends entries: ‘shiny’
  
  See section ‘The DESCRIPTION file’ in the ‘Writing R Extensions’
  manual.

1 error ✖ | 0 warnings ✔ | 0 notes ✔
Error: R CMD check found ERRORs
Execution halted

Exited with status 1.
```

## Recap 

Below are the main takeaways from managing the imports and exports from your app-package: 

```{r}
#| label: co_box_recap
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  header = "Dependencies recap",
  contents = "
  This chapter covered: 
  
  - **Exports**: Aim for a balance between simplicity and utility when deciding which functions to export (i.e., what functions should be available to users who install your package). Export objects from using `@export`
  
  - **Imports**: Use `pkg::fun()` syntax when you use add-on package functions and include them in the `Imports` field of the `DESCRIPTION` file. App-packages use so many `shiny` functions it makes sense to include `@import shiny` to 1) ensure all of these functions are available, and 2) you won't need to use `pkg::fun()`.
  
    - **`DESCRIPTION` `Imports`** This field lists the packages your app-package uses. All add-on packages used in the `R/` folder must be listed in the `Imports` field. These functions can be called using the `pkg::fun()` syntax (or with `@importFrom()`). Functions from these packages will be available for your package, but not for the user unless they use the `::` operator or load the package themselves with `library()`.
  
    - **`NAMESPACE` imports**: The `@import`/`@importFrom` tags make the functions from add-on packages available to your package. Favor using `@importFrom` over `@import` for add-on package functions (the only exception being `shiny`, which you'd want to use `@import`).
  
The `Imports` field in the `DESCRIPTION` handles package-level dependencies (and it is managed manually or with `usethis::use_package()`), while the `NAMESPACE` handles function-level access (with `@export` and `@import`/`@importFrom`).
  ", 
  fold = FALSE
)
```

In the next section, we'll cover how the ensure the `app.R` file runs our application!
