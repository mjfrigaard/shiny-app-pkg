# Deploy {#sec-deploy .unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
library(shinypak)
```

Let's briefly review what we've covered in the last five chapters:

## [Test suite (Chapter 10)]{style='font-size: 0.85em;'}

[Test suite](test_suite.qmd) covers:

1. Getting started with @sec-tests-suite-use-testthat in your app-package

2. An introduction to @sec-tests-suite-bdd-intro

3. Make running tests during development easier by setting @sec-tests-suite-keyboard-shortcuts 

## [Specifications (Chapter 11)]{style='font-size: 0.85em;'}

[Specifications](test_specs.qmd) dives into:

1. The differences between @sec-tests-specs-app-reqs, @sec-tests-specs-user-specs, @sec-tests-specs-features, and @sec-tests-specs-func-reqs

2. The @sec-tests-specs-bdd-testthat functions (`describe()` and `it()`) are introduced

3. Tracking features, requirements and tests with a @sec-tests-specs-traceability-matrix

:::: {.callout-tip collapse='true' appearance='default'}

### [Chapter 11 Applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 11 (Specifications) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 11 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^11')
```

::: 

::::

## [Test tools (Chapter 12)]{style='font-size: 0.85em;'}

[Test tools](test_tools.qmd) covers: 

1. Where to store and how to use test @sec-test-fixtures and @sec-test-helpers

2. Checking test coverage during @sec-test-coverage-active-file

3. Creating snapshots and @sec-test-snaps-review

:::: {.callout-tip collapse='true' appearance='default'}

### [Chapter 12 Applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 12 (Test tools) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 12 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^12')
```

::: 

::::

## [Testing modules (Chapter 13)]{style='font-size: 0.85em;'}

[Testing modules](test_modules.qmd) includes strategies for: 

1. Testing returned values with @sec-tests-mods-returned

2. Passing module arguments with @sec-tests-mods-args-list

3. Checking @sec-tests-mods-coverage and @sec-tests-mods-outputs

:::: {.callout-tip collapse='true' appearance='default'}

### [Chapter 13 Applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 13 (Testing modules) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 13 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^13')
```

::: 

::::

## [System tests (Chapter 14)]{style='font-size: 0.85em;'}

1. Introduction to @sec-tests-system-shinytest2

1. Using `shinytest2` to @sec-tests-system-recording-tests

1. Exporting test values with @sec-tests-system-test-mode

:::: {.callout-tip collapse='true' appearance='default'}

### [Chapter 14 Applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 14 (System tests) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 14 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^14')
```

::: 

::::


# Deploy

This section covers two common methods for deploying a Shiny app-package: 1) Docker images and containers, 2) using GitHub Actions for Continuous Integration (CI) and Continuous Deployment (CD), and 3) building and deploying a package website. 

## Docker

-   @sec-docker covers how Docker can simplify setting up your R environment and reduce the "it works on my machine" problem:
  
    - @sec-what-is-docker and how does it provide a consistent environment for the application, ensuring it works seamlessly across different computers.

    - How to write @sec-dockerfile in your app-package (and launching your app in a virtual container)

  
## CI/CD with GitHub Actions

-   How @sec-gha-cicd can be used to automate processes like styling and linting (@sec-gha-style)

    -   Testing, and deploying our Shiny app-package (@sec-gha-shiny)

    -   Using Shiny and Docker in combination with Docker to container-ize *and* deploy our app-package (@sec-gha-shiny-docker)


## Package websites 

  - `pkgdown` helps us easily create websites for our app-packages. This chapter covers:
  
    -   How to @sec-pkgdown-setup your configuration file 
    
    -   Customizing site @sec-pkgdown-layouts, and
    
    -   Deploying it online with GitHub Actions with the @sec-pkgdown-workflow file