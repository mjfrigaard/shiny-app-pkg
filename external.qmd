# External files {#sec-inst}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_tldr
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", 
  look = "default", hsize = "1.15", size = "1.10",
  header = "TLDR: External files/resources", fold = TRUE,
  contents = "

<br>
  
- **`inst/`**: the `inst/` folder is used to store files/resources that are available when your package is installed (i.e., *'will be copied recursively to the installation directory.'*)\n
  
- **`system.file()`**: `system.file()` is a 'file path accessor' function\n
    - '*the directory structure of a source package is different from the directory structure of an installed package.*'\n
    - Use `system.file()` to access the installed version of your app-package\n
  
- **`addResourcePath()`**: use `addResourcePath()` with `system.file()` and `inst/` to include external files in your application.\n
    
**Workflow:** for a file located in `inst/www/file.png`:\n
  
\`\`\`r
# add path to app
addResourcePath('www', system.file('www', package = 'pkg'))
# use path without 'inst/' prefix in UI
img(src = 'www/shiny.png')
\`\`\`
  
  "
)
```

---

In this chapter we'll cover how to add external resources (i.e., files previously stored and served from the `www/` folder) to your app-package, and how to store and run multiple applications.

:::: {.callout-tip collapse='true' appearance='deafult'}

## [Accessing applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

I've created the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/) In an effort to make each section accessible and easy to follow:
  
Install `shinypak` using `pak` (or `remotes`):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
```

Review the chapters in each section:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
library(shinypak)
list_apps(regex = '^09')
```

Launch an app with `launch()`

```{r}
#| code-fold: false 
#| eval: false
launch(app = "09.4_inst-prod")
```

Download an app with `get_app()`

```{r}
#| code-fold: false 
#| eval: false
get_app(app = "09.4_inst-prod")
```

::: 

::::

## External files {#sec-external-files}

When we launch our app, we see the `shiny.png` logo in `www/` is not being loaded into the UI when the application is displayed: 

```{r}
#| eval: false
#| code-fold: false
launch_app(run = 'p')
```

:::: {.column-body-outset-right}

![`www/shiny.png` is not accessible when we launch the app](images/external_initial_launch_app.png){width='100%' fig-align='center'}

::::

Serving the contents of `www` was previously being handled automatically by Shiny's internal functions, but now that we've converted our application into a package, we'll need to explicitly tell the application where to find these resources.[^external-common-problem]

[^external-common-problem]: This is a common problem developers encounter when converting shiny app into app-packages. See [this popular thread](https://community.rstudio.com/t/shiny-app-as-a-package-directory-structure-and-www-folder/135323/8) on Posit Community.

### Package files 

While developing in RStudio, we get used to accessing and interacting with our package files from the **Files** pane:

!['Source' files `shinyrPkgs` in **Files** pane](images/external_files_pane.png){width='80%'}

However, these aren't the files that get bundled into an R package. We can follow the path in that is displayed in the **Build** pane when we install our package (or use [<kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd>]{style="font-weight: bold; font-size: 0.80em"}) to view the *installed* package files:

```sh
==> R CMD INSTALL --preclean --no-multiarch --with-keep.source shinyrPkgs

* installing to library ‘/path/to/installed/package/shinyrPkgs/’ # <1>
* installing *source* package ‘shinyrPkgs’ ...
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE 
```
1. This is the location of the installed version of `shinyrPkgs` 

[**Our _installed_ package files**]{style="font-size: 1.30em;"}

Below are folder trees for our *source* package and our *installed* package:[^path-package]

[^path-package]: `fs::path_package(package = "shinyrPkgs")` returns the path to your installed package and `fs::dir_tree()` function will print a folder tree. 

:::: {layout="[50, 50]"}

:::{style="font-size: 0.90em;"} 

``` sh
# source
shinyrPkgs/
├── DESCRIPTION
├── NAMESPACE
├── R
│   ├── data.R
│   ├── display_type.R
│   ├── mod_scatter_display.R
│   ├── mod_var_input.R
│   ├── launch_app.R
│   ├── movies_server.R
│   ├── movies_ui.R
│   └── scatter_plot.R
├── README.md
├── app.R
├── data
│   ├── movies.RData
│   └── movies.rda
├── inst
│   └── extdata
│       └── movies.fst
├── man
│   ├── display_type.Rd
│   ├── mod_scatter_display_server.Rd
│   ├── mod_scatter_display_ui.Rd
│   ├── mod_var_input_server.Rd
│   ├── mod_var_input_ui.Rd
│   ├── movies.Rd
│   ├── launch_app.Rd
│   ├── movies_server.Rd
│   ├── movies_ui.Rd
│   └── scatter_plot.Rd
├── shinyrPkgs.Rproj
└── www
    └── shiny.png
```

:::

:::{style="font-size: 0.90em;"} 

``` sh
# installed 
shinyrPkgs/
├── DESCRIPTION
├── INDEX
├── Meta
│   ├── Rd.rds
│   ├── data.rds
│   ├── features.rds
│   ├── hsearch.rds
│   ├── links.rds
│   ├── nsInfo.rds
│   └── package.rds
├── NAMESPACE
├── R
│   ├── shinyrPkgs
│   ├── shinyrPkgs.rdb
│   └── shinyrPkgs.rdx
├── data
│   ├── Rdata.rdb
│   ├── Rdata.rds
│   └── Rdata.rdx
├── extdata
│   └── movies.fst
├── help
│   ├── AnIndex
│   ├── aliases.rds
│   ├── shinyrPkgs.rdb
│   ├── shinyrPkgs.rdx
│   └── paths.rds
└── html
    ├── 00Index.html
    └── R.css
```

:::

::::

The installed version of our package includes some of the same 'source' files we've been working with (i.e., the `NAMESPACE` and `DESCRIPTION`), but many of these files aren't included in the installed version (i.e., the `.R` and `.Rd` files, the `man/` folder). 

### `system.file()` {#sec-external-system-file}

Hopefully seeing the contents of an installed package demystifies what happens when we run `devtools::install()`. When we want to add non-R package files to our app (like our `shiny.png` logo), we store these files in the `inst/` folder and access them with `system.file()`.[^inst-r-pkgs] 

[^inst-r-pkgs]: Read more about sub-directories to avoid in `inst/` in [R Packages, 2ed](https://r-pkgs.org/misc.html#sec-misc-inst).

> "*The contents of the `inst/` subdirectory will be copied recursively to the installation directory. Subdirectories of `inst/` should not interfere with those used by R (currently, `R/`, `data/`, `demo/`, `exec/`, `libs/`, `man/`, `help/`, `html/` and `Meta/`, and earlier versions used `latex/`, `R-ex/`).*" - [Writing R extensions, Package subdirectories](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Package-subdirectories)

`system.file()` gives us access to the package files *on installation* (i.e., the files we saw in the folder tree above). In the [data](data.qmd) chapter, we used `system.file()` to access the `movies.fst` file in `inst/extdata/`: 

```{r}
#| eval: false 
#| code-fold: false
fst::read_fst(
  path = system.file("extdata/", "movies.fst", 
                     package = "shinyrPkgs")
  )
```

As we can see, the `movies.fst` has two locations: the 'source' package location, and the 'installed' location.

:::{layout="[45,55]" layout-valign="top"}

#### Source package files {.unnumbered}



``` sh
# What we see
inst/
  └── extdata/
        └── movies.fst
```

#### Installed package files {.unnumbered}

``` sh
# What R sees
└── extdata/
      └── movies.fst
```

:::

`system.file()` is accessing `movies.fst` from the **installed** location. To include the contents of `www/` in our app-package, we'll need to move `www/` into `inst/`, then access it's contents with `system.file()`.[^inst-view]

[^inst-view]: The key takeaway here is that the `inst/` subfolders and files are available *unchanged* in the installed version (with the `inst/` folder omitted.).

### [`addResourcePath()`]{style="font-size: 0.95em;"} {#sec-external-add-resource-path}

The `addResourcePath()` function will add a "*directory of static resources to Shiny's web server*." In `shinyrPkgs`, want to add the `www` directory that includes the `shiny.png` file.[^add-resource-path-4]

[^add-resource-path-4]: You can read more about adding external resources in the [documentation for `addResourcePath()`](https://shiny.posit.co/r/reference/shiny/latest/resourcepaths).

::: {layout="[10,-1, 10]" layout-valign="top"}

#### [Current `www` location]{style="font-size: 0.95em;"} {.unnumbered}

``` sh
├── inst
│   └── extdata
│       └── movies.fst
└── www
    └── shiny.png
```

#### [New `www` location]{style="font-size: 0.95em;"} {.unnumbered}

``` sh
inst/
  ├── extdata/
  │   └── movies.fst
  └── www/
      └── shiny.png
```

:::

In `R/movies_ui.R`, we'll include the `addResourcePath()` at the top of the `tagList()` and reference the image in `img()` using only the subfolder in the path:

```{r}
#| eval: false 
#| code-fold: false
movies_ui <- function() {
  addResourcePath(
    prefix = 'www', # <1> 
    directoryPath = system.file('www', package = 'shinyrPkgs')) # <2> 
  tagList(
    fluidPage(
      theme = shinythemes::shinytheme("spacelab"),
      titlePanel(
        div(
          img(
            src = "www/shiny.png", # <3> 
            height = 60,
            width = 55,
            style = "margin:10px 10px"
            ), 
         "Movie Reviews"
        )
      ),
      sidebarLayout(
        sidebarPanel(
          mod_var_input_ui("vars")
        ),
        mainPanel(
          mod_scatter_display_ui("plot")
        )
      )
    )
  )
} 
```
1. Prefix (or folder name) of installed location  
2. Path to installed package files  
3. Reference to installed package image file   

After loading, documenting, and installing, the application now includes the image file.

```{r}
#| label: hot_key_load_all_00
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```

```{r}
#| label: git_box_09.1_inst-www
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "launch",
  fig_pw = '75%', 
  branch = "09.1_inst-www", 
  repo = 'shinyrPkgs')
```

```{r}
#| eval: false 
#| code-fold: false
library(shinyrPkgs)
launch_app(run = 'p')
```


:::: {.column-body-outset-right}

![`inst/www` accessible with `addResourcePath()`](images/external_www_launch_app.png){width='100%' fig-align='center'}

::::


The `inst/` folder is very versatile and can also be used to store a variety of files we're using in our application (CSS styling, JavaScript functions, HTML, etc). In the following sections, I'm going to demonstrate using `inst/` for storing alternative UI layouts, data, and production versions of our application.

## [`inst/bslib`]{style="font-size: 0.95em;"} {#sec-external-inst-bslib}

We can use `inst/` to store alternative files and then configure our UI function to test different layouts. During development, you might want a version of your app with the exact same functionality, but a different UI layout.[^layouts-git] 

[^layouts-git]: As the development of your application progresses, you can (and should) keep different versions of your application in separate Git branches. But I've also found using the `inst/` folder for those early stages of developing is helpful. 

```{r}
#| label: git_launch_09.2_inst-bslib
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "launch",
  branch = "09.2_inst-bslib")
```

In the example below, I've included a second optional UI layout that uses a [`bslib`](https://rstudio.github.io/bslib/index.html) theme in `movies_ui()`. The `bslib` argument includes an alternate image file (stored in `inst/www/bootstrap.png`):

```{r}
#| label: co_box_bslib
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o", 
  look = "default", hsize = "1.15", size = "1.10",
  header = "Dependency watch!",
  contents = "
Remember to include the `bslib` and `sass` packages to your `DESCRIPTION` with `usethis::use_package()`.
",
  fold = TRUE
)
```


```{r}
#| eval: false 
#| code-fold: show 
#| code-summary: 'show/hide movies_ui()'
movies_ui <- function(bslib = FALSE) {
  addResourcePath( # <1>
    prefix = 'www', 
    directoryPath = system.file('www', package = 'shinyrPkgs')) # <1>
  if (isFALSE(bslib)) {
  tagList( # <2>
    bslib::page_fillable(
      h1("Movie Reviews"),
      bslib::layout_sidebar(
        sidebar =
          bslib::sidebar(
            title = tags$h4("Sidebar inputs"),
            img(
              src = "shiny.png",
              height = 60,
              width = 55,
              style = "margin:10px 10px"
            ),
            mod_var_input_ui("vars")
          ),
        bslib::card(
          full_screen = TRUE,
          bslib::card_header(
            tags$h4("Scatter Plot")
          ),
          bslib::card_body(fillable = TRUE,
            mod_scatter_display_ui("plot")
          ),
          bslib::card_footer(
            tags$blockquote(
              tags$em(
                tags$p(
                  "The data for this application comes from the ",
                  tags$a("Building web applications with Shiny",
                    href = "https://rstudio-education.github.io/shiny-course/"
                  ),
                  "tutorial"
                )
              )
            )
          )
        )
      )
    )
  ) # <2>
  } else {
    tagList( # <3>
      bslib::page_fillable(
        title = "Movie Reviews (bslib)",
        theme = bslib::bs_theme(
          bg = "#101010",
          fg = "#F6F5F5",
          primary = "#EE6F57",
          secondary = "#32E0C4",
          success = "#FF4B5C",
          base_font = sass::font_google("Ubuntu"),
          heading_font = sass::font_google("Ubuntu")
        ),
        bslib::layout_sidebar(
          sidebar = bslib::sidebar(
            open = TRUE,
            mod_var_input_ui("vars")
          ),
          bslib::card(
            full_screen = TRUE,
                bslib::card_header(
                  img(src = "www/bootstrap.png", # <4>
                  height = 80,
                  width = 100,
                  style = "margin:10px 10px")
              ),
             bslib::card_body(fillable = TRUE,
                 mod_scatter_display_ui("plot")
            )
          )
        )
      )
    ) # <3>
  }
} 
```
1. Include `inst/www` resources  
2. Standard `fluidPage()`    
3. `bslib` layout   
4. Reference to alternate image (`bootstrap.png`)   

```{r}
#| label: dev_key_load_all_01
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```

This alternate version of `launch_app()` uses the same modules and utility functions as the previous versions, but when `bslib = TRUE`, the app displays the alternate UI layout:

```{r}
#| eval: false 
#| code-fold: false
launch_app(run = 'p', bslib = TRUE)
```

:::: {.column-body-outset-right}

::: {#fig-external_bslib_launch_app}
![`launch_app()` with logo](images/external_bslib_launch_app.png){#fig-external_bslib_launch_app width='100%' fig-align='center'}

`inst/www/bootstrap.png` image from `movies_ui()`
:::

::::


The example above was a simple, but using `inst/` to hold alternate layouts that can be displayed with a single argument is a great tool when demoing versions for stakeholders.
 
## [`inst/dev`]{style="font-size: 0.95em;"} {#sec-external-inst-dev}

It's not uncommon to be working on an application that will display data from multiple sources. In these situations, we might want to store the development files in the `inst/dev` folder.

```{r}
#| label: git_launch_09.3_inst-dev
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "launch",
  branch = "09.3_inst-dev")
```

### [`tidy_movies` data]{style="font-size: 0.95em;"} 

The 'development' application in `shinyrPkgs` uses a tidy version of the [`ggplot2movies::movies` data](https://cran.r-project.org/web/packages/ggplot2movies/index.html), which we created in the [`data-raw/tidy_movies.R`](https://github.com/mjfrigaard/shinyrPkgs/blob/09.3_inst-dev/data-raw/tidy_movies.R) file.[^raw-data-5]

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide data-raw/tidy_movies.R'
## code to prepare the `tidy_movies` dataset goes here
# load packages --------------------
library(fst)

make_tidy_ggp2_movies <- function(movies_data_url) {
  movies_data <- read.csv(file = movies_data_url)
  # specify genre columns
  genre_cols <- c(
    "Action", "Animation",
    "Comedy", "Drama",
    "Documentary", "Romance",
    "Short"
  )
  # calculate row sum for genres
  movies_data$genre_count <- rowSums(movies_data[, genre_cols])
  # create aggregate 'genres' for multiple categories
  movies_data$genres <- apply(
    X = movies_data[, genre_cols],
    MARGIN = 1,
    FUN = function(row) {
      genres <- names(row[row == 1])
      if (length(genres) > 0) {
        return(paste(genres, collapse = ", "))
      } else {
        return(NA)
      }
    }
  )
  # format variables
  movies_data$genre_count <- as.integer(movies_data$genre_count)
  movies_data$genre <- ifelse(test = movies_data$genre_count > 1,
    yes = "Multiple genres",
    no = movies_data$genres
  )
  movies_data$genre <- as.factor(movies_data$genre)
  movies_data$mpaa <- factor(movies_data$mpaa,
    levels = c("G", "PG", "PG-13", "R", "NC-17"),
    labels = c("G", "PG", "PG-13", "R", "NC-17")
  )

  # reduce columns to only those in graph
  movies_data[, c(
    "title", "year", "length", "budget",
    "rating", "votes", "mpaa", "genre_count",
    "genres", "genre"
  )]
}

tidy_movies <- make_tidy_ggp2_movies("https://raw.githubusercontent.com/hadley/ggplot2movies/master/data-raw/movies.csv")

# save to inst/dev/
fst::write_fst(x = tidy_movies, path = "inst/dev/tidy_movies.fst")
```

[^raw-data-5]: We covered the `data-raw/` folder in the [Data chapter](data.qmd), and you can read more about it [here in R packages, 2ed](https://r-pkgs.org/data.html#sec-data-data-raw.)

### [`inst/dev/R`]{style="font-size: 0.95em;"}

We can place the application modules, UI, and server functions in [`inst/dev/R`](https://github.com/mjfrigaard/shinyrPkgs/tree/09.3_inst-dev/inst/dev/R). Both functions in the `dev/` display module has been re-written to add functionality for importing the `tidy_movies.fst` data file and an option to removing missing values from the graph.  

Any of the functions from `shinyrPkgs` can be used in the `dev/` modules with explicit namespacing (i.e., `shinyrPkgs::fun()`). For example, `dev_mod_vars_ui()` contains choices for the columns in the `tidy_movies` data, but there's no need to re-write the `mod_var_input_server()` function.[^export-modules-6]

[^export-modules-6]: This requires exporting `mod_var_input_server()` with `@export` in the `R/` folder.

The [`app.R` file](https://github.com/mjfrigaard/shinyrPkgs/blob/09.3_inst-dev/inst/dev/app.R) will contain the call to `shinyApp()`, and any other packages we'll need to launch the application. The data and alternative image file can be placed in the root folder (with the `app.R` file):

``` sh
inst/dev
├── R
│   ├── devServer.R
│   ├── devUI.R
│   ├── dev_mod_scatter.R
│   └── dev_mod_vars.R
├── app.R
├── imdb.png
└── tidy_movies.fst

2 directories, 7 files
```

### Launch [`dev`]{style="font-size: 0.95em;"} {#sec-inst-dev-launch}

Finally, we'll launch the development data app with it's own standalone function, `ggp2_launch_app()`. This function is similar to `launch_app()`, but the `appDir` argument is set to the location of the development files (which we locate with `system.file()`).

```{r}
#| label: git_box_09.3_inst-dev
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "launch",
  fig_pw = '75%', 
  branch = "09.3_inst-dev", 
  repo = 'shinyrPkgs')
```

```{r}
#| eval: false 
#| code-fold: show
#| code-summary: 'show/hide R/ggp2_launch_app.R'
#' Development `ggplot2movies` app standalone function
#'
#' Wrapper function for `shinyAppDir()`
#' 
#' @param test logical, run in `test.mode`? Defaults to `TRUE`.
#' 
#' @return shiny app
#' 
#'
#' @export
ggp2_launch_app <- function(options = list(), run = "w") {
  if (interactive()) {
    display_type(run = run)
  } 
    shinyAppDir(
    appDir = system.file("dev",
      package = "shinyrPkgs"
    ),
    options = options
  )
}
```

<br>

After loading, documenting, and installing, we'll run the development data app:

```{r}
#| label: dev_key_load_all_02
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```


```{r}
#| code-fold: false
#| eval: false
ggp2_launch_app(run = 'p')
```


:::: {.column-body-outset-right}

::: {#fig-external_ggp2_launch_app}
![`ggplot2_launch_app()`](images/external_ggp2_launch_app.png){#fig-external_ggp2_launch_app width='100%' fig-align='center'}

`inst/dev/` app with `dev_movies_ui()`
:::

::::

I've been using different colors and themes for alternative applications above. This can be a quick and easy way to differentiate the versions of your application.

## [`inst/prod`]{style="font-size: 0.95em;"} {#sec-external-inst-prod}

It's also possible to have a folder dedicated for deploying the application in an app-package. 

```{r}
#| label: git_box_09.4_inst-prod
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "launch",
  fig_pw = '75%', 
  branch = "09.4_inst-prod", 
  repo = 'shinyrPkgs')
```

### [`prod` data]{style="font-size: 0.95em;"} 

This folder can be named `inst/prod/` or `inst/deploy`, and it can contain a version of your application that's 'fit for public consumption.' In `inst/prod/app` I've created an `app.R` file:


```{bash}
#| eval: false
#| code-fold: false
inst/
  └── prod/
      └── app
          └── app.R
          
2 directories, 1 file
```

### [`prod/app/app.R`]{style="font-size: 0.95em;"} 

`app.R` includes a call to `shinyApp()` with the ui and server functions (explicitly namespaced from your app-package):

```{r}
#| eval: false
#| code-fold: show 
#| code-summary: 'show/hide prod/app/app.R'
shinyApp(
  ui = shinyrPkgs::movies_ui(bslib = TRUE), 
  server = shinyrPkgs::movies_server)
```

I'll use the `bslib` version from above to differentiate it from the other applications in `shinyrPkgs`. 

### [Deploying `prod`]{style="font-size: 0.95em;"} {#sec-inst-prod-deploy}

Back in the root `app.R` file, we can use `shinyAppDir()` and `system.file()` to return the app object from `prod/app/app.R`:

```{r}
#| eval: false
#| code-fold: show 
#| code-summary: 'show/hide app.R'
# set option to turn off loadSupport() ----
withr::with_options(new = list(shiny.autoload.r = FALSE), code = {
  if (!interactive()) {
    sink(stderr(), type = "output")
    tryCatch(
      expr = {
        # load package ----
        library(shinyrPkgs)
      },
      error = function(e) {
        # load R/ folder ----
        pkgload::load_all()
      }
    )
    # create shiny object from prod/app ----
    shinyAppDir(appDir = 
        system.file("prod/app", package = "shinyrPkgs"))
  } else {
    # load R/ folder ----
    pkgload::load_all()
    # create shiny object ----
    shiny::shinyApp(
      ui = movies_ui,
      server = movies_server
    )
  }
})
```

```{r}
#| label: dev_key_load_all_03
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```

To deploy the app, call `rsconnect::deployApp()` in the console and supply an `appName`:

```{r}
#| eval: false
#| code-fold: false 
rsconnect::deployApp(appName = 'moviesApp-prod')
```

The deployment log will look something like this: 

```{verbatim}
─> rsconnect::deployApp(appName = 'moviesApp-prod')
── Preparing for deployment ───────────────────────────────────────────────────────────────────
✔ Deploying "moviesApp-prod" using "server: shinyapps.io / username: paradigmdata"
ℹ Creating application on server...
✔ Created application with id 12382917
ℹ Bundling 39 files: .Rbuildignore, app.R, data/movies.rda, data/movies.RData,
data-raw/tidy_movies.R, DESCRIPTION, inst/dev/app.R, inst/dev/imdb.png, 
inst/dev/R/dev_mod_scatter.R, inst/dev/R/dev_mod_vars.R, inst/dev/R/devServer.R,
inst/dev/R/devUI.R, inst/dev/tidy_movies.fst, inst/extdata/movies.fst, 
inst/prod/app/app.R, inst/www/bootstrap.png, inst/www/shiny.png, 
man/display_type.Rd, …, R/scatter_plot.R, and README.md
ℹ Capturing R dependencies with renv
✔ Found 69 dependencies
✔ Created 1,567,570b bundle
ℹ Uploading bundle...
✔ Uploaded bundle with id 8922917
── Deploying to server ────────────────────────────────────────────────────────────────────────
Waiting for task: 1442064759
  building: Building image: 10835937
  building: Fetching packages
  building: Building package: fstcore
  building: Building package: fst
  building: Installing packages
  building: Installing files
  building: Pushing image: 10835937
  deploying: Starting instances
  success: Stopping old instances
── Deployment complete ────────────────────────────────────────────────────────────────────────
✔ Successfully deployed to <https://paradigmdata.shinyapps.io/moviesApp-prod/>
```

You can see a deployed version of this application [here](https://paradigmdata.shinyapps.io/moviesApp-prod/)

```{r}
#| label: co_box_install
#| echo: false
#| results: asis
#| eval: true
#| include: true
co_box(
  color = "g", fold = TRUE,
  look = "default", hsize = "1.15", size = "1.10",
  header = "Other Uses of `inst/`", 
  contents = "
I found exploring the structure of the `inst/` folder in other packages incredibly helpful in understanding how they work 'under the hood.' 
  
- For example, the `inst/extdata/` folder in the [`readr` package](https://readr.tidyverse.org/) holds a variety of datasets:
  
    \`\`\` sh
    /path/to/install/Library/R/x86_64/4.2/library/readr/
      
    extdata/
      ├── challenge.csv
      ├── chickens.csv
      ├── epa78.txt
      ├── example.log
      ├── fwf-sample.txt
      ├── massey-rating.txt
      ├── mini-gapminder-africa.csv
      ├── mini-gapminder-americas.csv
      ├── mini-gapminder-asia.csv
      ├── mini-gapminder-europe.csv
      ├── mini-gapminder-oceania.csv
      ├── mtcars.csv
      ├── mtcars.csv.bz2
      ├── mtcars.csv.zip
      └── whitespace-sample.txt
    
    1 directory, 15 files
    \`\`\`
  
- These files are used in [`readr::readr_example()`](https://github.com/tidyverse/readr/blob/5ac729aa9a70fef297a634d2332ff8ff1af874fb/R/example.R)): 
  
    \`\`\` r
    #' Get path to readr example
    #'
    #' readr comes bundled with a number of sample files in its `inst/extdata`
    #' directory. This function make them easy to access
    #'
    #' @param file Name of file. If `NULL`, the example files will be listed.
    #' @export
    #' @examples
    #' readr_example()
    #' readr_example('challenge.csv')
    readr_example <- function(file = NULL) {
      if (is.null(file)) {
        dir(system.file('extdata', package = 'readr'))
      } else {
        system.file('extdata', file, package = 'readr', mustWork = TRUE)
      }
    }
    \`\`\`
  

")
```

## Recap {.unnumbered}

This chapter had covered how to include external files and resources (i.e., what was previously stored in the `www/` folder of a regular Shiny app project) in your app-package with `addResourcePath()` and `system.file()`.

We've also covered how to use the `inst/` folder to include alternative files, development and production/deployment versions of your app. You can now launch the following applications from `shinyrPkgs`: 

**Standard application with/without test mode**

```{r}
#| eval: false
#| code-fold: false
library(shinyrPkgs)
launch_app(options = list(test.mode = TRUE))
# or 
launch_app(options = list(test.mode = FALSE))
```

**[`inst/bslib`]{style="font-size: 1.05em;"}: an application with an alternative layout (with/without test mode)**

```r
library(shinyrPkgs)
launch_app(options = list(test.mode = TRUE), bslib = TRUE)
# or 
launch_app(options = list(test.mode = FALSE), bslib = TRUE) 
```

**[`inst/dev`]{style="font-size: 1.05em;"}: an application using a 'development' dataset (with/without test mode)**

```{r}
#| eval: false
#| code-fold: false
library(shinyrPkgs)
ggp2_launch_app(options = list(test.mode = TRUE))
# or 
ggp2_launch_app(options = list(test.mode = FALSE))
```

**[`inst/prod`]{style="font-size: 1.05em;"}: An `app.R` file for launching a 'production' version of our app.**

```{r}
#| eval: false
#| code-fold: false
library(shinyrPkgs)
rsconnect::deployApp()
```

In the next section, we're going to cover testing the code in a shiny app-package.  

```{r}
#| label: co_box_isnt_recap
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g", fold = FALSE,
  look = "default", hsize = "1.15", size = "1.10",
  header = "Recap: `inst` & `www` folders",
  contents = "
- **`inst/`**: the `inst/` folder is installed with your app-package and will be accessible to users, so it's a great location for files you want contained in your app, but don't fit into the standard R package structure.\n
  - `inst/` is also a great location for alternative versions of applications (i.e., `inst/app/dev` or `inst/app/prod/`).\n
  
- **`system.file()`**: constructs a path to files or folders within **installed packages** and is especially useful when working with external datasets (i.e., `inst/extdata/`) or other external resources included with your app-package (i.e., `inst/www/`).
  
- **`www`**: used for external static resources in shiny apps. shiny will automatically serve files under the `www/` directory, but in app-packages we need to explicitly set this location with `shiny::addResourcePath()`
  
- **`addResourcePath()`**: create a `prefix` (i.e., path) for a `directoryPath` of static files to accessible in shiny's web server:

    \`\`\`sh
    # file location
    inst/
      └── www/
            └── shiny.png
    \`\`\`
  
    \`\`\`r
    # add path to app 
    addResourcePath(prefix = 'www', 
                    directoryPath = system.file('www', 
                                    package = 'shinyrPkgs'))
    # use path without 'inst/' prefix
    shiny::img(src = 'www/shiny.png')
    \`\`\`
  "
)
```


```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```
