# External files 

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "y",
  header = "Caution!",
  contents = "This section is currently being revised. Thank you for your patience."
)
```

In the previous chapter we covered including external datasets in the `inst/extdata/` folder, and accessing these files with `system.file()`. As you'll see, the `inst/` folder plays a special role in R packages, and we can leverage this role when designing the structure of our app-package.  

In this chapter we'll cover how to add external resources (i.e., the files stored and previously served from the `www/` folder) to your shiny app-packages.


```{r}
#| label: co_box_data_pkgApp
#| echo: false
#| eval: false
```

## This is your app-package

The current files and folders of `shinyAppPkg` are displayed below:

```{r}
#| label: git_box_pkgApp_06_data
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "alt",
  fig_pw = '75%', 
  branch = "06_data", 
  repo = 'shinyAppPkg')
```

::: {#fig-07_inst_files_pane}
![The 'source' files for `shinyAppPkg`](img/07_inst_files_pane.png){#fig-07_inst_files_pane width='80%' fig-align='center'}

Source files for the `shinyAppPkg` app-package
:::

If we're using the Posit Workbench IDE, the **Files** pane is how we  typically interact with the our app-package. For example, when we run `movies_app()`, we see the following: 

:::: {.column-body-outset-right}

::: {#fig-08_inst_movies_app_data_no_img}
![`movies_app()` without logo](img/08_inst_movies_app_data_no_img.png){#fig-08_inst_movies_app_data_no_img width='100%' fig-align='center'}

`www` not accessible in `shinyAppPkg`
:::

::::

The `shiny.png` logo in `www/` is not being loaded into the UI when the application is launched. Before we dive into how to add the contents of `www/` into `shinyAppPkg`, we'll take a step back and investigate what happens when a package is installed.

## This is your app-package ... *installed*

We've been running `load_all()`, `document()`, and `install()` on `shinyAppPkg`, but we haven't looked at the contents of the installed package. Reviewing the installed package will help us understand what the `system.file()` function is doing, and how we can use the `inst/` folder to include external resources to our app-package.

When we run `devtools::install()`, the output tells us where the package is being installed:

```{verbatim}
#| eval: false 
#| code-fold: false
==> R CMD INSTALL --preclean --no-multiarch --with-keep.source shinyAppPkg

* installing to library ‘/path/to/install/Library/R/x86_64/4.2/library’
```

If we add the `shinyAppPkg/` directory to the end of the path above, we can view the contents of the installed package (I'm using the `tree` command in the Terminal, but the `fs::dir_tree()` function will also print a folder tree):[^path-package-1]

[^path-package-1]: Using `fs::path_packcage(package = "shinyAppPkg")` will also return the path to your installed package.

```{bash}
#| eval: false 
#| code-fold: false
/path/to/install/Library/R/x86_64/4.2/library/shinyAppPkg/
  ├── DESCRIPTION
  ├── INDEX
  ├── Meta/
  │   ├── Rd.rds
  │   ├── data.rds
  │   ├── features.rds
  │   ├── hsearch.rds
  │   ├── links.rds
  │   ├── nsInfo.rds
  │   └── package.rds
  ├── NAMESPACE
  ├── R/
  │   ├── shinyAppPkg
  │   ├── shinyAppPkg.rdb
  │   └── shinyAppPkg.rdx
  ├── data/
  │   ├── Rdata.rdb
  │   ├── Rdata.rds
  │   └── Rdata.rdx
  ├── extdata/
  │   └── movies.fst
  ├── help/
  │   ├── AnIndex
  │   ├── aliases.rds
  │   ├── paths.rds
  │   ├── shinyAppPkg.rdb
  │   └── shinyAppPkg.rdx
  └── html/
      ├── 00Index.html
      └── R.css

7 directories, 24 files
```

The installed version of `shinyAppPkg` has many of the same files as the 'source' version we've been working on (i.e., the `NAMESPACE` and `DESCRIPTION`). It also might surprise you to see that many of the source package files aren't included in the installed version (`.R`, `.Rd` files. etc.).

Hopefully viewing this folder structure helps demystify what happens when a package is installed.[^inst-view-2] Below is the official documentation on what happens to the `inst/` folder (and it's subfolders) when a package is installed:[^inst-r-pkgs-3]

[^inst-view-2]: The key takeaway here is that the `inst/` subfolders and files are available *unchanged* in the installed version (with the `inst/` folder omitted.).

[^inst-r-pkgs-3]: Read more about sub-directories to avoid in `inst/` in [R Packages, 2ed](https://r-pkgs.org/misc.html#sec-misc-inst).

> "*The contents of the `inst/` subdirectory will be copied recursively to the installation directory. Subdirectories of `inst/` should not interfere with those used by R (currently, `R/`, `data/`, `demo/`, `exec/`, `libs/`, `man/`, `help/`, `html/` and `Meta/`, and earlier versions used `latex/`, `R-ex/`).*" - [Writing R extensions, Package subdirectories](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Package-subdirectories)

```{r}
#| label: co_box_install
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g", fold = TRUE,
  header = "Uses of `inst/` in other packages",
"
You can explore the structure of other installed packages to see how they work 'under the hood' to gain insight into how they use the `inst/` folder. 
  
- For example, the `inst/extdata/` folder in the [`readr` package](https://readr.tidyverse.org/) holds a variety of datasets:
  
    \`\`\`
    /path/to/install/Library/R/x86_64/4.2/library/readr/
      
    extdata/
      ├── challenge.csv
      ├── chickens.csv
      ├── epa78.txt
      ├── example.log
      ├── fwf-sample.txt
      ├── massey-rating.txt
      ├── mini-gapminder-africa.csv
      ├── mini-gapminder-americas.csv
      ├── mini-gapminder-asia.csv
      ├── mini-gapminder-europe.csv
      ├── mini-gapminder-oceania.csv
      ├── mtcars.csv
      ├── mtcars.csv.bz2
      ├── mtcars.csv.zip
      └── whitespace-sample.txt
    
    1 directory, 15 files
    \`\`\`
  
- These files are used in [`readr::readr_example()`](https://github.com/tidyverse/readr/blob/5ac729aa9a70fef297a634d2332ff8ff1af874fb/R/example.R)): 
  
    \`\`\`r
    #' Get path to readr example
    #'
    #' readr comes bundled with a number of sample files in its `inst/extdata`
    #' directory. This function make them easy to access
    #'
    #' @param file Name of file. If `NULL`, the example files will be listed.
    #' @export
    #' @examples
    #' readr_example()
    #' readr_example('challenge.csv')
    readr_example <- function(file = NULL) {
      if (is.null(file)) {
        dir(system.file('extdata', package = 'readr'))
      } else {
        system.file('extdata', file, package = 'readr', mustWork = TRUE)
      }
    }
    \`\`\`
  

")
```

### Using [`system.file()`]{style="font-size: 0.95em;"}

`system.file()` gives us access to the package files *on installation* (i.e., the files we see at the path above). In the previous chapter, we used `system.file()` to access the `movies.fst` file in `inst/extdata/`: 

```{r}
#| eval: false 
#| code-fold: false
dplyr::glimpse(  
  fst::read_fst(path = 
      system.file("extdata/", "movies.fst", package = "shinyAppPkg")
    )
  )
```

```{bash}
#| eval: false 
#| code-fold: true
#| code-summary: 'show/hide glimpse() of movies.fst'
fstcore package v0.9.14
(OpenMP was not detected, using single threaded mode)
Rows: 651
Columns: 34
$ title            <chr> "Filly Brown", "The Dish", "Waiting for…
$ title_type       <fct> Feature Film, Feature Film, Feature Fil…
$ genre            <fct> Drama, Drama, Comedy, Drama, Horror, Do…
$ runtime          <dbl> 80, 101, 84, 139, 90, 78, 142, 93, 88, …
$ mpaa_rating      <fct> R, PG-13, R, PG, R, Unrated, PG-13, R, …
$ studio           <fct> Indomina Media Inc., Warner Bros. Pictu…
$ thtr_rel_date    <dttm> 2013-04-18 21:00:00, 2001-03-13 21:00:…
$ thtr_rel_year    <dbl> 2013, 2001, 1996, 1993, 2004, 2009, 198…
$ thtr_rel_month   <dbl> 4, 3, 8, 10, 9, 1, 1, 11, 9, 3, 6, 12, …
$ thtr_rel_day     <dbl> 19, 14, 21, 1, 10, 15, 1, 8, 7, 2, 19, …
$ dvd_rel_date     <dttm> 2013-07-29 21:00:00, 2001-08-27 21:00:…
$ dvd_rel_year     <dbl> 2013, 2001, 2001, 2001, 2005, 2010, 200…
$ dvd_rel_month    <dbl> 7, 8, 8, 11, 4, 4, 2, 3, 1, 8, 5, 9, 7,…
$ dvd_rel_day      <dbl> 30, 28, 21, 6, 19, 20, 18, 2, 21, 14, 1…
$ imdb_rating      <dbl> 5.5, 7.3, 7.6, 7.2, 5.1, 7.8, 7.2, 5.5,…
$ imdb_num_votes   <int> 899, 12285, 22381, 35096, 2386, 333, 50…
$ critics_rating   <fct> Rotten, Certified Fresh, Certified Fres…
$ critics_score    <dbl> 45, 96, 91, 80, 33, 91, 57, 17, 90, 83,…
$ audience_rating  <fct> Upright, Upright, Upright, Upright, Spi…
$ audience_score   <dbl> 73, 81, 91, 76, 27, 86, 76, 47, 89, 66,…
$ best_pic_nom     <fct> no, no, no, no, no, no, no, no, no, no,…
$ best_pic_win     <fct> no, no, no, no, no, no, no, no, no, no,…
$ best_actor_win   <fct> no, no, no, yes, no, no, no, yes, no, n…
$ best_actress_win <fct> no, no, no, no, no, no, no, no, no, no,…
$ best_dir_win     <fct> no, no, no, yes, no, no, no, no, no, no…
$ top200_box       <fct> no, no, no, no, no, no, no, no, no, no,…
$ director         <chr> "Michael D. Olmos", "Rob Sitch", "Chris…
$ actor1           <chr> "Gina Rodriguez", "Sam Neill", "Christo…
$ actor2           <chr> "Jenni Rivera", "Kevin Harrington", "Ca…
$ actor3           <chr> "Lou Diamond Phillips", "Patrick Warbur…
$ actor4           <chr> "Emilio Rivera", "Tom Long", "Eugene Le…
$ actor5           <chr> "Joseph Julian Soria", "Genevieve Mooy"…
$ imdb_url         <chr> "http://www.imdb.com/title/tt1869425/",…
$ rt_url           <chr> "//www.rottentomatoes.com/m/filly_brown…
```

To include the contents of `www/` in our app-package, we need to use `isnt/` folder, `system.file()`, and the `shiny::addResourcePath()` function. 

## [`addResourcePath()`]{style="font-size: 0.95em;"}

```{r}
#| label: git_box_pkgApp_07_inst-www
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "standard",
  fig_pw = '75%', 
  branch = "07_inst-www", 
  repo = 'shinyAppPkg')
```

The `addResourcePath()` function will add a "*directory of static resources to Shiny's web server*." In `shinyAppPkg`, want to add the `www` directory that includes the `shiny.png` file (currently in our root (`"."`) folder).[^add-resource-path-4]

[^add-resource-path-4]: You can read more about adding external resources in the [documentation for `addResourcePath()`](https://shiny.posit.co/r/reference/shiny/latest/resourcepaths).

If we want to continue keeping external resources in the `www/` folder, we can move `www/` and it's contents into `inst/`:

```{bash}
#| eval: false 
#| code-fold: false
inst/
  ├── extdata/
  │   └── movies.fst
  └── www/
      └── shiny.png

3 directories, 2 files
```


In `R/movies_ui.R` function, we'll include the `addResourcePath()` at the top of the `tagList()` and reference the image in `img()` using only the subfolder in the path:


```{r}
#| eval: false 
#| code-fold: false
movies_ui <- function() {
  addResourcePath('www', system.file('www', package = 'shinyAppPkg'))
  tagList(
    fluidPage(
      theme = shinythemes::shinytheme("spacelab"),
      titlePanel(
        div(
          img(
            src = "www/shiny.png",
            height = 60,
            width = 55,
            style = "margin:10px 10px"
            ), 
         "Movie Reviews"
        )
      ),
      sidebarLayout(
        sidebarPanel(
          mod_var_input_ui("vars")
        ),
        mainPanel(
          mod_scatter_display_ui("plot")
        )
      )
    )
  )
} 
```

After loading, documenting, and installing, the application now includes the image file.

[<kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd> / <kbd>D</kbd> / <kbd>B</kbd>]{style="font-style: italic; font-weight: bold; font-size: 1.10em"}

```{r}
#| eval: false 
#| code-fold: false
library(shinyAppPkg)
movies_app()
```


:::: {.column-body-outset-right}

::: {#fig-07_inst_movies_app_img}
![`movies_app()` with logo](img/07_inst_movies_app_img.png){#fig-07_inst_movies_app_img width='100%' fig-align='center'}

`inst/www` accessible with `addResourcePath()`
:::

::::

## Other uses for [`inst/`]{style="font-size: 1.05em;"} 

The `inst/` folder can also be used to store files we're using in alternate versions of our application. This can include alternate images, CSS styling, JS scripts, data files, or even entirely different apps!

```{r}
#| label: git_box_pkgApp_07_dev-bslib
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  fig_pw = '75%', 
  branch = "07_dev-bslib", 
  repo = 'shinyAppPkg')
```


#### Alternate external files

We can store `inst/` alternative external files and configure our UI function to test different layouts. In the example below, I've included an optional UI layout from the [`bslib` package](https://rstudio.github.io/bslib/index.html).

The `bslib` argument in the `movies_ui()` includes an alternate image file (stored in `inst/www/bootstrap.png`):

```{r}
#| eval: false 
#| code-fold: show 
#| code-summary: 'show/hide movies_ui()'
movies_ui <- function(bslib = FALSE) {
  addResourcePath("www", system.file("www", package = "shinyAppPkg"))
  if (isFALSE(bslib)) {
    tagList(
      # I've omitted fluidPage() layout code here
    )
  } else {
    tagList(
      bslib::page_fillable(
        title = "Movie Reviews (bslib)",
        theme = bslib::bs_theme(
          bg = "#101010",
          fg = "#F6F5F5",
          primary = "#EE6F57",
          secondary = "#32E0C4",
          success = "#FF4B5C",
          base_font = sass::font_google("Ubuntu"),
          heading_font = sass::font_google("Ubuntu")
        ),
        bslib::layout_sidebar(
          sidebar = bslib::sidebar(
            mod_var_input_ui("vars")
          ),
          bslib::card(
            full_screen = TRUE,
            shiny::div(
              shiny::img(
                src = "www/bootstrap.png",
                height = 40,
                width = 50,
                style = "margin:10px 10px"
              )
            ),
            mod_scatter_display_ui("plot")
          )
        )
      )
    )
  }
}
```

This alternate version of `movies_app()` uses the same modules and utility functions as the previous versions, but when `bslib = TRUE`, the app displays the alternate UI layout:

```{r}
#| eval: false 
#| code-fold: false
shinyAppPkg::movies_app(test = FALSE, bslib = TRUE)
```

:::: {.column-body-outset-right}

::: {#fig-07_inst_bslib_app}
![`movies_app()` with logo](img/07_inst_bslib_app.png){#fig-07_inst_bslib_app width='100%' fig-align='center'}

`inst/www/bootstrap.png` image from `movies_ui()`
:::

::::



### Development versions

It's not uncommon to be working on multiple 'development' versions of an application in the same package. In these situations, we might want to store an entire applications in the `inst/` folder (like `inst/dev/` below) and launch it with `runApp()`.


```{bash}
#| eval: false 
#| code-fold: false
inst/dev/
  ├── app.R
  ├── ggp2movies.fst
  └── imdb.png

1 directory, 3 files
```

This 'development' application uses a tidy version of the [`ggplot2movies::movies` data](https://cran.r-project.org/web/packages/ggplot2movies/index.html)
  
  -   We can create this in the [`data-raw/ggp2movies.R`](https://github.com/mjfrigaard/shinyAppPkg/blob/07_dev-ggp2movies/data-raw/ggp2movies.R) file.[^raw-data-5]

[^raw-data-5]: We covered the `data-raw/` folder in the [Data chapter](https://mjfrigaard.github.io/shinyap/data.html), and you can read more about it [here in R packages, 2ed](https://r-pkgs.org/data.html#sec-data-data-raw.)

In `inst/dev/`, we can place the application's code in an [`app.R` file](https://github.com/mjfrigaard/shinyAppPkg/blob/07_dev-ggp2movies/inst/dev/app.R). 

  -   In `app.R`, we can create a new `mod_variables_ui()` development module with the correct variable names
  
```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide mod_variables_ui()'
mod_variables_ui <- function(id) {
  addResourcePath(prefix = "dev", 
    directoryPath = system.file("dev", package = "shinyAppPkg"))
    ns <- NS(id)
    tagList(
      selectInput(
        inputId = ns("y"),
        label = "Y-axis:",
        choices = c(
          "Year" = "year",
          "Length" = "length",
          "Budget" = "budget",
          "Rating" = "avg_rating",
          "Votes" = "votes"
        ),
        selected = "budget"
      ),
      selectInput(
        inputId = ns("x"),
        label = "X-axis:",
        choices = c(
          "Year" = "year",
          "Length" = "length",
          "Budget" = "budget",
          "Rating" = "avg_rating",
          "Votes" = "votes"
        ),
        selected = "avg_rating"
      ),
      selectInput(
        inputId = ns("z"),
        label = "Color by:",
        choices = c(
          "MPAA" = "mpaa",
          "Genres" = "genres"
        ),
        selected = "mpaa"
      ),
      sliderInput(
        inputId = ns("alpha"),
        label = "Alpha:",
        min = 0, max = 1, step = 0.1,
        value = 0.4
      ),
      sliderInput(
        inputId = ns("size"),
        label = "Size:",
        min = 0, max = 5, step = 0.5,
        value = 2.5
      ),
      textInput(
        inputId = ns("plot_title"),
        label = "Plot title",
        placeholder = "Enter plot title"
      )
    )
}
```

However, by including a call to `library(shinyAppPkg)` at the top of `app.R`, I can pair the `mod_variables_ui()` function with the `mod_var_input_server()` function.[^export-modules-6]

[^export-modules-6]: This requires exporting `mod_var_input_server()` with `@export` in the `R/` folder.

We'll also include the alternate image (`bootstrap.png`) and data file (created with `data-raw/ggp2movies.R`). Finally, we'll launch the development version of the app with a different standalone app function, stored in `R/ggplot2movies_app.R`.

```{r}
#| label: git_box_07_dev-ggp2movies
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  fig_pw = '75%', 
  branch = "07_dev-ggp2movies", 
  repo = 'shinyAppPkg')
```

To run this development app, I'll create the `ggplot2movies_app()` function below:

```{r}
#| eval: false 
#| code-fold: false
#' Development `ggplot2movies` app standalone function
#'
#' Wrapper function for `runApp()`
#' 
#' @param test logical, run in `test.mode`?
#' @param run where to launch app: 
#'  * `view` = launch in viewer  
#'  * `browse` = launch in external browser  
#'  * `win` = launch in window
#'  * `default` = `getOption(x = 'shiny.launch.browser')`
#' 
#' @return shiny app
#' 
#' @seealso [mod_var_input_ui()], [mod_var_input_server()], [mod_scatter_display_ui()], [mod_scatter_display_server()]
#' 
#'
#' @export
#' 
ggplot2movies_app <- function(test = TRUE, run = "default") {
  switch(EXPR = run, 
    view = options(shiny.launch.browser = .rs.invokeShinyPaneViewer),
    browser = options(shiny.launch.browser = .rs.invokeShinyWindowExternal),
    win = options(shiny.launch.browser = .rs.invokeShinyWindowViewer),
    default = getOption(x = 'shiny.launch.browser')
  )
  if (test) {
    runApp(appDir = system.file("dev", package = "shinyAppPkg"), 
           test.mode = TRUE)
  } else {
    runApp(appDir = system.file("dev", package = "shinyAppPkg"), 
           test.mode = FALSE)
  }
}
```

`ggplot2movies_app()` looks a lot like `movies_app()`, but the `appDir` argument is the location of the development application, which we provide with `system.file()`.

[<kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd> / <kbd>D</kbd> / <kbd>B</kbd>]{style="font-style: italic; font-weight: bold; font-size: 1.10em"}

After loading, documenting, and installing `shinyAppPkg`, we can run the development version using `ggplot2movies_app()`: 

:::: {.column-body-outset-right}

::: {#fig-07_inst_ggp2movies_app}
![`ggplot2movies_app()`](img/07_inst_ggp2movies_app.png){#fig-07_inst_ggp2movies_app width='100%' fig-align='center'}

`inst/dev/` app with `dev_movies_ui()`
:::

::::

You may have noticed that I've used a different color and theme for the two development examples above. I've found this can be a quick and easy way to differentiate 'development' and 'production' versions of an application. 

## Recap

```{r}
#| label: co_box_isnt_recap
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", fold = FALSE,
  header = "Recap: `inst` & `www` folders",
  contents = "
- `inst/`: the `inst/` folder is installed with your app-package and will be accessible to users, so it's a great location for files you want to contained in your app, but don't fit into the standard R package structure.
  
- `system.file()`: constructs a path to files or folders within **installed packages** and is especially useful when working with external datasets (i.e., `inst/extdata/`) or other external resources included with your app-package (i.e., `inst/www/`).
  
- `www`: used for external static resources in shiny apps. shiny will automatically serve files under the `www/` directory, but in app-packages we need to explicitly set this location with `shiny::addResourcePath()`
  
- `addResourcePath()`: create a prefix (path) for a `directoryPath` of static files to accessible in shiny's web server:

    \`\`\`
    # file location
    inst/
      └── www/
            └── shiny.png
    \`\`\`
  
    \`\`\`r
    # add path
    addResourcePath('www', system.file('www', package='shinyAppPkg'))
    # use path
    shiny::img(src = 'www/shiny.png')
    \`\`\`
  "
)
```

end `inst.qmd`
