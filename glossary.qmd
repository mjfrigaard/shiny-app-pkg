# Glossary of terms 

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r", 
  look = "minimal",
  header = "Alert",
  contents = "The contents for section are being revised. Thank you for your patience."
)
```



[App-package]{style="font-weight: bold;"}: An app-package is a package containing a shiny application. App-packages have all of the functionality of a standard R package, but also contain the files and folders required to successfully develop, run, and deploy a Shiny application. See the [Shiny](shiny.qmd) and [Packages](packages.qmd) chapters for more information.[^glossary-app-packages]

[^glossary-app-packages]: App-packages are covered in [Mastering Shiny](https://mastering-shiny.org/) and [Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/)

[External resource/file]{style="font-weight: bold;"}: In Shiny app-packages, external files or resources are files used in the application that aren't part of a standard R package. These can include images (`.jpg`, `.png`, etc.), JavaScript files (`.js`), and CSS or Sass styling (`.css`, `.sass`). See the [Resources](resources.qmd) chapter for more information.[^glossary-external-files]

[^glossary-external-files]: External resources/files are covered in the [Shiny documentation](https://shiny.posit.co/r/reference/shiny/latest/resourcepaths) and in [Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/golem.html#instappwww)


[Module]{style="font-weight: bold;"}: Shiny modules[^glossary-box-modules] are a pair of UI and server functions (linked by a shared `id`) to create a shared by isolated namespace. Using modules in a shiny application makes it possible to isolate individual components of an application during development. Additionally, since modules are functions, they can be reused throughout the application (and tested using Shiny's `testServer()` function). See the [Shiny](shiny.qmd) chapter for more information.[^glossary-modules]

[^glossary-modules]: Shiny modules are covered in the [Shiny documentation](https://shiny.posit.co/r/articles/improve/modules/), [Mastering Shiny](https://mastering-shiny.org/scaling-modules.html), and in [Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/structuring-project.html#using-shiny-modules)

[^glossary-box-modules]: Modules are also part of the [`box` package](https://klmr.me/box/) from the [`rhino` framework](https://appsilon.github.io/rhino/), but these are different from Shiny modules.

[Package]{style="font-weight: bold;"}: A directory of functions, documentation, and/or data that can be installed and loaded into an R session. R packages include the necessary dependency management (`NAMESPACE`) and metadata files (`DESCRIPTION`). In Shiny App-packages, I extend this definition to include having access to the package development tools provided by `devtools` in the Posit Workbench IDE. See the [Packages](packages.qmd) chapter for more information.[^glossary-packages]

[^glossary-packages]: Packages are covered in [Writing R Extensions](https://rstudio.github.io/r-manuals/r-exts/) and [R Packages, 2ed](https://r-pkgs.org/)

[R Project]{style="font-weight: bold;"}: Any directory of [R executable files](https://cran.r-project.org/) with an RStudio/Posit workbench project file (`.Rproj`). See the [Packages](packages.qmd) chapter for more information.[^glossary-rproj]

[^glossary-rproj]: Read more about R projects on the [Posit website](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects)

[Standalone app function]{style="font-weight: bold;"}: A standalone app function encapsulates the UI and server components of a Shiny app into a single function. App function typically end with a call to `shinyApp(ui, server, ...)` and are used to launch or deploy the the app after installing or loading the app-package.[^glossary-standalone-mastering-shiny]

[^glossary-standalone-mastering-shiny]: Standalone app functions are also covered in [Mastering Shiny](https://mastering-shiny.org/scaling-packaging.html).

[Utility/helper function]{style="font-weight: bold;"}: A utility or helper function is a non-Shiny function that is used for the business logic (i.e., data processing, manipulation, or other common operations) that supports the main functionalities of the application. See the [Shiny](shiny.qmd) and [Packages](packages.qmd) chapters for more information.[^glossary-utils-funs]

[^glossary-utils-funs]: Utility/helper function are covered in [Mastering Shiny](https://mastering-shiny.org/scaling-functions.html) and [Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/golem.html#r)
