# `golem` {#sec-golem}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r", 
  look = "minimal",
  header = "Alert",
  contents = "The contents for section are being development. Thank you for your patience."
)
```

```{r}
#| label: co_box_tldr
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", look = "minimal",
  header = "![](img/goelm.png){width='8%'} &emsp; TLDR", 
  fold = TRUE,
  contents = "
  
  1. If you're comfortable developing Shiny apps[^shiny-dev-level] and R packages[^rpkg-dev-level], `golem` can make your life easier.\n
  
  2. If you're comfortable developing Shiny apps, but haven't built many R packages, `golem` can streamline a lot of package development steps for you (but you'll probably still have to go back and learn at some point).\n
  
  3. If you're new to Shiny and comfortable developing R packages, you might find modules challenging, but there is still a lot to be ganied by adopting `golem`.\n
  
  3. If you're new to Shiny and R package development, start with [Mastering Shiny](https://mastering-shiny.org/) and the [Shiny documentation](https://shiny.posit.co/getstarted.html).\n

[^shiny-dev-level]: If your shiny apps have modules, you're (at least) an 'intermediate' developer.
  
[^rpkg-dev-level]: If you've written a package and successfully shared it with others, you're (at least) an 'intermediate' package developer.
  
  "
)
```

```{r}
#| eval: false
#| code-fold: false
install.packages("golem")
library(golem)
```


```{r}
#| label: git_box_gap
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "alt",
  fig_pw = '75%', 
  branch = "fw_gap", 
  repo = 'moviesApp')
```

Switch to the `fw_gap` branch, load, document, and install the application: 

```{r}
#| label: dev_key_all_01
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```

This chapter walks through building the `moviesApp` with the `golem` framework. I'll note various features and workflows that differ from standard package (or app-package) development. 

## `dev` files

New `golem` apps have a `dev/` folder with scripts for setting up your application, development, and launching/deploying.

```{bash}
#| eval: false
#| code-fold: false
dev
├── 01_start.R
├── 02_dev.R
├── 03_deploy.R
├── config_attachment.yaml
└── run_dev.R

1 directory, 5 files
```

The package website has each script available in vignettes: [01_start](https://thinkr-open.github.io/golem/articles/a_start.html), [02_dev](https://thinkr-open.github.io/golem/articles/b_dev.html), [03_deploy](https://thinkr-open.github.io/golem/articles/c_deploy.html)

### `dev/01_start.R`

The `dev/01_start.R` file sets up the following files and options in a `golem` app-package.

- [x] `DESCRIPTION` file   

- [x] `golem` [options](https://thinkr-open.github.io/golem/reference/golem_opts.html)

- [x] `LICENSE` file 

- [x] `README.Rmd` file 

- [x] `CODE_OF_CONDUCT.md` file 

- [x] Lifecycle badge  

- [x] `NEWS.md` file 

### `dev/02_dev.R`

- [x] Package dependencies are managed with `attachment::att_amend_desc()`, which will parse the code under `R/` and make sure the `DESCRIPTION` file is up-to-date 

- [x] Code files: new code files in golem apps can be created with helper functions.
<br>
  - [x] Modules: `add_module()` adds a `.R` file with a `mod_` prefix (an optional test can be included with the `with_test = TRUE` argument)
<br><br>
  - [x] Utility functions: utility functions can be added with `add_utils()` or `add_fct()` (also include the `with_test` option for tests). `golem_utils_` files contain commonly used UI and server functions. 
<br><br>
  - [x] Primary app UI and server functions are stored in `R/app_ui.R` and `R/app_server.R`.
<br><br>
  - [x] The standalone app function is stored in `R/run_app.R.`
<br><br>
  - [x] `shiny::loadSupport()` is disabled with `R/_disable_autoload.R` 
<br><br>
  - [x] `R/app_config.R` contains configuration functions: `app_sys()` is a wrapper for `system.file()` and `get_golem_config()` reads environment variables (`GOLEM_CONFIG_ACTIVE`) and contents of `inst/golem-config.yml`.

```{bash}
#| eval: false
#| code-fold: false
R
├── _disable_autoload.R
├── app_config.R
├── app_server.R
├── app_ui.R
├── data.R
├── golem_utils_server.R
├── golem_utils_ui.R
├── mod_plot.R
├── mod_plot_utils_server.R
├── mod_var.R
└── run_app.R

1 directory, 11 files
```
  
  
- [x] External files
<br><br>
  - [x] `WORDLIST` 
<br><br>
  - [x] `app/` files 
<br><br>
  - [x] `extdata/` files 
<br><br>
  - [x] `golem-config.yml`
  
```{bash}
#| eval: false
#| code-fold: false
inst
├── WORDLIST
├── app
│   └── www
│       ├── favicon.ico
│       └── images
│           ├── golem-hex.png
│           └── shiny.png
├── extdata
│   └── movies.RData
└── golem-config.yml

5 directories, 6 files
```

- [x] Data files
<br><br>
  - [x] `data/`
<br><br>
  - [x] `data-raw/`
  
  
```{bash}
#| eval: false
#| code-fold: false
data
└── movies.rda

1 directory, 1 file
```


```{bash}
#| eval: false
#| code-fold: false
data-raw
├── movies.R
└── movies.RData

1 directory, 2 files
```


- [x] Documentation
<br><br>
  - [x] `man/`: Function documentation
<br><br>
  - [x] `vignettes/`:

```{bash}
#| eval: false
#| code-fold: false
man
├── app_server.Rd
├── app_sys.Rd
├── app_ui.Rd
├── get_golem_config.Rd
├── golem_add_external_resources.Rd
├── mod_plot_server.Rd
├── mod_plot_ui.Rd
├── mod_var_server.Rd
├── mod_var_ui.Rd
├── movies.Rd
├── point_plot.Rd
└── run_app.Rd

1 directory, 12 files
```

```{bash}
#| eval: false
#| code-fold: false
vignettes/
└── tests_and_coverage.Rmd

1 directory, 1 file
```

- [x] Tests
<br><br>
  - [x] `README.md` 
<br><br>
  - [x] `spelling.R`
<br><br>
  - [x] `testthat`

```{bash}
#| eval: false
#| code-fold: false
tests
├── README.md
├── spelling.R
├── testthat
│   ├── _snaps
│   ├── test-golem-recommended.R
│   ├── test-golem_utils_server.R
│   ├── test-golem_utils_ui.R
│   ├── test-mod_plot.R
│   ├── test-mod_plot_utils_server.R
│   └── test-mod_var_input.R
└── testthat.R

3 directories, 9 files
```

## `golem` features  

## Recap