# `golem` {#sec-golem}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o", 
  look = "minimal",
  header = "Caution",
  contents = "The contents for section are being revised. Thank you for your patience."
)
```

```{r}
#| label: co_box_tldr
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", look = "minimal", size = '1.10', hsize = '1.30',
  header = "![](images/goelm.png){width='10%'} &emsp; The `golem` framework", 
  fold = FALSE,
  contents = "
<br>
  
-  The `golem` framework has excellent documentation in the [Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/) book and the [package website](https://thinkr-open.github.io/golem/). 
  
- `golem` app-packages come 'pre-packaged' with UI, server, and standalone app functions
  
-  The `dev/` scripts help guide app setup, development, and deployment
  
-  Development is assisted by variety of helper functions for creating modules, utility functions, js, css, etc.
  
-  Functions and files have consistent naming conventions (`mod_`, `fct_`, `utils_`, etc.)
  
- Custom functions for including external resources (in the `inst/app` folder)
  
- New `golem` app-packages come with boilerplate tests 
  
  - Helper functions include a `with_test` argument for creating tests along with new modules and utility functions
  
"
)
```

This chapter walks through building a version of the `moviesApp` with the [`golem` framework](https://thinkr-open.github.io/golem/). The resulting app-package (`gap`) is in the [`fw_gap` branch](https://github.com/mjfrigaard/moviesApp/tree/fw_gap).

```{r}
#| eval: false
#| code-fold: false
install.packages("golem")
library(golem)
```

```{r}
#| label: git_box_gap
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "standard",
  fig_pw = '75%', 
  branch = "fw_gap", 
  repo = 'moviesApp')
```

After checking out the `fw_gap` branch, be sure to load, document, and install the application.

```{r}
#| label: dev_key_all_01
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```

## `gap` (a `golem` app-package)

`gap` exports the `movies` data and the standalone app function, `run_app()`.

```{r}
#| eval: false
#| code-fold: false
library(gap)
gap::run_app()
```

::: {#fig-golem_run_app}

![`gap` movies app](images/golem_run_app.png){#fig-golem_run_app width='100%' align='center'}

After loading, documenting, and installing `gap`, launch the movies with `run_app()`
:::


In the sections below, I'll note various features and workflows that differ from standard package (or app-package) development. 

## `dev` scripts

New `golem` apps have a `dev/` folder with scripts for setting up your application, development, and launching/deploying.

```{bash}
#| eval: false
#| code-fold: false
dev
├── 01_start.R
├── 02_dev.R
└── 03_deploy.R

```

The package website has each script available in vignettes: [01_start](https://thinkr-open.github.io/golem/articles/a_start.html), [02_dev](https://thinkr-open.github.io/golem/articles/b_dev.html), [03_deploy](https://thinkr-open.github.io/golem/articles/c_deploy.html)

### Set up 

The `dev/01_start.R` file opens when the new `golem` app-package launches. Following the steps in `01_start.R` sets up the following files, folders, and options in your `golem` app-package:

- [x] `DESCRIPTION`: `golem` has a custom function for entering many of the fields we covered in the [Packages](packages.qdm) chapter [^golem-description] 

- [x] `golem` has functions that automatically set multiple options in the `golem-config.yml` [^golem-options] and package dependencies [^golem-depends]

- [x] `usethis` functions are called for a `LICENSE`[^golem-usethis-lisc], creating (and building[^golem-devtools-readme]) a `README`[^golem-usethis-readme] a `CODE_OF_CONDUCT.md`[^golem-usethis-code_of_conduct], adding a Lifecycle badge[^golem-usethis-lifecycle], and the `NEWS.md` file.[^golem-usethis-news_md] Many of these functions and files are covered in the [Whole App Game](whole_game.qmd) chapter.

- [x] If you aren't using Git, there's an option to initiate a Git repo [^golem-usethis-use-git]

- [x] The testing infrastructure is set up using the custom `golem::use_recommended_tests()` function, which creates the necessary `testthat` folders we covered in the [Test suite](test_suite.qmd) chapter [^golem-start-tests], but also adds a collection of boilerplate tests.

- [x] `golem` apps also have custom functions for creating a series of UI [^golem-start-ui-utils] and server [^golem-start-server-utils] utility functions (and their accompanying tests).

[^golem-description]: Fields are filled with [`golem::fill_desc()`](https://thinkr-open.github.io/golem/reference/fill_desc.html)

[^golem-options]: Options are set with with [`golem::set_golem_options()`](https://thinkr-open.github.io/golem/reference/golem_opts.html) 

[^golem-depends]: Dependencies are installed with [`golem::install_dev_deps()`](https://thinkr-open.github.io/golem/reference/install_dev_deps.html)

[^golem-usethis-lisc]: Created using `usethis::use_mit_license()`

[^golem-usethis-readme]: Created using `usethis::use_readme_rmd()`

[^golem-devtools-readme]: Built using `devtools::build_readme()`

[^golem-usethis-code_of_conduct]: Created using `usethis::use_code_of_conduct()`

[^golem-usethis-lifecycle]: Created using `usethis::use_lifecycle_badge()`

[^golem-usethis-news_md]: Created using `usethis::use_news_md()`

[^golem-usethis-use-git]: Initialize Git using `usethis::use_git()`

[^golem-start-tests]: Add test folder and files using [`golem::use_recommended_tests()`](https://thinkr-open.github.io/golem/reference/use_recommended.html)

[^golem-start-ui-utils]: Create UI utility functions using [`golem::use_utils_ui()`](https://thinkr-open.github.io/golem/reference/utils_files.html)

[^golem-start-server-utils]: Create server utility functions using [`golem::use_utils_server()`](https://thinkr-open.github.io/golem/reference/utils_files.html)

### Development 

After setting up the `golem` app-package with `dev/01_start.R`, the `dev/02_dev.R` file opens and contains the following functions/options for developing your application. 

- [x] **Package dependencies**: imports are managed with the [`attachment`](https://thinkr-open.github.io/attachment/index.html) package[^golem-attachment]

[^golem-attachment]: `attachment::att_amend_desc()` parses the code under `R/` and make sure the `DESCRIPTION` file is up-to-date 

- [x] **Code files**: new code files in `golem` apps can be created with a variety of helper functions.
<br><br>
  - [x] **Modules**: [`add_module()`](https://thinkr-open.github.io/golem/reference/add_module.html) adds a `.R` file with a `mod_` prefix (an optional test can be included with the `with_test = TRUE` argument)
<br><br>
  - [x] **Utility functions**: utility functions can be added with [`add_utils()` or `add_fct()`](https://thinkr-open.github.io/golem/reference/file_creation.html) (also include the `with_test` option for tests). `golem_utils_*` files contain commonly used UI and server functions. 
<br><br>
  - [x] The primary app UI and server functions are stored in `R/app_ui.R` and `R/app_server.R`.
<br><br>
  - [x] The standalone app function is stored in `R/run_app.R.`
<br><br>
  - [x] `R/_disable_autoload.R` disables [`shiny::loadSupport()`](https://shiny.posit.co/r/reference/shiny/1.7.1/loadsupport) (an option we covered in the [Launch](launch.qmd) chapter)
<br><br>
  - [x] `R/app_config.R` contains configuration functions:  
<br>
      -   `app_sys()` is a wrapper for `system.file()` 
<br><br>
      -   `get_golem_config()` reads environment variables (i.e., [`GOLEM_CONFIG_ACTIVE`](https://engineering-shiny.org/golem.html#golem_config-vs-golem_options)) and the contents of `inst/golem-config.yml`:

```{bash}
#| eval: false
#| code-fold: false
R
├── _disable_autoload.R # <1>
├── app_config.R # <2>
├── app_server.R # <3>
├── app_ui.R # <3>
├── data.R # <4>
├── golem_utils_server.R # <5>
├── golem_utils_ui.R # <5>
├── mod_plot.R # <6>
├── mod_plot_utils_server.R # <6>
├── mod_var.R # <7>
└── run_app.R # <8>

1 directory, 11 files
```
1. Turn off `loadSupport()`  
2. Configure app functions 
3. App UI and server functions   
4. Data documentation   
5. `golem` utility functions   
6. Scatter plot module  
7. Variable input module   
8. Standalone app function  
  
- [x] **External files**: adding external files is handled with `golem_add_external_resources()`, which uses the same methods we covered in the [External files](external.qmd) chapter.[^golem-add-external-files]  
<br>
  - [x] `WORDLIST`: includes the word '`golem`' and is an artifact from `spellcheck` argument in [`use_recommended_tests()`](https://thinkr-open.github.io/golem/reference/use_recommended.html). [^golem-wordlist] 
<br><br>
  - [x] `app/` contains the application files. [^golem-inst-app] 
<br><br>
  - [x] `extdata/` contains external data files. [^golem-inst-extdata] 
<br><br>
  - [x] `golem-config.yml` is used to set various configuration options. [^golem-inst-config] 
  
  
[^golem-add-external-files]: `golem_add_external_resources()` is a wrapper for `golem::add_resource_path()`, which is a wrapper for `shiny::addResourcePath()` (and `app_sys()` is a wrapper for `system.file()`).

[^golem-wordlist]: The [`use_recommended_tests()`](https://thinkr-open.github.io/golem/reference/use_recommended.html) is run in the `dev/01_start.R` file and if `spellcheck` is `TRUE`, creates the `tests/spelling.R` file and the `inst/WORDLIST` file.

[^golem-inst-app]: the `app/` folder is used to add external resources to the application (similar to the previous versions of `moviesApp`).

[^golem-inst-extdata]: This contains the `RData` file for the original movies data.

[^golem-inst-config]: `golem` apps use a `golem-config.yml` file for setting various options. These are initially set with `set_golem_options()` (and based on the [`config` package](https://rstudio.github.io/config/))
  
```{bash}
#| eval: false
#| code-fold: false
inst
├── WORDLIST
├── app
│   └── www
│       ├── favicon.ico
│       ├── golem-hex.png
│       └── shiny.png
├── extdata
│   └── movies.RData
└── golem-config.yml

4 directories, 6 files
```

- [x] **Data**: the data in `golem` app-packages function like the data folder and files in a standard R package we covereed in the [Data](data.qmd) chapter.
<br><br>
  - [x] `data/`: contains the `movies.rda` file used in the application 
<br><br>
  - [x] `data-raw/`: `movies.R` reads in `data-raw/movies.RData` and creates `data/movies.rda`
  
  
```{bash}
#| eval: false
#| code-fold: false
data
└── movies.rda

1 directory, 1 file
```


```{bash}
#| eval: false
#| code-fold: false
data-raw
├── movies.R
└── movies.RData

1 directory, 2 files
```


- [x] **Documentation**: the `roxygen2` documentation in `golem` app-package files comes with boilerplate tags and descriptions similar to those covered in the [Documentation](document.qmd) chapter.
<br><br>
  - [x] `man/`: By default, modules created with [`add_module()`](https://thinkr-open.github.io/golem/reference/add_module.html) aren't exported [^golem-nord]
<br><br>
  - [x] `vignettes/`: Package vignettes in `golem` app-packages operate like vignettes in standard R packages. 
  
[^golem-nord]: The `noRd` tag is added to module files created with `add_module()`, but you can export these functions by setting the `export` argument to `TRUE`. `@importFrom` is used to import `NS()` and `tagList()`.

```{bash}
#| eval: false
#| code-fold: false
man
├── app_server.Rd # <1>
├── app_sys.Rd # <1>
├── app_ui.Rd # <1>
├── get_golem_config.Rd # <1>
├── golem_add_external_resources.Rd # <1>
├── mod_plot_server.Rd # <2>
├── mod_plot_ui.Rd # <2>
├── mod_var_server.Rd # <2>
├── mod_var_ui.Rd # <2>
├── movies.Rd # <3>
├── point_plot.Rd # <2>
└── run_app.Rd # <4>

1 directory, 12 files
```
1. These come 'pre-packaged' in `golem` apps 
2. Module and utility functions  
3. Data documentation 
4. The 'pre-packaged' standalone app function is the only export from `golem` apps.

```{bash}
#| eval: false
#| code-fold: false
vignettes/
└── tests_and_coverage.Rmd

1 directory, 1 file
```

- [x] **Tests**: The testing framework for `golem` app-packages is set up with [`golem::use_recommended_tests()`](https://thinkr-open.github.io/golem/reference/use_recommended.html) in the `dev/01_start.R` script.[^golem-tests-recommended]
<br><br>
  - [x] A `tests/README.md` file is created by the [`covrpage`](https://yonicd.github.io/covrpage/) package [^golem-tests-covrpage-readme]
<br><br>
  - [x] `tests/spelling.R` adds functionality from the [`spelling`](https://docs.ropensci.org/spelling/) package [^golem-tests-spelling]
<br><br>
  - [x] `testthat`: The two `golem` utility function files (`golem_utils_server.R`, and `golem_utils_ui.R`) have accompanying tests files.
<br><br>
    - [x] The `with_test` argument creates test files for modules and utility functions. [^golem-tests-testthat]
  
[^golem-tests-recommended]: `test-golem-recommended.R` contains the recommended tests for `app_ui()`, `app_server()`, `app_sys()`, and `golem-config.yml`

 [^golem-tests-covrpage-readme]: The `covrpage` package is not on CRAN, but the development version always seems to work. Create the `tests/README.md` file with `covrpage::covrpage()`.

[^golem-tests-spelling]: The [`spelling` package](https://docs.ropensci.org/spelling/) will spell check vignettes, packages, etc.

 [^golem-tests-testthat]: `with_test = TRUE)` adds tests in the `dev/01_start.R` script. Code files created with [`golem::add_module()`](https://thinkr-open.github.io/golem/reference/add_module.html), [`golem::add_utils()`](https://thinkr-open.github.io/golem/reference/file_creation.html), and [`golem::add_fct()`](https://thinkr-open.github.io/golem/reference/file_creation.html) will also include a test file if `with_test` is set to `TRUE`.

```{bash}
#| eval: false
#| code-fold: false
tests
├── README.md
├── spelling.R
├── testthat
│   ├── _snaps
│   ├── test-golem-recommended.R # <1> 
│   ├── test-golem_utils_server.R # <2> 
│   ├── test-golem_utils_ui.R # <3>
│   ├── test-mod_plot.R # <4> 
│   ├── test-mod_plot_utils_server.R # <4>
│   └── test-mod_var_input.R # <5>
└── testthat.R

3 directories, 9 files
```
1. Created with: `golem::use_recommended_tests()`
2. Created with: `golem::use_utils_ui(with_test = TRUE)` 
3. Created with: `golem::use_utils_server(with_test = TRUE)`
4. Created with: `golem::add_module(name = 'plot', ` `with_test = TRUE, export = TRUE,` `utils = 'server')`
5. Created with: `golem::add_module(name = 'var_input',`  `with_test = TRUE, export = TRUE)`


### Deployment

When you're ready to deploy your `golem` app `dev/03_deploy.R` file contains a 'pre deployment checklist' and multiple options. 

- [ ] **devtools**: `devtools::check()` and `devtools::build()` are called.[^golem-devtools-deploy]

- [ ] **RStudio related platforms**: `golem` has functions for RStudio Connect, shinyapps.io, and Shiny server.[^golem-deploy-posit-options]

- [ ] **Posit Connect or **: arguments and options for deploying your application using `rsconnect::deployApp()`. [^golem-deploy-rsconnect-options]


[^golem-devtools-deploy]: This also includes a call to `rhub::check_for_cran()`, which may or may not be of concern for your application. 

[^golem-deploy-posit-options]: These functions will create and `app.R` file to launch and deploy your application. 

[^golem-deploy-rsconnect-options]: Includes boilerplate for `appName`, `appTitle`, `appFiles`, etc.

## `golem` features  

`golem`s helper functions and `dev` scripts make application development fast--I was able to create `gap` quickly, and all of the supporting packages (`covrpage`, `attachment`, `spelling`) make the development process faster/easier: 

1. I created the two modules (`mod_plot` and `mod_var`) with [`add_module()`](https://thinkr-open.github.io/golem/reference/add_module.html), the utility function with [`add_utils()`](https://thinkr-open.github.io/golem/reference/file_creation.html)   
2. I added the modules to the `app_ui()` and `app_server()`   
3. I moved images into `inst/app/www/`   
4. The movies data was added to `inst/extdata/`, then read into `data/` folder with the `data-raw/movies.R` file. 
5. I re-ran the [`attachment::att_amend_desc()`](https://thinkr-open.github.io/attachment/reference/att_amend_desc.html) to capture any dependencies  
6. Finally I loaded, documented, and installed the `gap` package. 


If you've followed along with the preceding chapters, the `golem` framework should be familiar. In essence, `golem` takes many of the package development steps and bundles them into wrapper functions (i.e., [`add_module()`](https://thinkr-open.github.io/golem/reference/add_module.html) is identical to running `usethis::use_r()` and `usethis::use_test()`, then adding an `roxygen2` skeleton).

## `gap` dependencies 

It's also worth noting that using the `golem` framework adds `golem` as a dependency: 

```{r}
#| eval: false 
#| code-fold: false
# in the fw_gap branch of moviesApp
pak::local_deps_explain(deps = 'golem', root = ".")
```

```{verbatim}
gap -> golem 
```

### `moviesApp` dependencies

```{r}
#| label: git_box_11d_inst-prod
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "alt",
  fig_pw = '75%', 
  branch = "11d_inst-prod", 
  repo = 'moviesApp')
```

For comparison, this is the `moviesApp` dependency tree (note that using `devtools`/`usethis` doesn't make our app-package depend on these packages).

```{r}
#| eval: false 
#| code-fold: false
# in the 11d_inst-prod branch of moviesApp
pak::local_deps_explain(deps = 'devtools', root = ".")
```

```{verbatim}
x devtools
```

```{r}
#| eval: false 
#| code-fold: false
# in the 11d_inst-prod branch of moviesApp
pak::local_deps_explain(deps = 'usethis', root = ".")
```

```{verbatim}
x usethis
```

## Recap

The `golem` framework is a huge time saver if you're familiar with the underlying package development processes being bundled and optimized for 'production grade' Shiny apps. However, if you're not familiar with package development, you might end up with app-packages that have bugs you can't diagnose or fix. 