# `golem` {#sec-golem}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r",
  header = "ALERT!",
  contents = "This section is currently under development. Thank you for your patience."
)
```

```{r}
#| label: co_box_tldr
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", look = "minimal",
  header = "![](img/goelm.png){width='10%'} &emsp; TLDR", 
  fold = TRUE,
  contents = "
  
  1. If you're comfortable developing Shiny apps[^shiny-dev-level] and R packages[^rpkg-dev-level], `golem` can make your life easier.\n
  
  2. If you're comfortable developing Shiny apps, but haven't built many R packages, `golem` can streamline a lot of package development steps for you (but you'll probably still have to go back and learn at some point).\n
  
  3. If you're new to Shiny and comfortable developing R packages, you might find modules challenging, but there is still a lot to be ganied by adopting `golem`.\n
  
  3. If you're new to Shiny and R package development, start with [Mastering Shiny](https://mastering-shiny.org/) and the [Shiny documentation](https://shiny.posit.co/getstarted.html).\n

[^shiny-dev-level]: If your shiny apps have modules, you're (at least) an 'intermediate' developer.
  
[^rpkg-dev-level]: If you've written a package and successfully shared it with others, you're (at least) an 'intermediate' package developer.
  
  "
)
```

```{r}
#| eval: false
install.packages("golem")
library(golem)
```

