# HTML {#sec-html}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
library(htmltools)
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r", 
  header = "Warning",
  contents = "The contents for section are under development. Thank you for your patience."
)
```

<!--

### HTML

This approach allows you to leverage the full power of HTML5 to create structured, accessible, and semantically rich content, ultimately enhancing the user experience.

#### Introduction to HTML in Shiny

Shiny applications are built with R, but often require custom HTML to achieve specific layouts, structures, or functionality that go beyond what is possible with Shiny's built-in functions. 

By embedding HTML directly into your Shiny app, you can create more customized and polished interfaces. 

This chapter will guide you through the process of including HTML elements in your Shiny app-package, ensuring your app is both dynamic and visually appealing.

-->

In this chapter, we explore how to enhance our app UI by integrating custom HyperText Markup Language (HTML) in our app-package. Web content is made of HTML elements (headings, paragraphs, links, images, and multimedia elements). HTML elements are represented as  tags[^html-w3schools], which are nested within each other to build a complete document (or web application). As you can imagine, even a basic understanding of HTML can be valuable for designing the user interface of a Shiny applications. 


[^html-w3schools]: [w3schools](https://www.w3schools.com/html/) has a great (free) intro to HTML course.

## Shiny and HTML 

While Shiny provides a high-level interface for building web applications using R, incorporating raw HTML allows for finer control and customization of the app’s appearance and layout. Knowing a little HTML gives us the ability to create polished and professional UIs. Some basic HTML skills also enables us to include additional content types and structures--beyond what is natively supported by Shiny’s UI functions--allowing for greater flexibility and creativity in our app design.

## [`htmltools`]{style="font-size: 1.05em; font-weight: bold;"}

The [`htmltools` package](https://rstudio.github.io/htmltools/) facilitates the creation of HTML elements and documents within R. `htmltools` provides functions to create tags, manage dependencies, and render HTML documents. `htmltools` is imported when we install and load `shiny`,[^htmltools-shiny-desc], so the `tags` object is automatically available. 

[^htmltools-shiny-desc]: `htmltools` is listed under the [`Imports` field](https://github.com/rstudio/shiny/blob/9fd4ba199e5b387e0fcf11be82469caaeb23b083/DESCRIPTION#L74) of Shiny's `DESCRIPTION` file. 

We're already using HTML tags in our `movies_ui()` function to reference the original source of the `movies` data and application:

```{r}
#| eval: false
tags$blockquote(
  tags$em(
    tags$p(
      "The data for this application comes from the ",
      tags$a("Building web applications with Shiny",
        href = "https://rstudio-education.github.io/shiny-course/"
      ),
      "tutorial"
    )
  )
)
```

HTML tags are the building blocks of HTML documents. They are enclosed in angle brackets (`<tag>`) and define the structure and content of the web page. `htmltools` is particularly useful in Shiny app-packages because it allows you to build complex HTML structures programmatically. If we view the output from the block quote above, we see the raw HTML: 

``` html
<blockquote>
  <em>
    <p>
      The data for this application comes from the
      <a href="https://rstudio-education.github.io/shiny-course/">Building web applications with Shiny</a>
      tutorial
    </p>
  </em>
</blockquote>
```




`htmltools$tags()` allows us to create HTML elements directly within our R code. The sections below cover some of the common HTML tags used by `htmltools::tags` in Shiny applications.

<!--

### Document Structure 

The `<!DOCTYPE html>` declaration defines the document type and version of HTML. It ensures that the web page is rendered correctly by the browser. It is placed at the very top of an HTML document.

::: {layout-ncol=2 layout-valign="top"}

The `<html>` tag is the root element that wraps all other elements in an HTML document. It signifies the beginning and end of the HTML content.


``` html
<!DOCTYPE html>
<html>

</html>
```

:::

::: {layout-ncol=2 layout-valign="top"}

The `<head>` tag contains meta-information about the document, such as its character set (`<meta charset="UTF-8">`) and title (`<title>`). This information is not displayed directly on the web page.


``` html
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Movie Reviews</title>
</head>
</html>
```

:::

::: {layout-ncol=2 layout-valign="top"}

The `<body>` tag contains the content of the document that is visible to the user, including text, images, links, forms, and other elements.

``` html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Movie Reviews</title>
  </head>
  <body>
    <title>Movie Reviews</title>
  </body>
</html>
```

:::

-->



### Headings

Headings are used to define the hierarchy and structure of content on a web page. They range from `<h1>` (the most important heading) to `<h6>` (the least important heading):

::: {layout-ncol=3 layout-valign="bottom"}

### [R]{style="font-size: 1.05em; font-weight: bold;"}

### [HTML]{style="font-size: 1.05em; font-weight: bold;"}

### [Output]{style="font-size: 1.05em; font-weight: bold;"}

:::

::: {layout-ncol=3 layout-valign="bottom"}

``` r
tags$h1("Level 1")
```

``` html
<h1>Level 1</h1>
```
 
```{r}
#| label: h1
#| results: asis
#| echo: false
tags$h1("Level 1")
```

:::

::: {layout-ncol=3 layout-valign="bottom"}

``` r
tags$h2("Level 2")
```

``` html
<h2>Level 2</h2>
```
 
```{r}
#| label: h2
#| results: asis
#| echo: false
tags$h2("Level 2")
```

:::

::: {layout-ncol=3 layout-valign="bottom"}

``` r
tags$h3("Level 3")
```

``` html
<h3>Level 3</h3>
```
 
```{r}
#| label: h3
#| results: asis
#| echo: false
tags$h3("Level 3")
```

:::
 

### Paragraphs


Paragraphs are used to define blocks of text. They are enclosed within `<p>` tags.

::: {layout-ncol=3 layout-valign="center"}

``` r
tags$p("Block of text.")
```


``` html
<p>Block of text.</p>
```

```{r}
#| label: p
#| results: asis
#| echo: false
tags$p("Block of text.")
```
 
:::

### Divisions and Spans

`<div>` and `<span>` are generic containers used to group and style content. `<div>` is a block-level element used to group larger sections of content: 

::: {layout-ncol=3 layout-valign="center"}

``` r
tags$div(
  tags$p("Paragraph in a div.")
)
```

``` html
<div>
  <p>Paragraph in a div.</p>
</div>
```

```{r}
#| label: div
#| results: asis
#| echo: false
tags$div(
  tags$p("Paragraph in a div.")
)
```

:::

`<span>` is an inline element used to style smaller parts of the text:

::: {layout-ncol=3 layout-valign="center"}

``` r
tags$p("Some ",
  tags$span(
    style = "color: red;", 
  "red"), " words."
  )
```

``` html
<p>
  Some 
  <span style="color: red;">red</span>
   words.
</p>
```

```{r}
#| label: span
#| results: asis
#| echo: false
#| layout-valign: top
tags$p(
  "Some ",
  tags$span(
  style = "color: red;", 
  "red"),
  " words."
  )
```

:::


### Text Styling

HTML tags can be used to create many of the same styles we use in markdown. For example, we can format text as code using the `<code>` and `<pre>` tags.

`<code>` is better for highlighting a small piece of code within a paragraph of text.

::: {layout-ncol=3 layout-valign="center"}

``` r
tags$code("library(shiny)")
```

``` html
<code>library(shiny)</code>
```


```{r}
#| label: code
#| results: asis
#| echo: false
tags$code("library(shiny)")
```


:::


`<pre>` is better for multiline code because it preserves both spaces and line breaks: 


::: {layout-ncol=3 layout-valign="center"}

``` r
tags$pre("for(i in 1:5) {
    print(paste0('#', i))
  }")
```

``` html
<pre>for(i in 1:5) {
    print(paste0('#', i))
  }</pre>
```

<pre>for(i in 1:5) {
    print(paste0('#', i))
  }</pre>

:::

We can also combine `<pre>` and `<code>`: 


::: {layout-ncol=3 layout-valign="top"}

``` r
tags$pre(
  tags$code("
    for(i in 1:5) {
      print(paste0('#', i))
    }")
  )
```

``` html
<pre>
  <code>for(i in 1:5) {
      print(paste0('#', i))
    }</code>
</pre>
```


```{verbatim}
for(i in 1:5) {
    print(paste0('#', i))
}
```

:::


We can also specify bold (`<strong>`) and italic (`<em>`). 

::: {layout-ncol=3 layout-valign="center"}

``` r
tags$strong("bold")
```

``` html
<strong>bold</strong>
```

```{r}
#| label: strong
#| results: asis
#| echo: false
tags$strong("bold")
```

:::

::: {layout-ncol=3 layout-valign="center"}

``` r
tags$em("italic")
```

``` html
<em>italic</em>
```

```{r}
#| label: em
#| results: asis
#| echo: false
tags$em("italic")
```

:::

### Links

Links, or anchor tags, are used to create hyperlinks that navigate to other web pages or resources. The `href` attribute specifies the URL of the link's destination.

::: {layout-ncol=3 layout-valign="center"}

``` r
tags$a(href = "https://t.ly/", "Link")
```

``` html
<a href="https://t.ly/">Link</a>
```

```{r}
#| label: a
#| results: asis
#| echo: false
tags$a(href = "https://t.ly/", "Link")
```

:::

<!--

### Lists

Lists are used to group related items. Unordered lists (`<ul>`) display items with bullet points, while ordered lists (`<ol>`) display items with numbers. List items are defined using the `<li>` tag:

::: {layout-ncol=3 layout-valign="center"}

``` r
tags$p(
  "Unordered list:",
    tags$ul(
      tags$li("Item 1"),
      tags$li("Item 2"),
      tags$li("Item 3"),
    )
)
```

``` html
<p>
  Unordered list:
  <ul>
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
  </ul>
</p>
```

```{r}
#| label: ul
#| results: asis
#| echo: false
tags$p("Unordered list:",
tags$ul(
  tags$li("Item 1"),
  tags$li("Item 2"),
  tags$li("Item 3"),
  )
)
```

:::

::: {layout-ncol=3 layout-valign="center"}
 
``` r
tags$p(
  "Ordered list:",
    tags$ol(
    tags$li("Item 1"),
    tags$li("Item 2"),
    tags$li("Item 3"),
    )
)
```

``` html
<p>
  Ordered list:
  <ol>
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
  </ol>
</p>
```

```{r}
#| label: ol
#| results: asis
#| echo: false
tags$p("Ordered list:",
  tags$ol(
  tags$li("Item 1"),
  tags$li("Item 2"),
  tags$li("Item 3"),
  )
)
```

:::
 
### Tables

Creating tables can be cumbersome in HTML, but it's possible with the `<table` tag. The root element is the **`<table>`** tag element, followed by **`<thead>`**, the first (header) row of the table. Each row is defined with a new **`<tr>`**, and **`<th>`** defines a header cell within a row (used for table headings): 

::: {layout-ncol=2 layout-valign="top"}

``` r
tags$table(
  tags$thead(
    tags$tr(
      tags$th("Col 1"),
      tags$th("Col 2"),
      tags$th("Col 3")
    )
  )
)
```
  
```{r}
#| label: table_thead
#| results: asis
#| echo: false
tags$table(
  tags$thead(
    tags$tr(
      tags$th("Col 1"),
      tags$th("Col 2"),
      tags$th("Col 3")
    )
  )
)
```

:::

The body rows of the table is contained in **`<tbody>`**, and **`<td>`** defines a data cell within a row: 

::: {layout-ncol=2 layout-valign="top"}

``` r
tags$table(
  tags$thead(
    tags$tr(
      tags$th("Col 1"),
      tags$th("Col 2"),
      tags$th("Col 3")
    )
  ),
tags$tbody(
  tags$tr(
      tags$td("a"),
      tags$td("b"),
      tags$td("c")
    )
  )
)
```

```{r}
#| label: table_tbody
#| results: asis
#| echo: false
tags$table(
  tags$thead(
    tags$tr(
      tags$th("Col 1"),
      tags$th("Col 2"),
      tags$th("Col 3")
    )
  ),
tags$tbody(
  tags$tr(
      tags$td("a"),
      tags$td("b"),
      tags$td("c")
    )
  )
)
```


:::

::: {layout-ncol=3 layout-valign="top"}

``` r
tags$table(
  tags$thead(
    tags$tr(
      tags$th("Element"),
      tags$th("Tag")
    )
  ),
  tags$tbody(
    tags$tr(
        tags$td("Link"),
        tags$td(tags$code("<a>"))
      ),
  tags$tr(
    tags$td("italic"),
    tags$td(tags$code("<em>"))
  ),
  tags$tr(
    tags$td("Code"),
    tags$td(tags$code("<pre>"))
    )
  )
)
```

``` html
<table>
  <thead>
    <tr>
      <th>Element</th>
      <th>Tag</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Link</td>
      <td>
        <code>a</code>
      </td>
    </tr>
    <tr>
      <td>italic</td>
      <td>
        <code>em</code>
      </td>
    </tr>
    <tr>
      <td>Bold</td>
      <td>
        <code>pre</code>
      </td>
    </tr>
  </tbody>
</table>
```

```{r}
#| label: table
#| results: asis
#| echo: false
tags$table(
  tags$thead(
    tags$tr(
      tags$th("Element"),
      tags$th("Tag")
    )
  ),
  tags$tbody(
    tags$tr(
        tags$td("Link"),
        tags$td(tags$code("<a>"))
      ),
  tags$tr(
    tags$td("italic"),
    tags$td(tags$code("<em>"))
  ),
  tags$tr(
    tags$td("Code"),
    tags$td(tags$code("<pre>"))
    )
  )
)
```

:::

-->

### Images

The `<img>` tag is used to embed images in an HTML document. The `src` attribute specifies the path to the image file, and the `alt` attribute provides alternative text for the image: 

::: {layout-ncol=3 layout-valign="top"}

``` r
tags$img(src = "logo.png")
```

``` html
<img src="logo.png" />
```
 
```{r}
#| label: img
#| results: asis
#| echo: false
tags$img(
  src = "images/logo.png",
  # alt = "Description",
  width = "50%",
  height = "50%",
  align = "right"
)
```
 
:::

`align`, `width`, and `height` control the size and position of the image.


## Custom inputs

The HTML output generated by `htmltools` plays well with Shiny, so we *could* use it to custom inputs.[^custom-html-inputs] For example, in this branch we have a simple `buttonApp()` application that collects a name text input and displays a greeting. 

[^custom-html-inputs]: Defining a custom Shiny HTML input covered in the [Shiny documentation.](https://shiny.posit.co/r/articles/build/building-inputs/)

```{r}
#| eval: false
#| code-summary: 'show/hide custom button inputs'
tags$form(
  tags$label("Enter your name:"),
  tags$input(
    type = "text",
    id = ns("name_input"),
    name = "name"
  ),
  tags$input(
    type = "submit",
    id = ns("button_click"),
    value = "Click me!"
  )
)
```

![Custom submit button](images/custom_button.png){width='45%' fig-align='center'}

As we can see, `mod_cust_button_ui()` uses the `tags$form()` from `htmltools` to create a custom `text` input area and `submit` button in the sidebar. The `mod_cust_button_server()` module function returns the text input as a reactive (`txt`). 

```{r}
#| eval: false
#| code-fold: show
#| code-summary: 'show/hide custom input ui/server functions'
buttonUI <- function() {
  tagList(
    bslib::page_fillable(
      bslib::layout_sidebar(
        sidebar = bslib::sidebar(
          mod_cust_button_ui(id = "click") # <1>
        )
      )
    )
  )
}
buttonServer <- function(input, output, session) {
  
  txt <- mod_cust_button_server(id = "click") # <2>
  
}
```
1. Text input collected in `tags$input()` (in UI)
2. Text returned as reactive `txt` input (in server) 


To render the output, we pass `txt` as an input to `mod_greeting_server()` and display the output using the `mod_greeting_ui()`:

```{r}
#| eval: false
#| code-fold: show
#| code-summary: 'show/hide custom output ui/server functions'
buttonUI <- function() {
  tagList(
    bslib::page_fillable(
      bslib::layout_sidebar(
        sidebar = bslib::sidebar(
          mod_cust_button_ui(id = "click") # <1>
        ),
        bslib::card(
          mod_greeting_ui(id = "greeting") # <4>
        )
      )
    )
  )
}
buttonServer <- function(input, output, session) {
  
  txt <- mod_cust_button_server(id = "click") # <2>
  mod_greeting_server(id = "greeting", txt = txt)  # <3>
  
}
```
1. Text input collected in `tags$input()` (in UI)
2. Text returned as reactive `txt` input (in server) 
3. Text passed to `renderText()` (in server)
4. `txt()` rendered in `textOutput()` (in UI)

![buttonApp](images/button_app_card_1.png){width='90%' fig-align='center'}

To aid us in understanding how the cutom text input works with submit button inside the modules, we'll also add a card with `verbatimTextOutput()` and set it to display the output of `reactiveValuesToList()`:

```{r}
#| eval: false
#| code-fold: show
#| code-summary: 'show/hide reactive value display functions'
buttonUI <- function() {
  tagList(
    # UI code ...
      bslib::card(
        verbatimTextOutput(outputId = "vals")
      )
    )
}
buttonServer <- function(input, output, session) {
  # server code ...
  output$vals <- renderPrint({
    x <- reactiveValuesToList(x = input, all.names = TRUE)
    print(x)
  })
  
}
```

Now `buttonApp()` will display the value of `txt()` input as <code>$\`click-name_input\`</code>. 

![buttonApp with `reactiveValuesToList()`](images/button_app_card_2.png){width='90%' fig-align='center'}

When we enter a value in the text area, we see nothing is printed in the output from `reactiveValuesToList()` or `textOutput()` until we click the submit button, then the reactive values update with the value and the name is printed in the card: 

::: {#fig-buttons layout-ncol=2}

![buttonApp + name input](images/button_app_card_3.png){#fig-button_app_card_3}

![buttonApp + name input + submit](images/button_app_card_4.png){#fig-button_app_card_4}

Text updates in `buttonApp()`
:::

When we change the value to a different name, the UI doesn't change until we click the submit button again: 

::: {#fig-buttons layout-ncol=2}

![New name input](images/button_app_card_5.png){#fig-button_app_card_5}

![New name input + submit](images/button_app_card_6.png){#fig-button_app_card_6}

Text updates in `buttonApp()`
:::


## [`htmlwidgets`]{style="font-size: 1.05em; font-weight: bold;"}

The `htmlwidgets` package is another powerful tool that allows you to create interactive JavaScript data visualizations and embed them in your Shiny applications and R Markdown documents. `htmlwidgets` provides a framework for binding R to JavaScript libraries, enabling you to create interactive plots, maps, and other data visualizations that can be embedded in your Shiny apps.

Key features of `htmlwidgets` include:

- **Interactivity:** Create interactive visualizations that respond to user inputs.

- **Embeddability:** Embed widgets in Shiny applications, R Markdown documents, and static HTML pages.

- **Customizability:** Customize the appearance and behavior of widgets using both R and JavaScript.

<!--

Example of using `htmlwidgets` to create an interactive plot with the `plotly` package:

```{r}
#| eval: false
#| include: false
library(shiny)
library(plotly)

ui <- fluidPage(
  plotlyOutput("plot")
)

server <- function(input, output) {
  output$plot <- renderPlotly({
    plot_ly(data = iris, 
            x = ~Sepal.Length, 
            y = ~Sepal.Width, 
            type = 'scatter', 
            mode = 'markers')
  })
}

shinyApp(ui, server)
```

By leveraging `htmltools` and `htmlwidgets`, you can enhance your Shiny applications with rich, interactive content and custom HTML elements. These packages provide the flexibility and power needed to create sophisticated web applications within the R ecosystem.

## Embedding HTML 

To include custom HTML in our Shiny application, we can use the `htmltools::tags` functions provided by the Shiny package. These functions allow you to create HTML elements directly within your server and UI code. 

``` r
ui <- fluidPage(
  tags$p(
    "This is a paragraph created with HTML."
    )
)
```

While this method is effective for simple HTML elements, it can become cumbersome for more complex structures. Therefore, it is often more practical to include HTML files within your Shiny app-package.

## Organizing HTML Files

When developing a Shiny app-package, it is important to maintain a clean and organized file structure. HTML files should be placed in a directory where they can be easily accessed and managed. A common practice is to create a `www` directory within your package to store all web-related resources, including HTML files. 

``` sh
yourpackage/
├── R/
│   ├── server.R
│   └── ui.R
├── inst/
│   └── www/
│       └── custom.html
└── DESCRIPTION
```

## Including HTML Files 

Once your HTML files are organized in the `www` directory, you can include them in your Shiny application using the `includeHTML` function. This function reads the content of an HTML file and includes it directly in your UI:

``` r
ui <- fluidPage(
  includeHTML(
  system.file("www/custom.html", 
               package = "shinyAppPkgs"))
)
```

This approach allows you to separate your HTML content from your R code, making it easier to manage and update.

## HTML Templates

For more complex layouts, you may want to use HTML templates. Templates provide a way to create reusable HTML structures that can be populated with dynamic content from your Shiny app. To use HTML templates in your Shiny app-package, follow these steps:

1. Create your HTML template and save it in the `www` directory. For example, `template.html`:

``` html
<!DOCTYPE html>
<html>
<head>
    <title>My Shiny App</title>
</head>
<body>
    <h1>{{title}}</h1>
    <div id="content">
        {{content}}
    </div>
</body>
</html>
```

2. In your Shiny app, read the template file and replace the placeholders with dynamic content:

``` r
library(shiny)
library(stringr)

ui <- fluidPage(
    tags$head(tags$script(src = "www/custom.js")),
    uiOutput("html_content")
)

server <- function(input, output, session) {
    output$html_content <- renderUI({
        template <- readLines(system.file("www/template.html", package = "yourpackage"))
        template <- str_replace_all(template, "\\{\\{title\\}\\}", "Welcome to My Shiny App")
        template <- str_replace_all(template, "\\{\\{content\\}\\}", "This is the dynamic content.")
        HTML(paste(template, collapse = "\n"))
    })
}

shinyApp(ui, server)
```

By following these steps, you can create highly customized and dynamic user interfaces for your Shiny applications.

## Recap

Integrating HTML into your Shiny app-package allows you to create more flexible and powerful web applications. By organizing your HTML files, using `includeHTML`, and leveraging templates, you can separate your content from your R code, making your applications easier to maintain and extend. This chapter has provided you with the foundational skills to enhance your Shiny apps with custom HTML, setting the stage for more advanced topics in the following chapters on CSS and JavaScript.

-->

