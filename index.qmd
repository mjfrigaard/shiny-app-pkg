# Welcome! {.unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  header = "Heads up!",
  contents = "This section is currently being revised. Thank you for your patience.",
  fold = FALSE, look = "minimal"
)
```

[Shiny](https://shiny.posit.co/) combines the power of R's statistical capabilities with the interactivity of a web-based application. 

[R packages](https://cran.r-project.org/web/packages/available_packages_by_name.html) are collections of pre-built, self-contained code, data, and documentation designed to perform operations or accomplish tasks beyond the capabilities of base R. 

**Shiny App-Packages** covers how to create a Shiny application as an R package. [If you're comfortable building Shiny applications, but aren't as familiar with writing R packages, this book was written for you.]{style='font-weight: bold; color: #282b2d;'}

## Why this book?


::: {style='font-size: 1.05em; font-weight: bold; font-style: italic; color: #772953;'}

Did you read [Mastering Shiny](https://mastering-Shiny.org/) and want to learn more about package development?

:::

[Mastering Shiny](https://mastering-shiny.org/) is an excellent introduction to the captivating world of Shiny applications and provides a foundation of best practices for building applications. R packages are [covered in Mastering Shiny](https://mastering-shiny.org/scaling-packaging.html), and while this chapter is a great place to start, I think to fully understand and appreciate the benefits of developing a Shiny app as a package, I wanted an example with most (or some) of the development tools.

```{r}
#| label: co_box_mastering_shiny
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  header = "What about the *'Converting an existing app'* section in Mastering Shiny?",
  contents = "
  
The ['Converting an existing app' section](https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app) in Mastering Shiny provides an example of converting a Shiny app into an R Package. However, when I downloaded the source code ([`monthApp`](https://github.com/hadley/monthApp)), many package development tools were missing (`roxygen2` tags, `NAMESPACE` imports/exports, tests, vignettes, etc.).
  
  ",
  fold = FALSE, look = "minimal"
)
```

::: {style='font-size: 1.05em; font-weight: bold; font-style: italic; color: #772953;'}

Did you read [Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/) and decide the [`golem` framework](https://thinkr-open.github.io/golem/) wasn't a good fit for your application?

:::

[`golem`](https://thinkr-open.github.io/golem/) is the ‘*opinionated framework for building production-grade Shiny applications*’ introduced in [Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/) (or EPGSA). `golem` offers a robust and standardized way to build, maintain, and deploy production-grade Shiny apps. Whether it's due to `golem`'s learning curve, overhead, and dependencies or the legacy code, unconventional development, or deployment constraints of your existing application, it might not be the right fit for your situation. 

```{r}
#| label: co_box_golem
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  header = "Aren't `golem` applications packages?",
  contents = "
  
`golem` apps *are* built as packages. Still, [EPGSA](https://engineering-shiny.org/) assumes the reader is '[comfortable with building an R package.](https://engineering-shiny.org/structuring-project.html#resources)' (*if you're familiar with package development, [EPGSA](https://engineering-shiny.org/) is an excellent resource for Shiny apps*). 
  
  ",
  fold = FALSE, look = "minimal"
)
```

## Connecting the dots

I wrote this book after multiple encounters with Shiny developers who had developed impressive, complex apps but struggled to share and deploy their code. Many of these developers had problems moving their applications into a production environment.

```{r}
#| label: co_box_production
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  header = "What does it mean to put something into production?",
  contents = "
  
> '*I think the easiest way to think about it for me is that we develop a model in one computational environment--think of this as maybe your laptop or maybe you work in a server environment--still, it's in one place, and it turns out the software that you need to have installed there is about tuning, training, etc. **Putting something into production is getting it out of that computational environment and successfully carrying it over to a new computational environment.** For many people, this might be like a  cloud computing environment. It might be some kind of server your organization has, and we need to take it, lift it, and then successfully have it working.*' - Julia Silge, [What is 'production' anyway? MLOps for the curious (SatRdays London 2023)]((https://youtu.be/53-x5OFMGjA?t=1411))
  
I've added emphasis and edited this for clarity.
  
  ",
  fold = FALSE, 
  look = "minimal"
)
```

###  



‘Production’ usually means passing the code from your personal development environment into your company’s cloud-based server environment, which typically involves bundling your app in a structure that can be shared, installed, tested, and launched.

R packages are specifically designed for other users to install and load into their R environment. The package structure offers a standardized way of extending R’s capabilities by adding new functionality (like developing Shiny apps!).

This book is a resource intended to help ‘connect the dots’ between building scalable Shiny applications and writing R packages. Adopting R package development practices in the early stages of your Shiny app will improve the reusability, maintainability, and shareability of all your hard work.

## What this book isn't

This book isn't a replacement for [R Packages, 2ed](https://r-pkgs.org/) or [Writing R Extensions](https://cran.r-project.org/doc/manuals/R-exts.html). I highly suggest bookmarking both of those resources to come back and read when you'd like to learn more about package development. 

This book also won’t recommend a particular Shiny framework or package, but I’ll cover a few popular choices and why you might consider adopting them.

## What I assume about you

If you’re reading this, I assume you’re comfortable with R, Posit Workbench, Shiny, and the tidyverse. Maybe you haven’t built a ton of applications, but you understand reactivity, and you’re comfortable with the core Shiny concepts (i.e., the UI, server, `*_Input()`, `*_Output()`, and `render_`* functions, etc.).

## Other resources

Excellent resources have been written for [Shiny](https://shiny.posit.co/r/articles/), and it's also worthwhile to consult the documentation on the core package development tools: 

1. [`devtools`](https://devtools.r-lib.org/)  
2. [`usethis`](https://usethis.r-lib.org/)    
3. [`roxygen2`](https://roxygen2.r-lib.org/)   
3. [`pkgload`](https://pkgload.r-lib.org/) 



