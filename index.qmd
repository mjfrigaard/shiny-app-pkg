# Welcome! {.unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  header = "Caution",
  contents = "This book is under active development. It's contents are subject to change.",
  fold = FALSE, look = "minimal"
)
```

::: {layout="[80, -2, 18]"}

[Shiny](https://shiny.posit.co/) combines the power of R’s statistical capabilities with the interactivity of a web-based application.

![Shiny](img/00_index_shiny.png){width=50% fig-align="right"}

:::


::: {layout="[78, -1, 21]"}

[R packages](https://cran.r-project.org/web/packages/available_packages_by_name.html) are collections of pre-built, self-contained code, data, and documentation designed to perform operations or accomplish tasks beyond the capabilities of base R.

![R packages](img/00_index_pkg.png){fig-align="right"}

:::

**Shiny App-Packages** covers how to create a Shiny application as an R package. 

![Shiny app-packages](img/shinyap_icon.png){width=60% fig-align='center'}


## Why this book?

[If you’re comfortable building Shiny applications but aren’t as familiar with writing R packages, this book is for you.]{style='font-weight: bold; color: #3a506b;'}

I started putting this resource together after multiple encounters with Shiny developers who had created impressive, complex apps but struggled to convert them into R packages. This problem often resulted in delays when moving their applications into a production environment.

::: {style='font-size: 1.05em; font-weight: bold; font-style: italic; color: #3a506b;'}

> Did you read [Mastering Shiny](https://mastering-Shiny.org/) and want to learn more about package development?

:::

[Mastering Shiny](https://mastering-shiny.org/) is an excellent introduction to the captivating world of [Shiny](https://shiny.posit.co/) and provides a foundation of best practices for building applications. R packages are [introduced in Mastering Shiny](https://mastering-shiny.org/scaling-packaging.html), and this chapter is a great place to start. [^mastering-shiny-app-packages-1] However, to fully understand and appreciate the benefits of developing your Shiny app as an R package, I've found it's helpful to have an example that includes the full suite of the package development tools (loading, documenting, testing, deploying, etc.). That's what I've attempted to do with this book.

[^mastering-shiny-app-packages-1]: The ['Converting an existing app' section](https://mastering-shiny.org/scaling-packaging.html#converting-an-existing-app) in Mastering Shiny provides an example of converting a Shiny app into an R Package. However, if you've downloaded or cloned the source code ([`monthApp`](https://github.com/hadley/monthApp)), you might have noticed that many package development tools were missing (`roxygen2` tags, `NAMESPACE` imports/exports, tests, vignettes, etc.).

::: {style='font-size: 1.05em; font-weight: bold; font-style: italic; color: #3a506b;'}

> Did you read [Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/) and decide the [`golem` framework](https://thinkr-open.github.io/golem/) wasn't a good fit for your application?

:::

[`golem`](https://thinkr-open.github.io/golem/) is the ‘*opinionated framework for building production-grade Shiny applications*’ introduced in [Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/) (or EPGSA). `golem` offers a robust and standardized way to build, maintain, and deploy production-grade Shiny apps. Whether due to the learning curve, overhead, dependencies, legacy code, or your particular deployment constraints, `golem` might not be the right fit for your situation.[^golem-app-packages-2]

[^golem-app-packages-2]: `golem` apps *are* built as packages. Still, [EPGSA](https://engineering-shiny.org/) assumes the reader is '[comfortable with building an R package.](https://engineering-shiny.org/structuring-project.html#resources)' (*if you're familiar with package development, [EPGSA](https://engineering-shiny.org/) is an excellent resource*).

## Connecting the dots

‘Production’ usually means passing the code from your personal development environment into your company’s cloud-based server environment, which typically involves bundling your app in a structure that can be shared, installed, tested, and launched.

```{r}
#| label: co_box_production
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  header = "What does it mean to 'put something into production?'",
  contents = "
  
> '*I think the easiest way to think about it for me is that we develop a model in one computational environment--think of this as maybe your laptop or maybe you work in a server environment--still, it's in one place, and it turns out the software that you need to have installed there is about tuning, training, etc. **Putting something into production is getting it out of that computational environment and successfully carrying it over to a new computational environment.** For many people, this might be like a  cloud computing environment. It might be some kind of server your organization has, and we need to take it, lift it, and then successfully have it working.*' - Julia Silge, [What is 'production' anyway? MLOps for the curious (SatRdays London 2023)]((https://youtu.be/53-x5OFMGjA?t=1411))
  
I've added emphasis and edited this for clarity.
  
  ",
  fold = TRUE, 
  look = "minimal"
)
```

###  

R packages are designed for other users to install and load into their R environment. The package structure offers a standardized way of extending R’s capabilities by adding new functionality (like developing Shiny apps!).

This book is a resource to help ‘connect the dots’ between building scalable Shiny applications and writing R packages. Adopting R package development practices in the early stages of your Shiny app will improve the reusability, maintainability, and shareability of all your hard work.

## What this book is

The chapters in this book as written as a [toolchain walkthrough](https://arxiv.org/abs/1910.06964), [^toolchain-walkthrough-3] or "*a Shiny developers' guide to a collection of computational tools and commands for creating shiny app-packages.*" 

For continuity, I've used code and data from the excellent [Building Web Applications with Shiny (BWAS)](https://rstudio-education.github.io/shiny-course/) course. The learning modules in [BWAS](https://rstudio-education.github.io/shiny-course/) also serve as 'prerequisites' for many of the chapters covered here (if you haven't completed that course, be sure you understand the topics it covers). You'll find each section in this book also includes a dedicated GitHub repository and branch for you to follow along.

[^toolchain-walkthrough-3]: The terms 'toolchain walkthrough' are borrowed from the excellent paper, [`code::proof`: Prepare for most weather conditions](https://arxiv.org/abs/1910.06964) by Charles T. Gray (https://arxiv.org/abs/1910.06964).

## What this book isn't

This book isn’t a replacement for [R Packages, 2ed](https://r-pkgs.org/) or [Writing R Extensions](https://cran.r-project.org/doc/manuals/R-exts.html). I highly suggest bookmarking both resources to return and read when you’d like to learn more about package development.

I also won’t be recommending a particular Shiny framework or package, but I’ll cover a few popular choices, show you what they are doing 'under the hood,' and let you decide if you'd like to adopt some of their practices.

## What I assume about you

If you’re reading this, I assume you’re comfortable with R, Posit Workbench, Shiny, and the `tidyverse`. Maybe you haven’t built a ton of applications, but you understand reactivity, and you’re comfortable with the core Shiny concepts (i.e., the UI, server, `*_Input()`, `*_Output()`, and `render_`* functions, etc.).

## Other resources

Excellent resources have been written for [Shiny](https://shiny.posit.co/r/articles/), and it's also worthwhile to consult the documentation on the core package development tools: 

1. [`devtools`](https://devtools.r-lib.org/)  
2. [`usethis`](https://usethis.r-lib.org/)    
3. [`roxygen2`](https://roxygen2.r-lib.org/)   
3. [`pkgload`](https://pkgload.r-lib.org/) 



