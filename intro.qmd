# Introduction {#sec-intro .unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
"#3a506b"
```

The guiding principles throughout this book are:

1. Our code files should be easy to find  
2. It should be easy to check and share our work  

## Packages help you

The principles above are heavily influenced by the Benjamin Franklin [quote](https://www.goodreads.com/quotes/175428-a-place-for-everything-everything-in-its-place#:~:text),

> *"A place for everything, everything in its place"* 

And the de-cluttering methods popularized by [Marie Kondo](https://learn.konmari.com/?campaign=WPTidyTips), 

> *"Ensuring that each one of your belongings has its own spot is the only way to maintain a tidy and clutter-free home. Clutter has nothing to do with what or how much you own – it’s the failure to put things back where they belong."*

The first and obvious benefit to structuring your Shiny app as an R package is that it simplifies file and folder management. If every Shiny app project you develop is structured as an R package, it removes the time you spend manually creating directories (or re-orienting yourself to each project's structure). 

If you're using Posit Workbench, the R package structure will give you access to a well-designed IDE for Shiny applications. Posit Workbench has tools to help develop and debug functions, create and run unit tests, store internal and external data, manage dependencies, and write help files and long-form documentation. 

## Packages help them

> "*a package [is] the fundamental unit of shareable, reusable, and reproducible R code.*" - [R Packages, 2ed](https://r-pkgs.org/)

It's safe to assume the code used to build Shiny apps being deployed to a production environment will be seen (and hopefully used) by others. R packages make sharing your hard work with your colleagues easier because it removes their need to figure out where everything is, how it all fits together, and how it all (hopefully) works.

R packages are designed for others to install and use in their R environment. Hence, packages are a standardized way of extending R's capabilities by adding new functionality (like developing Shiny apps!).

```{r}
#| label: co_box_production
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g",
  header = "What does it mean to 'put something into production?'",
  contents = "
  
‘Production’ usually means passing the code from your personal development environment into your company's cloud-based server environment, which typically involves bundling your app in a structure that can be shared, installed, tested, and launched.
  
> '*I think the easiest way to think about it for me is that we develop a model in one computational environment--think of this as maybe your laptop or maybe you work in a server environment--still, it's in one place, and it turns out the software that you need to have installed there is about tuning, training, etc. **Putting something into production is getting it out of that computational environment and successfully carrying it over to a new computational environment.** For many people, this might be like a  cloud computing environment. It might be some kind of server your organization has, and we need to take it, lift it, and then successfully have it working.*' - Julia Silge, [What is 'production' anyway? MLOps for the curious (SatRdays London 2023)]((https://youtu.be/53-x5OFMGjA?t=1411))
  
I've added emphasis and edited this for clarity.
  
  ",
  fold = TRUE, 
  look = "minimal"
)
```

[Assume someone else will read your code.]{style='font-size: 1.15em; font-style: italic; font-weight: bold; color: #3a506b;'}

Making an effort to write clear and simple code is a courtesy to whoever reads your code next (which is typically future you). Clear and straightforward code is especially important for Shiny applications destined for deployment in a production environment. The standardized and widely accepted way to organize code in R is as an R package.[^intro-r-pkgs]

[^intro-r-pkgs]: David Neuzerling has a great [post](https://mdneuzerling.com/post/data-science-workflows/) on the benefits of structuring your project as a package 


## Packages are scalable 

Suppose you use R to perform analyses, design data visualizations, or build and run reports. If you currently use `source()` to load any utility functions to perform this work, I suggest putting those functions in a package. Doing this will help extend your mental model from the specific use cases (i.e., "*X code performs task Y*") to a model for their more general uses (i.e., "*X package performs tasks like Y*").

[Great R packages solve common problems.]{style='font-size: 1.15em; font-style: italic; font-weight: bold; color: #3a506b;'} 

The beauty of an R package mental model is that you’ll inevitably notice the similarities across common problems. Creating packages that define and solve common problems in your workflow can sometimes be some of the most popular/valuable contributions (see [`datapasta`](https://milesmcbain.github.io/datapasta/) and [`reprex`](https://reprex.tidyverse.org/)).


## How to read this book 

The chapters in this book (roughly) represent the steps of R package development, but through the lens of an existing Shiny application.[^intro-bwas] Each topic can be applied to creating a new app-package, but--in my experience--many Shiny developers have existing applications they'd like to convert into an R package.

[Introduction](intro.qmd) covers the development of a Shiny app project and it's gradual conversion into an R package:

-   @sec-whole-game is a 'whole game' for the development of a toy app-package. This chapter gives a high-level overview of the app-package development workflow.[^r-pkgs-whole-game]

-   In @sec-shiny we'll dive into shiny development, focusing on the files and folders found in most Shiny applications.

-   R packages are introduced in @sec-pkgs, and it covers the differences between Shiny app projects, R packages, and Shiny app-packages. 

-   @sec-dev introduces `devtools` and the app-package development workflow.

[App-packages](app_packages.qmd) applies the key components of R package development to a Shiny app: 

-   @sec-doc covers documenting the application's utility functions, modules, UI, server, and standalone app function using `roxygen2`.

-   Managing dependencies (both imports and exports) using the `NAMESPACE` file is introduced in @sec-depends

-   @sec-data discusses the storage, format, and documentation of data files your app-package. 

-   There are multiple ways to launch an application from an app-package. @sec-launch covers options to include in the `app.R` file and your standalone app function. 

-   @sec-inst covers the many uses of the `inst/` folder in R packages. This chapter also covers how to add external files and resources to your application.

[^r-pkgs-whole-game]: R Packages, 2ed, has a [similar chapter](https://r-pkgs.org/whole-game.html) that covers developing standard R packages. 

[^intro-bwas]: The original code and data for the application in this book comes from the [Building Web Applications with Shiny (BWAS)](https://rstudio-education.github.io/shiny-course/) course.

While developing your application, you'll want to ensure it's features are documented and tested. The [Tests](tests.qmd) section covers testing: 

-   Before running any tests we need to set up the test suite in our app-package. @sec-tests-suite briefly covers setting up the testing infrastructure with `testthat`. 

-   Knowing what features to implement and what tests to develop reduces the chances of writing code that doesn't address a user needs. @sec-tests-specs discusses how to identify user specifications, features, and functional requirements. It also briefly introduces behavior-driven development.

-   @sec-tests-tools covers how to include testing tools (fixtures and helpers) in your test suite to ensure isolated yet controllable test conditions.

-   Reactivity makes testing modules tricky. In @sec-tests-mods, I'll cover some strategies and approaches for verifying that your modules are communicating correctly with Shiny's `testServer()` function.

-   @sec-tests-system introduces performing system (or end-to-end) tests in you app-package with the [`shinytest2` package](https://rstudio.github.io/shinytest2/).

After you've developed your Shiny App-Package, you'll likely want to deploy it (or put it '*into production*'). A selection of popular methods are covered in [Deploy](deploy.qmd):

-   @sec-docker explains how build Docker images and containers using Docker desktop. These topics are also covered in @sec-golem. 

-  @sec-gha-cicd covers continuous integration (CI) / continuous deployment (CD) for Shiny app-packages using GitHub Actions.

-  @sec-pkgdown websites are an excellent way to enhance it's visibility and usability of your app-package (and it's made seamless with `usethis` and GitHub actions (see @sec-pkgdown-workflow)).

Shiny apps often contain non-R code files, such as CSS or JavaScript, for custom visualizations, widgets, enhanced HTML reports, etc. Including these files in your app-package (and then accessed from your R code) is covered in [Code](code.qmd):

-   @sec-css introduces where to store code used for styling your application (*this chapter is under construction*)

-   @sec-js (*this chapter is under construction*)

-   @sec-python (*this chapter is under construction*)

If you're Googling '*what is the best way to build a Shiny application?*' you'll eventually encounter a Shiny [framework.](frameworks.qmd) This section contains the development workflow and methods for three popular Shiny application frameworks (`golem`, `leprechaun`, and `rhino`). 

-   @sec-golem covers developing an application using the `golem` framework. 

-   For developers looking for a 'lightweight' version of the `golem` package, @sec-leprechaun introduces the `leprechaun` package and development workflow

-   @sec-rhino covers how to build a `rhino` application (which is not *technically* a package, but is still worth including based on it's popularity and features). 

The [special topics](special_topics.qmd) section includes a handful of topics on development, storing and retrieving data, reading error outputs, and keeping track of dependencies.

-   @sec-debug covers strategies and tricks for debugging errors and exploring reactivity in your Shiny app.

-   @sec-app-data explores the differences between and use of  `shiny::reactiveValues()` and `session$userData`.

-   @sec-stack-traces 

-   @sec-entanglement


Transitioning from programming in R to building Shiny applications and writing R packages presents a steep learning curve. The chapters in this book are aimed flattening the package development portion of that curve. As with any new skill, app-package development involves new mental models, concepts, terminology, habits, and details. If you find yourself getting frustrated, I recommend the 15 minute rule: 

> *"By forcing yourself to try for 15 minutes, you gain a deeper understanding of what you're troubleshooting so that, even if you don't fix it in 15, next time you're in a better position to troubleshoot than you were the last time*.
>
> *And by forcing yourself to ask for help after 15, you not only limit the amount of banging-your-head time, but you also get to see how the other person solves the problem while all the details are still fresh in your mind, so that you'll more likely have a deeper understanding of why what you were doing to fix it wasn't working, and why the ultimate solution actually worked."* - [Hacker News, 2013](https://news.ycombinator.com/item?id=6496855)


## Other resources

Excellent resources have been written for [Shiny](https://shiny.posit.co/r/articles/), and it's also worthwhile to consult the documentation on the core package development tools: 

1. [`devtools`](https://devtools.r-lib.org/)  
2. [`pkgbuild`](https://pkgbuild.r-lib.org/)
3. [`pkgload`](https://pkgload.r-lib.org/)
4. [`rcmdcheck`](https://rcmdcheck.r-lib.org/)
5. [`revdepcheck`](https://revdepcheck.r-lib.org/)
6. [`roxygen2`](https://roxygen2.r-lib.org/)  
7. [`remotes`](https://remotes.r-lib.org/)
8. [`sessioninfo`](https://sessioninfo.r-lib.org/)
9. [`usethis`](https://usethis.r-lib.org/) 





<!--

[^intro-golem]
[^intro-golem]: [Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/) and the [`golem` package](https://thinkr-open.github.io/golem/) assumes readers "*are comfortable with building an R package.*"

 [^intro-mastering-shiny]
[^intro-mastering-shiny]: Mastering Shiny includes an example for  *[converting](https://mastering-shiny.org/scaling-packaging.html?#converting-an-existing-app)* an existing application with `usethis::use_description()`, but not creating a new app-package (i.e., with `usethis::create_package()`).

:::: {.callout-important collapse="true" appearance='simple'}

### [`monthApp`]{style='font-size: 1.10em;'} from Mastering Shiny

::: {style='font-size: 1.05em; color: #696969;'}

If you happened to download or clone the [`monthApp`](https://github.com/hadley/monthApp) example from the [Packages Chapter](https://mastering-shiny.org/scaling-packaging.html), you may have notice a few things:[^pkgs-0]

1. `DESCRIPTION` contains additional fields that are not addressed.[^pkgs-1] 

2. `monthApp.Rproj` has been configured to work with package.[^pkgs-2a]

3. `devtools::build()` ([<kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd>]{style="font-weight: bold; font-size: 0.90em"}) has been configured to have additional behaviors.[^pkgs-2b]

4. Dependency management is discussed briefly but not documented in the application.[^pkgs-3]
  
5. `monthApp` doesn't have any help files[^pkgs-4] or tests.[^pkgs-5] 


[^pkgs-0]: The [Packages](https://mastering-shiny.org/scaling-packaging.html) chapter from [Mastering Shiny](https://mastering-shiny.org/) gets your '*toes into the water of package development*', but in my opinion, is probably not enough for you to get your shiny app project into an R package that's ready to be shipped into most production environments.

[^pkgs-1]: The [`DESCRIPTION`](https://github.com/hadley/monthApp/blob/master/DESCRIPTION) file in `monthApp` contains fields not included in the arguments passed to `usethis::use_description()` (these were added [separately](https://github.com/hadley/monthApp/commit/9899da4c89f4114a0611b415f4a329daeb753069)), and a few arguments can be adapted or removed to save time.

[^pkgs-2a]: The `.Rproj` file is the connection between the `DESCRIPTION` fields, the code in the `R/` folder, and the IDE's **Build** pane or “package development mode.” If you already have an `.Rproj` file in your shiny app project, you can activate these settings under **Tools** > **Project Options** > **Build Tools**. 

[^pkgs-2b]: The [`monthApp.Rproj`](https://github.com/hadley/monthApp/blob/9899da4c89f4114a0611b415f4a329daeb753069/monthApp.Rproj#L22) file contains additional settings you can add with **Tools** > **Project Options** > **Build Tools**, then under **Generate documentation with Roxygen**, click **Configure** and select **Install and Restart**.

[^pkgs-3]: The [`NAMESPACE` file](https://github.com/hadley/monthApp/blob/master/NAMESPACE) is empty and the `Imports` field is missing from the [`DESCRIPTION`](https://github.com/hadley/monthApp/blob/master/DESCRIPTION) (although the chapter discusses [importing `shiny`](https://mastering-shiny.org/scaling-packaging.html#r-cmd-check)).

[^pkgs-4]: `roxygen2` is mentioned, but it's beyond the scope of [Mastering Shiny](https://mastering-shiny.org/), so for now just know `roxygen2` syntax is placed in the code below `R/` to create the help files and the `NAMESPACE`.

[^pkgs-5]: `monthApp` doesn't have the testing infrastructure provided by [`testthat`](https://testthat.r-lib.org/), but this can be quickly created using `usethis::use_testthat()` (and an entire chapter is dedicated to [testing](https://mastering-shiny.org/scaling-testing.html).

::: 

::::

-->
