# Introduction {.unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  header = "Warning!",
  contents = "This section is currently under development. Thank you for your patience."
)
```


A guiding principle throughout this book is,

[Any R shiny app project you're sharing with others belongs in an R package.]{style='font-size: 1.15em; font-style: italic; font-weight: bold; color: #772953;'}

I could extend this statement to *'any R project'*, but it's especially true for shiny applications that are destined for deployment in a production environment. 

```{r}
#| label: co_box_productoin
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g",
  header = "What is 'production'?",
  contents = "Julia Silge gave a great description of what it means to put something into production in [her SatRdays London talk]((https://youtu.be/53-x5OFMGjA?t=1411)), 'What is 'production' anyway? MLOps for the curious'"
)
```

## Packages are better for you

The first and possibly obvious benefit to structuring your shiny app as a package is that it simplifies your file and folder management. If every shiny app project (and R project) is structured as a package, it removes the time spent re-orienting yourself to each project's structure. 

In Posit Workbench, a package structure will give access to a well-designed IDE for shiny applications. Posit Workbench comes with tools to help develop and debug functions, create and run unit tests, store internal and external data, manage dependencies, and write help files and long-form documentation. 

## Packages are better for them

> "*a package [is] the fundamental unit of shareable, reusable, and reproducible R code.*" - [R Packages, 2ed](https://r-pkgs.org/)

It's safe to assume the code used to build shiny apps being deployed to a production environment will be seen (and hopefully used) by others. R packages make sharing your hard work with your colleagues easier because it removes their need to figure out where everything is, how it all fits together, and how it all (hopefully) works.

## Packages are scalable 

[Great R packages define and solve common problems.]{style='font-size: 1.15em; font-style: italic; font-weight: bold; color: #772953;'} 

If you’re currently using R to perform analyses, run reports, design data visualizations, or build shiny apps, I’m suggesting extending your mental model from those specific use cases to a model for their more general uses (i.e., instead of ‘*`X` code performs task `Y`*’, think ‘*`X` package performs tasks like `Y`*’).

The beauty of an R package mental model is that you’ll inevitably notice the similarities across tasks with common problems as you develop multiple R packages. Creating packages that define and solve common problems in your workflow can sometimes be some of the most popular/valuable contributions (see [`datapasta`](https://milesmcbain.github.io/datapasta/) and [`reprex`](https://reprex.tidyverse.org/)).


## Example code

::: {.column-margin}

![New Git Branch](img/new_branch_ico.png){width='70%'}

The code for this section was pushed to the  [[`main`](https://github.com/mjfrigaard/projApp/tree/main)] branch of the [[`pkgApp`](https://github.com/mjfrigaard/pkgApp)] repo.

:::

The code files for each chapter are stored in GitHub repositories. Major code changes are stored in Git branches. Whenever a new branch or repo is used, you'll see an icon in the margin with a link to the branch.



