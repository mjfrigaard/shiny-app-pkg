# Introduction 

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
"#3a506b"
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  header = "Warning!",
  contents = "This section is currently under development. Thank you for your patience."
)
```

## Motivation

{{< include _ms_caveat.qmd >}}

## Packages help you

A guiding principle throughout this book is,

[Shiny app projects that you're sharing with others belong in an R package.]{style='font-size: 1.15em; font-style: italic; font-weight: bold; color: #3a506b;'}

I could extend this statement to ‘most R projects,’ but it’s especially true for shiny applications destined for deployment in a production environment.[^intro-1] 

[^intro-1]: David Neuzerling has a great [post](https://mdneuzerling.com/post/data-science-workflows/) on the benefits of structuring your project as a package 

The first and obvious benefit to structuring your shiny app project as a package is that it simplifies file and folder management. If every shiny app project you develop is structured as a package, it removes the time you spend manually creating directories (or re-orienting yourself to each project's structure). 

If you're using Posit Workbench, the package structure will give you access to a well-designed IDE for shiny applications. Posit Workbench has tools to help develop and debug functions, create and run unit tests, store internal and external data, manage dependencies, and write help files and long-form documentation. 

## Packages help them

> "*a package [is] the fundamental unit of shareable, reusable, and reproducible R code.*" - [R Packages, 2ed](https://r-pkgs.org/)

It's safe to assume the code used to build shiny apps being deployed to a production environment will be seen (and hopefully used) by others. R packages make sharing your hard work with your colleagues easier because it removes their need to figure out where everything is, how it all fits together, and how it all (hopefully) works.

## Scalable 

[Great R packages define and solve common problems.]{style='font-size: 1.15em; font-style: italic; font-weight: bold; color: #3a506b;'} 

Suppose you use R to perform analyses, design data visualizations, or build and run reports. If you currently use `source()` to load any utility functions to perform this work, I suggest putting those functions in a package. Doing this will help extend your mental model from the specific use cases (i.e., "*X code performs task Y*") to a model for their more general uses (i.e., "*X package performs tasks like Y*").

The beauty of an R package mental model is that you’ll inevitably notice the similarities across common problems. Creating packages that define and solve common problems in your workflow can sometimes be some of the most popular/valuable contributions (see [`datapasta`](https://milesmcbain.github.io/datapasta/) and [`reprex`](https://reprex.tidyverse.org/)).


## How to read this book 

The chapters in this book (roughly) represent the steps of R package development, but from the lens of an existing shiny application.[^intro-2] Each topic can (and should) be applied when creating new app-packages. Still, in my experience, many Shiny developers have existing applications they’d like to convert into an R package.

[^intro-2]: The original code and data for the application in this book comes from the [Building Web Applications with Shiny (BWAS)](https://rstudio-education.github.io/shiny-course/) course.

### Code examples

```{r}
#| label: git_box_main_demo
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  fig_pw = '75%', 
  branch = "main", 
  repo = 'shinyAppProj')
```


The code files for each chapter are stored in GitHub repositories. Major code changes are stored in Git branches. Whenever a new branch or repo is used, you'll see the **Git Branch** icon with a link to the repo in the margin.



