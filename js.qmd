# JavaScript {#sec-js}

[Adding interactivity to bring your app to life]{style="font-size: 1.25em; font-style: italic; color: #02577A;"}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "y", 
  header = "Caution",
  contents = "The contents for section are under development. Thank you for your patience."
)
```

This chapter will cover how to include JavaScript code in your Shiny app-package. If you'd like to learn JavaScript, I recommend [JavaScript for R](https://book.javascript-for-r.com/) and [JavaScript for Data Science](https://third-bit.com/js4ds/). If you're looking for Shiny-focused intro to JavaScript, I recommend [Outstanding User Interfaces with Shiny](https://unleash-shiny.rinterface.com/).

:::: {.callout-tip collapse='true' appearance='default'}

## [Accessing applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

I've created the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/) In an effort to make each section accessible and easy to follow:
  
Install `shinypak` using `pak` (or `remotes`):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
```

Review the chapters in each section:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
library(shinypak)
list_apps(regex = 'js')
```

Launch an app with `launch()`

```{r}
#| code-fold: false 
#| eval: false
launch(app = "19_js")
```

Download an app with `get_app()`

```{r}
#| code-fold: false 
#| eval: false
get_app(app = "19_js")
```

::: 

::::

## Syntax 

- **R**: [R's](https://en.wikipedia.org/wiki/R_(programming_language)) object-oriented, functional programming syntax is designed for analysis and statistics with a focus on ease of use for graphics and data manipulation. Functions like `lm()` (linear modeling), `ggplot()` (graphics), and those found in other `tidyverse` packages (`dplyr`, `tidyr`, etc.) support *vectorized operations*, meaning they're operations are applied to an entire vector (or columns in a dataset) succinctly, which is ideal for numerical computations and analysis or tabular data.

- **JavaScript**: [JavaScript](https://en.wikipedia.org/wiki/JavaScript) follows the [ECMAScript](https://tc39.es/ecma262/) standard and supports object-oriented, imperative, and functional programming paradigms. Its syntax allows for complex application development, including closures, callbacks, promises (for asynchronous operations), and, more recently, async/await for better syntax in asynchronous code. JavaScript's dynamic typing and first-class functions make it highly flexible for various programming tasks beyond web development.

