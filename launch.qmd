# Launch {#sec-launch}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_tldr
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", 
  look = "default", hsize = "1.15", size = "1.10",
  header = "TLDR: Launching your app", fold = TRUE,
  contents = "
**Launching Apps:** 
  
- **`shinyApp()`**: can be bundled in a standalone app function to store an app-package\n
    - Also useful for quick prototyping or if an app is in a single `.R` script\n
    - Returns a shiny app object (helpful with testing)\n
  
- **`runApp()`**: versatile function that can launch apps in multiple formats/locations\n
    - A directory with a `server.R` and `ui.R`, or a single `app.R` file`\n
    - An app object created by `shinyApp()`\n
  
- **`shinyAppDir()`**: useful if you need launch a Shiny app programmatically from a directory.\n
"
)
```

---

During development, we either launch apps using the **Run App** button at the top of the `app.R` file, or by calling the standalone app function in the **Console**. This chapter covers the differences between shiny's `shinyApp()`, `runApp()`, and `shinyAppDir()` functions, functions to include in the `app.R` file, and options for launching an app (or apps) in your app-package.

:::: {.callout-tip collapse='true' appearance='default'}

## [Accessing the code examples]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

I've created the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/) In an effort to make each section accessible and easy to follow:
  
Install `shinypak` using `pak` (or `remotes`):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
```

Review the chapters in each section:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
library(shinypak)
list_apps(regex = '^08')
```

Launch an app: 

```{r}
#| code-fold: false 
#| eval: false
launch(app = "08_launch-app")
```

::: 

::::

In the current branch of `shinyAppPkgs`, the `app.R` file loads our package and runs the standalone app function, `launch_app()`:

```{r}
#| label: git_margin_box_06.2_pkg-imports
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "standard",
  fig_pw = '75%', 
  branch = "06.2_pkg-imports", 
  repo = 'shinyAppPkgs')
```

```{r}
#| eval: false 
#| code-fold: show
#| code-summary: 'show/hide app.R'
# pkgs <- c("shiny", "shinythemes", "stringr", "ggplot2", "rlang") # <1> 
# install.packages(pkgs, quiet = TRUE) # <1> 

# packages ------------------------------------ # <2> 
library(shinyAppPkgs) # <2> 

# launch_app ------------------------------------ # <3> 
launch_app() # <3> 
```
1. Install packages (if needed)   
2. Load package   
3. Call standalone app function  


## Running apps

`launch_app()` passes our UI and server functions to `shinyApp()`. As we can see in the image below, this places the **Run App** icon in the **Source** pane:

![**Run App** icon in `app.R` of `06.2_pkg-imports` branch](images/launch_run_app_from_imports.png){width=100%}



```{r}
#| label: co_box_launch
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g", 
  look = "default", hsize = "1.15", size = "1.10",
  header = "Terminology",
  contents = "
I'll be using the term 'launch' to differentiate successfully running an application locally (either in the IDE window, viewer pane, or browser) from clicking on the **Run App** icon or calling `runApp()` and deploying an application to shinyapps.io.",
  fold = TRUE
)
```

If we load the code in `R/` with `load_all()`, then click on **Run App**, we see this calls `runApp()` in the **Console** and displays a warning: 

![The application is launched (with the `loadSupport()` warning)](images/launch_loadsupport_error.png){width=100%}

### [`loadSupport()`]{style="font-size: 0.90em"} warning 

If we jump back to the `05_roxygen2` branch of `shinyAppPkgs`, `launch_app()` hasn't been exported, so we don't have the **Run App** icon in the `app.R` file:

```{r}
#| label: git_margin_box_05_roxygen2
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "standard", 
  fig_pw = "75%",
  repo = "shinyAppPkgs",
  branch = "05_roxygen2")
```

 
![No **Run App** icon in `app.R` of `05_roxygen2` branch](images/launch_no_run_app_button.png){width=100%}

Running the contents of the `app.R` file in the `05_roxygen2` branch gives us the following error:

```{verbatim}
#| eval: false
#| code-fold: false
Error in launch_app() : could not find function "launch_app"
```

But `runApp()` will launch the app, but still displays the warning message in the **Console**:

![Calling `runApp()` in the **Console** of `05_roxygen2` branch](images/launch_loadsupport_error_run_app.png){#fig-launch_loadsupport_error_run_app width=100%}


```{r}
#| label: co_box_load_support_warn
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r", 
  look = "default", hsize = "1.15", size = "1.10", fold = TRUE,
  header = "loadSupport() warning",
  contents = "
<br>
When you run this:
  
\`\`\`r
shiny::runApp()
\`\`\`
  
...and see this:

\`\`\`bash
Warning in loadSupport(appDir, renv = sharedEnv, globalrenv = NULL):
  Loading R/ subdirectory for Shiny application, but this directory 
  appears to contain an R package. 
  Sourcing files in R/ may cause unexpected behavior.
\`\`\`
  
The warning in the **Console** is telling us `loadSupport()` has detected that `shinyAppPkgs` is a package, but it's still sourcing the `R/` subdirectory.[^load-support-shiny-chap]

[^load-support-shiny-chap]: If you recall, we covered the  [`loadSupport()`](https://shiny.posit.co/r/reference/shiny/1.5.0/loadsupport) function in [Chapter 2](shiny.qmd).

")
```

The examples above demonstrate the differences between calling `shinyApp()` and `runApp()`, and the tension between calling a standalone app function from an R package vs. sourcing the `app.R` file in a Shiny project.

In the following sections, we'll compare `shinyApp()`, `shinyAppDir()`, and `runApp()` to determine which one to use in `R/launch_app.R` and the `app.R` file.   

## Shiny launch functions 

<!-- https://rtask.thinkr.fr/shinyapp-runapp-shinyappdir-difference/ -->

[`shinyApp()`]{style="font-style: italic; font-size: 1.25em"}, [`shinyAppDir()`]{style="font-style: italic; font-size: 1.25em"}, or [`runApp()`]{style="font-style: italic; font-size: 1.25em"}

During development, the IDE provides the **Run App** icon for launching the application. 

![The **Run App** icon in the **Source** pane calls `runApp()`)](images/Run_App.png){width='40%'}

As we've seen, **Run App** calls `runApp()`, even when we have a call to `shinyApp()` in the `app.R` file. This might make you wonder, 

*"Why even include a call to `shinyApp()` if the app is being launched with `runApp()`?"* 

Let's review what happens when we call `shinyApp()`, `shinyAppDir()`, and `runApp()`:

### [`shinyApp()`]{style="font-size: 0.95em"} {#sec-launch-shiny-app}

One of the key features of `shinyApp()` is the creation of the `shiny.appobj` (a `shiny` app object):

```{r}
#| eval: false 
#| code-fold: false
app <- shinyApp(ui = movies_ui, 
                server = movies_server)
str(app)
```

If we look at the structure of the returned object from `shinyApp()`, we see the `shiny.appobj` includes the `appDir` under `appOptions`: 

``` sh
List of 5
 $ httpHandler     :function (req)  
 $ serverFuncSource:function ()  
 $ onStart         : NULL
 $ options         : list()
 $ appOptions      :List of 2
  ..$ appDir       : chr "/path/to/shinyAppPkgs" # <1>
  ..$ bookmarkStore: NULL
 - attr(*, "class")= chr "shiny.appobj" # <2>
```
1. `appDir` is the first argument of `runApp()`   
2. A shiny app object  

This is why `runApp()` works with any `.R` file creating a shiny app object.

:::: {.callout-note collapse="true" appearance="default" title='shinyApp()'}

::: {style='font-size: 1.05em; color: #696969;'}

:::{layout="[45,55]" layout-valign="center"}

[`shinyApp()`]{style="font-size: 0.95em"}: Creates and launches an app defined inline within the call itself (or with UI and server functions passed as arguments).

``` r
shinyApp(
  ui = fluidPage(
    # UI elements
  ),
  server = function(input, output) {
    # Server logic
  }
)
```

:::

:::

::::

### [`shinyAppDir()`]{style="font-size: 0.95em"} {#sec-launch-shiny-app-dir}

`shinyAppDir()` is similar to `shinyApp()`, but is designed to use a "*path to directory that contains a Shiny app.*"

In practice, we can use `shinyAppDir()` with a returned object from `shinyApp()`:

```{r}
#| eval: false 
#| code-fold: false
app <- shinyApp(
        ui = movies_ui,
        server = movies_server
      )
app$appOptions$appDir
```

``` sh
[1] "path/to/shinyAppPkgs"
```

This path can be passed to the `appDir` argument (along with any shiny `options`).

```{r}
#| eval: false 
#| code-fold: false
shinyAppDir(
  appDir = app$appOptions$appDir,
  options(test.mode = TRUE)
)
```

:::: {.callout-note collapse="true" appearance="default" title='shinyAppDir()'}

::: {style='font-size: 1.05em; color: #696969;'}

:::{layout="[45,55]" layout-valign="center"}

[`shinyAppDir()`]{style="font-size: 0.95em"}: Launches an app from a directory (with an `app.R` or `ui.R`/`server.R` files).

``` r
shinyAppDir(
  appDir = "path/to/app/", 
  options = list())
```

:::

:::

::::

### [`runApp()`]{style="font-size: 0.95em"} {#sec-launch-run-app}

The reason we're able to call `runApp()` in the **Console** to launch both applications above is because it's versatile:

:::{layout="[45,55]" layout-valign="center"}

#### [`runApp()`]{style="font-size: 0.85em"} {.unnumbered}

Can launch apps from `ui.R`/`server.R`, `app.R` or directory:

#### {.unnumbered}

``` r
# In console
runApp()
```

:::

:::{layout="[45,55]" layout-valign="center"}

Works with a path to an `.R` file that creates a `shiny.appobj`:[^launch-run-app-shiny-examples]

[^launch-run-app-shiny-examples]: Shiny's examples are run [using `runApp()`](https://github.com/rstudio/shiny/blob/9ebcbf8a2dec7045f609624d5f339e9a3e29de5f/R/runapp.R#L436)

``` r
runApp(appDir = "path/to/shinyAppPkgs")
```

:::

:::{layout="[45,55]" layout-valign="center"}

Can also use a `shiny.appobj` directly:

``` r
app <- shinyApp(
        ui = movies_ui,
        server = movies_server)
runApp(appDir = app)
```

:::

This final method does not produce the `loadSupport()` warning because a Shiny object (`shiny.appobj`) has already been created, and `runApp()` is essentially calling `print(app)` in the **Console**.

:::: {.callout-note collapse="true" appearance="default" title="runApp()"}

::: {style='font-size: 1.05em; color: #696969;'}

:::{layout="[45,55]" layout-valign="center"}

[`runApp()`]{style="font-size: 0.95em"}: A generalized way to launch your app--it can run apps defined inline, or from a directory.

``` r
runApp(
  appDir = "path/to/app/",
  test.mode = TRUE/FALSE)
```

:::

:::

::::

#### Recap {.unnumbered}

`shinyApp()` is typically used to create apps within an interactive R session, while `shinyAppDir()` runs a Shiny app stored in a directory (containing an `app.R` file (or `ui.R` and `server.R` files). `runApp()` also launches apps in a directory, but it's versatility makes it suitable for running apps in various formats, either defined inline or in separate directories.[^shiny-app-launchers]

[^shiny-app-launchers]: It's worthwhile to read the documentation on  [`shinyApp()`, `shinyAppDir()`](https://shiny.posit.co/r/reference/shiny/0.14/shinyapp), and [`runApp()`](https://shiny.posit.co/r/reference/shiny/1.7.4/runapp).

## Standalone options 

We'll rename our standalone app function to `launch_app()` and include the options covered below.

```{r}
#| label: git_box_08_launch-app
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "launch",
  fig_pw = '75%', 
  branch = "08_launch-app", 
  repo = 'shinyAppPkgs')
```

### [`if (interactive())`]{style="font-size: 0.90em"} 

The first thing we'll include is a check to see if there is a "*[human operator to interact with](https://stat.ethz.ch/R-manual/R-devel/library/base/help/interactive.html)*" with `base::interactive()`:

```{r}
#| eval: false 
#| code-fold: false
if (interactive()) {
  
} else {
   
}
```

You have probably seen control flow like this in `shiny` help file examples (like `flowLayout()` below):

:::{#fig-launch_if_interactive_examples}

![`if (interactive())` in `flowLayout()` example](images/launch_if_interactive_examples.png){#fig-launch_if_interactive_examples width=100%}

Running examples 'interactively' let's us see the app demo beneath the code
:::

`if (interactive())` allows us to distinguish between launching the app from a Posit Workbench session (i.e., during development) and deploying the application (i.e., publishing the application on Posit Connect).

### [`options`]{style="font-size: 0.90em"} 

An `options` argument can be passed to `shinyApp()` or `shinyAppDir()`. For example, one of the Shiny options we could include in our standalone app function is `test.mode`:

> '*Should the application be launched in test mode? This is only used for recording or running automated tests. Defaults to the `shiny.testmode` option, or `FALSE` if the option is not set.*'

`test.mode` lets us [export values from our application]((https://shiny.posit.co/r/reference/shiny/1.0.2/exporttestvalues)) when we're running tests (which we'll cover in-depth in the [Tests](@sec-tests) section). 

We'll make `options` an argument (defaulting to an empty `list()`) in our updated  `launch_app()` function.

```{r}
#| eval: false 
#| code-fold: false
launch_app <- function(options = list()) {
    shinyApp(
      ui = movies_ui(), # <1>
      server = movies_server, # <1>
      options = options #  <2>
      )
}
```
1. Build the shiny app object with `movies_ui` and `movies_server`   
2. Include `options` list   


### [`shiny.launch.browser`]{style="font-size: 0.90em"} 

I've written a `display_type()` helper function to 1) detect if the appliation is being developed in RStudio and, if so, 2) control where the Shiny app is launched. The `run` argument in `display_type()` takes the following options: 

-   `"p"` = **Viewer Pane**  
-   `"w"` = **IDE Window**   
-   `"b"` = **External browser**   

The option to access configuration is `shiny.launch.browser`:[^launch-shiny.launch.browser]

[^launch-shiny.launch.browser]: The `shiny.launch.browser` options are covered in [this blog post by Garrick Aden-Buie](https://www.garrickadenbuie.com/blog/shiny-tip-option-where-to-run/), and I've combined them into a `run` argument in `launch_app()`

```{r}
#| eval: false 
#| code-fold: false
#' Shiny app display mode helper
#'
#' @param run where to launch app: 
#'  * `"p"` = launch in viewer pane 
#'  * `"b"` = launch in external browser  
#'  * `"w"` = launch in window (default)
#'
#' @return notification of `shinyViewerType` option
#' 
#' @export
#'
display_type <- function(run = "w") {
  if (Sys.getenv("RSTUDIO") == "1") { #<1>
    switch(run, #<2>
      p = options(shiny.launch.browser = .rs.invokeShinyPaneViewer),
      b = options(shiny.launch.browser = .rs.invokeShinyWindowExternal),
      w = options(shiny.launch.browser = .rs.invokeShinyWindowViewer),
      NULL = options(shiny.launch.browser = NULL))#<2>
    environment <- "RStudio"
    shinyViewerType <- getOption('shiny.launch.browser') |> 
                        attributes() |> 
                        unlist() |> 
                        unname()
                      
    cli::cli_alert_info("App running in {environment}")#<3>
    cli::cli_alert_info("shinyViewerType set to {shinyViewerType}")#<4>
  } else {
    environment <- "RStudio"
    cli::cli_alert_info("App not running in {environment}")
  } 
}
```
1. Detect IDE 
2. Set option   
3. Print IDE    
4. Print option   

```{r}
#| label: co_box_cli_dependency
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o", 
  look = "default", hsize = "1.15", size = "1.10",
  fold = TRUE,
  header = "New dependency!",
  contents = "
The `cli` package is imported as part the `devtools`/`usethis` workflow but we want to add it the `Imports` field of the `DESCRIPTION` with `usethis::use_package('cli')`.
  "
)
```

### Updated [`launch_app()`]{style="font-size: 0.90em"} {#sec-launch-standalone-app-function}

In `launch_app()`, I'll add the `interactive()` check, `display_type()`, and `test.mode` option:

```{r}
#| eval: false 
#| code-fold: false
launch_app <- function(options = list(), run = "w") {
  if (interactive()) { # <1>
    display_type(run = run) # <2>
  }
    shinyApp( # <3>
      ui = movies_ui(),
      server = movies_server,
      options = options
    ) # <3>
}
```
1. Check if interactive (Workbench) launch  
2. Set `shinyViewerType` option with `display_type()`     
3. Launch app     

After loading, documenting, and installing the package, I can test my new standalone app function: 

```{r}
#| label: dev_key_all_00
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```

![The updated `launch_app()` function launches the application in the window (without the `loadSupport()` warning)](images/launch_movies_app_updates.png){#fig-launch_movies_app_fun width=100%}


Now we can see `launch_app()` is launching the application without the `loadSupport()` warning. We can also adjust the `test` and `run` arguments to see make sure these are implemented correctly:

![`test` and `run` arguments in `launch_app()`](images/launch_movies_app_fun.png){width=100%}


## [`app.R`]{style="font-size: 0.95em"} options {#sec-launch-app-dot-r}

The `app.R` file should contain any options or settings that we would use during development. There are multiple ways to launch an application from `app.R`, so I encourage you to explore the options below to find a method that works for your workflow/environment.  

### Non-interactive sessions

[What if the session isn't interactive?]{style="font-style: italic; color: #696969; "}

In this case, we'll divert all regular output to the standard error stream.

#### [`stderr()`]{style="font-size: 0.90em"} 

The `sink()` function *"diverts R output to a connection"*, so the code below sends the output that would normally print to the console to the where error messages are written.

```{r}
#| eval: false 
#| code-fold: false
if (!interactive()) {
   sink(stderr(), type = "output")
} else {
   
}
```


This is useful in a non-interactive settings if we want to re-direct the error output for the console text-mode connection.

#### [`tryCatch()`]{style="font-size: 0.90em"} 

`tryCatch()` is used for 'catching conditions' during the execution of an expression (`expr = `):

```{r}
#| eval: false 
#| code-fold: false
if (!interactive()) {
   sink(stderr(), type = "output")
   tryCatch(expr = {
      library(shinyAppPkgs)
   }, error = function(e) {
      pkgload::load_all()
   })
} else {
   
}
```

In this case, if `library(shinyAppPkgs)` throws an error, the function specified after `error =` is executed (i.e., `pkgload::load_all()`).[^launch-pkgload-load_all]

[^launch-pkgload-load_all]: `pkgload` is part of the [conscious uncoupling](https://www.tidyverse.org/blog/2018/10/devtools-2-0-0/) of the `devtools` package we learned about back in [Chapter 6](dependencies.qmd).

Written this way, in a non-interactive R session, `app.R` will re-direct the error output and attempt to load and attach `shinyAppPkgs`, and if this fails, `app.R` will attempt to load all the files in the `R/` folder. 

### Interactive sessions

If the session ***is*** interactive (i.e., `!interactive() == FALSE`), we want `app.R` to load all the code in the `R/` folder with `pkgload::load_all()`.

#### [`pkgload`]{style="font-size: 0.90em"} 

`pkgload::load_all()` is the function that's actually called when we run `devtools::load_all()` (or use [<kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>]{style="font-weight: bold; font-size: 0.75em"}), and this is somewhat analogous to running `library(shinyAppPkgs)`

```{r}
#| eval: false 
#| code-fold: false
if (!interactive()) {
   sink(stderr(), type = "output")
   tryCatch(expr = {
      library(shinyAppPkgs)
   }, error = function(e) {
      pkgload::load_all()
   })
} else {
   pkgload::load_all()
}
```

```{r}
#| label: co_box_pkgload
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o", 
  look = "default", hsize = "1.15", size = "1.10",
  fold = TRUE,
  header = "New dependency!",
  contents = "
The `pkgload` package is imported as part the `devtools`/`usethis` workflow, otherwise we'd want to add it the `Imports` field of the `DESCRIPTION` with `usethis::use_package('pkgload')`.
  "
)
```

#### [`withr`]{style="font-size: 0.90em"} 

The [`withr` package](https://withr.r-lib.org/) is designed to '*run code with safely and temporarily modified global state*', and it comes in handy when launching shiny apps. For example, I want to turn off the `loadSupport()` behavior when launching the app from `app.R`.[^launch-r-folder]

```{r}
#| label: co_box_withr
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o", 
  look = "default", hsize = "1.15", size = "1.10",
  fold = TRUE,
  header = "New dependency!",
  contents = "
The `withr` package is imported as part the `devtools`/`usethis` workflow, otherwise we'd want to add it the `Imports` field of the `DESCRIPTION` with `usethis::use_package('withr')`.
  "
)
```


[^launch-r-folder]: You can read more about the `shiny.autoload.r` option and `loadSupport()` in [this article](https://shiny.posit.co/r/articles/build/app-formats/index.html#the-r-directory)

I can use `withr::with_options()` to accomplish this using the following `new` and `code` arguments 

1. `new`: a named list of the *new options and their values*  
2. `code`: the '*Code to execute in the temporary environment*

I want to place the `withr::with_options()` at the top of `app.R` and pass contents of `app.R` into the `code` argument. Just to be sure no options for `shiny.autoload.r` previously exist, I'll also set this option to `NULL` *before* executing the rest of the code.

```{r}
#| eval: false 
#| code-fold: false
withr::with_options(new = list(shiny.autoload.r = FALSE), code = { # <1> 
  if (!interactive()) { # <2> 
    sink(stderr(), type = "output")
    tryCatch(
      expr = {
        library(shinyAppPkgs)
      },
      error = function(e) {
        pkgload::load_all()
      }
    ) # <2>
  } else { # <3> 
    pkgload::load_all()
  } # <3> 
    shinyAppPkgs::launch_app( # <4>
      options = list(test.mode = TRUE), run = 'p')
})

```
1. Turn off `loadSupport()`  
2. Define non-interactive behaviors  
3. Define interactive behaviors  
4. Launch app (with options)  

Now that we've updated the `app.R` account for the app-package structure, we should load, document, and install `shinyAppPkgs` and run it's contents: 

```{r}
#| label: dev_key_all_01
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```

### Updated [`app.R`]{style="font-size: 0.90em"} 

When we send the contents of `app.R` to the **Console**, the `loadSupport()` options are applied before running the app:


![Sending `app.R` to **Console**](images/launch_app_dot_r.png){width=100%}


```{r}
#| label: co_box_disable_autoload
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g",
  look = "default", hsize = "1.15", size = "1.10",
  fold = TRUE,
  header = "`R/_disable_autoload.R`",
  contents = "
In the documentation for `loadSupport()`, you'll find a second option for removing the `R/` directory sourcing behavior: placing a `_disable_autoload.R` file in the `R/` directory (this is also one of the behaviors of the [`golem` framework](https://github.com/ThinkR-open/golem/blob/365a5cc303b189973abab0dd375c64be79bcf74a/R/disable_autoload.R), which we will cover in the following chapters).
  
Both methods work--this chapter demonstrates a way to remove the `loadSupport()` warning without having to add this file.
  
  "
)
```

## Deploying the app 

To deploy the app, I can click on the **Publish** icon: 

![Send app.R to **Console** and click **Publish**](images/launch_deploy_app_dot_r.png){#fig-08_launch_deploy_app_dot_r width=100%}

Make sure all the files in the package are selected, then click **Publish**

![Publishing apps to `shinyapps.io`](images/launch_publilsh_window.png){width=80%}


The **Deploy** pane will open and you'll see a deployment log as your application is sent to the server: 

```{bash}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide deployment log'
── Preparing for deployment ────────────────────────────────────────────────────
ℹ Creating application on server...
✔ Created application with id 10026672
ℹ Bundling 24 files: .Rbuildignore, app.R, DESCRIPTION, launch.R, movies.RData, NAMESPACE, README.md, www/shiny.png, man/display_type.Rd, man/mod_scatter_display_server.Rd, man/mod_scatter_display_ui.Rd, man/mod_var_input_server.Rd, man/mod_var_input_ui.Rd, man/launch_app.Rd, man/movies_server.Rd, man/movies_ui.Rd, man/scatter_plot.Rd, R/display_mode.R, …, R/movies_ui.R, and R/scatter_plot.R
ℹ Capturing R dependencies with renv
✔ Found 63 dependencies
✔ Created 258,028b bundle
ℹ Uploading bundle...
✔ Uploaded bundle with id 7740376
── Deploying to server ─────────────────────────────────────────────────────────
Waiting for task: 1340526445
  building: Parsing manifest
  building: Building image: 9212796
  building: Fetching packages
  building: Installing packages
  building: Installing files
  building: Pushing image: 9212796
  deploying: Starting instances
  rollforward: Activating new instances
  unstaging: Stopping old instances
── Deployment complete ─────────────────────────────────────────────────────────
✔ Successfully deployed to <https://yourusername.shinyapps.io/app-name/>
Deployment completed: https://yourusername.shinyapps.io/app-name//
```

### Deploy log {#sec-launch-shinyapps-log}

On [shinyapps.io](https://www.shinyapps.io/), the deployment log shows the `loadSupport()` warning persists (but the application still [deploys](https://paradigmdata.shinyapps.io/shinyAppPkgs/)). The server-side warning is a known issue.[^launch-loadsupport-warning]

[^launch-loadsupport-warning]: You can learn more about this warning by reading these posts on StackOverflow ([How can I deploy my shiny app as a package?](https://stackoverflow.com/questions/64774355/how-can-i-deploy-my-shiny-app-as-a-package) [Problem with directory when deploying app on shinyapps](https://stackoverflow.com/questions/67511409/problem-with-directory-when-deploying-app-on-shinyapps)), and this post on Posit Community ([Errors when deploying app on shinyapps.io](https://community.rstudio.com/t/errors-when-deploying-app-on-shinyapps-io/104550)).

``` sh
── Preparing for deployment ────────────────────────────────────────────────────
✔ Deploying "moviesApp" using "server: shinyapps.io / username: paradigmdata"
ℹ Creating application on server...
✔ Created application with id 12043521
ℹ Bundling 27 files: 
.Rbuildignore, app.R, data/movies.rda, data/movies.RData, DESCRIPTION, 
inst/extdata/movies.fst, NAMESPACE, README.md, www/shiny.png, 
man/display_type.Rd, man/mod_scatter_display_server.Rd, 
man/mod_scatter_display_ui.Rd, man/mod_var_input_server.Rd, 
man/mod_var_input_ui.Rd, man/launch_app.Rd,
man/movies_server.Rd, man/movies_ui.Rd, man/movies.Rd, …, 
R/movies_ui.R, and R/scatter_plot.R
ℹ Capturing R dependencies with renv
✔ Found 61 dependencies
✔ Created 389,086b bundle
ℹ Uploading bundle...
✔ Uploaded bundle with id 8642619
── Deploying to server ─────────────────────────────────────────────────────────
Waiting for task: 1418523851
  building: Building image: 10523209
  building: Fetching packages
  building: Installing packages
  building: Installing files
  building: Pushing image: 10523209
  deploying: Starting instances
  rollforward: Activating new instances
  success: Stopping old instances
── Deployment complete ─────────────────────────────────────────────────────────
✔ Successfully deployed to <https://paradigmdata.shinyapps.io/moviesApp/>
Deployment completed: https://paradigmdata.shinyapps.io/moviesApp/
```



## Recap {.unnumbered}

This chapter has covered some options for launching your app within your app-package. We went over what to include in the standalone app function and the `app.R` file, the differences between `shinyApp()`, `shinyAppDir()` and `runApp()`, but it's worth exploring these topics further (especially if you plan on having more than one apps in your package).

```{r}
#| label: co_box_app_recap
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g",
  header = "Recap: launching your app",
  look = "default", hsize = "1.15", size = "1.10",
  fold = FALSE,
  contents = "

**`shinyApp()`**: 

-   `shinyApp()` doesn't care about file structure, so it's useful for quick prototyping or if the app is in a single `.R` script. It's also more portable because you can share your app with a single `.R` script.

    -   It's possible to bundle `shinyApp()` in a wrapper function to integrate within an R package (like we've done with `launch_app()`).

    -    `shinyApp()` returns a shiny app object, which can be useful if you want to explore the app structure programmatically (i.e., testing).
  
**`shinyAppDir()`**: 
  
-   `shinyAppDir()` launches an app from a directory, and is useful if an app is spread across multiple files and folders.

**`runApp()`**

-   `runApp()` a more generalized way to launch an app. It works with:
  
    -   apps contained in a directory (i.e., `runApp('path/to/app')`
  
    -   apps in separate `ui.R` and `server.R` files (or a single `app.R` file)
  
    -   a shiny app object (passed to the `appDir` argument).
  
-   Clicking on **Run App** will run the application with `runApp()` if is detects a file (or files) that creates a shiny object.
  
  "
)
```

In the following chapter, we're going to cover where to put non-standard R package files that are common to Shiny apps (`images`, `.css`/`.scss` file, etc.).

```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```
