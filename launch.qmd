# Launch {.unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  header = "Caution",
  contents = "This chapter is currently being revised.",
  fold = FALSE
)
```

In the previous chapter we removed the calls to `library()` in `app.R`, which is a critical step in managing the dependencies. This chapter will cover the differences between shiny's `shinyApp()` and `runApp()` functions, which one belongs in the `app.R` file, and other options for running an app (or apps) in your app-package.

## [`app.R`]{style="font-size: 1.05em"} ([`main`]{style="font-size: 1.05em"})

We're going to revert back to the `main` branch of `pkgApp` to get a better understanding of the evolution of our `app.R` file. When we initially used `app.R` to run `movies_app(),` it contained the `library()` calls for the necessary packages, the code for `movies_app()`, *and* a call to the function:

```{r}
#| label: git_box_pkgApp_main
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "alt",
  fig_pw = '75%', 
  branch = "main", 
  repo = 'pkgApp')
```

```{r}
#| eval: false 
#| code-fold: true
#| code-summary: 'show/hide initial version of movies_app()'
# packages ------------------------------------
library(shiny)
library(shinythemes)
library(stringr)
library(ggplot2)
library(rlang)

movies_app <- function() {
  shiny::shinyApp(
    ui = shiny::fluidPage(
      theme = shinythemes::shinytheme("spacelab"),
      shiny::titlePanel(
        shiny::div(
          shiny::img(
            src = "shiny.png",
            height = 60,
            width = 55,
            style = "margin:10px 10px"
            ), 
         "Movies Reviews"
        )
      ),
      shiny::sidebarLayout(
        shiny::sidebarPanel(
          mod_var_input_ui("vars")
        ),
        shiny::mainPanel(
          mod_scatter_display_ui("plot")
        )
      )
    ),
    server = function(input, output, session) {
      
      selected_vars <- mod_var_input_server("vars")

      mod_scatter_display_server("plot", var_inputs = selected_vars)
    }
  )
}
movies_app()
```


`movies_app()` is a wrapper function for `shiny::shinyApp()`, but it creates the `ui` and `server` arguments internally (with the modules). As we can see in the image below, the **Run App** icon is available in the **Source** pane:

:::{#fig-05_app_main_runApp_icon}

![`app.R` in `main` branch](img/06_app_main_runApp_icon.png){#fig-05_app_main_runApp_icon width=100%}

**Run App** icon in `app.R` of `main` branch
:::

Clicking on **Run App** will call `shiny::runApp()` in the **Console**, but it also produces a warning: 

:::{#fig-05_app_main_runApp_console}

![`runApp()` in **Console** of `main` branch](img/06_app_main_runApp_console.png){#05_app_main_runApp_console-05_app_main_runApp_icon width=100%}

Clicking on **Run App** in `app.R` of `main` branch
:::

So even though `app.R` contains a call to `shinyApp()`, `movies_app()` is *actually* run with `runApp()` (we'll come back to this in a moment).

### [`loadSupport`]{style="font-size: 1.10em"} warning

The warning in the **Console** tells us we should be mindful of '*unexpected behavior(s)*' when sourcing the `R/` subdirectory in an R package (or app-package in this case):

```{verbatim}
#| eval: false 
#| code-fold: false
Warning in loadSupport(appDir, renv = sharedEnv, globalrenv = NULL) :
  Loading R/ subdirectory for Shiny application, but this directory appears to
  contain an R package. Sourcing files in R/ may cause unexpected behavior.
```

The warning above also tells us that despite `pkgApp` being structured as an app-package, the `R/` folding is still being sourced like it's a shiny project.

## [`app.R`]{style="font-size: 1.05em"} ([`02_roxygen2`]{style="font-size: 1.05em"})

Let's fast-forward to the `02_roxygen2` branch of `pkgApp`. This is the first version of `movies_app()` that's contained in the `R/` folder (in `R/movies_app.R`).

```{r}
#| label: git_box_pkgApp_02_roxygen2
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "alt",
  fig_pw = '75%', 
  branch = "02_roxygen2", 
  repo = 'pkgApp')
```

```{verbatim}
#| eval: false
#| code-fold: false
R/
├── mod_scatter_display.R
├── mod_var_input.R
├── movies_app.R <- movies_app()
├── movies_server.R
├── movies_ui.R
└── utils.R

1 directory, 6 files
```


If you recall, in the `02_roxygen2` branch, `movies_app()` isn't exported yet, so the error below is expected when we run the contents of `app.R`:

```{r}
#| eval: false
#| code-fold: false
# packages ------------------------------------
library(shiny)
library(shinythemes)
library(stringr)
library(ggplot2)
library(rlang)

# movies_app ------------------------------------
movies_app()
```

```{verbatim}
#| eval: false
#| code-fold: false
Error in movies_app() : could not find function "movies_app"
```

However, if we run call `shiny::runApp()` in the **Console**, we see the following: 

::: {#fig-05_app_roxygen2_runApp_console}

![Calling `runApp()` in `02_roxygen2`](img/06_app_roxygen2_runApp_console.png){#fig-05_app_roxygen2_runApp_console width=100%}

The application is launched (with the `loadSupport()` warning)
:::

#### Feature or bug?

The example above demonstrates 1) the differences between `shinyApp()` and `runApp()`, and 2) the tensions between the R package structure and the `shiny` framework. 

-   The reason we're able to call `runApp()` in the **Console** and launch the application in `movies_app()` is because `runApp()` is designed to work with directories containing shiny apps (not `ui` and `server` arguments).

-   We're seeing the `loadSupport()` warning because one of the features of `shiny` projects is to `source()` the files in the `R/` folder (which we covered in [Chapter 1](https://mjfrigaard.github.io/shinyap/shiny.html#r)). However, after converting the contents of `pkgApp` into an app-package (like the versions in the `main` and `02_roxygen2` branches), the contents of `R/` are loaded with `devtools::load_all()`. 

In the following section, we'll compare `shinyApp()` and `runApp()` to determine which one to use in `R/movies_app.R` and the `app.R` file.   

## [`shinyApp()`]{style="font-size: 1.05em"} vs. [`runApp()`]{style="font-size: 1.05em"}

`shinyApp()` is typically used to create apps within an interactive R session (like the R console or in Posit Workbench). Developers can use `shinyApp()` to quickly spin up simple applications by defining `ui` and `server` arguments (e.g. as `shinyApp(ui, server)`), which is why its included as the boilerplate app with new `shiny` project. 

```{r}
#| eval: false 
#| code-fold: false
shinyApp(
  ui = fluidPage(
    # UI elements
  ),
  server = function(input, output) {
    # Server logic
  }
)
```


`runApp()` is designed to run standalone apps located in a separate directory containing `ui.R` and `server.R` (or `app.R`) files. This feature is beneficial for app-packages, because apps can be organized inside a dedicated sub-directory and provided to the `appDir` argument.

```{r}
#| eval: false 
#| code-fold: false
runApp(appDir = "path/to/app/folder")
```

## Updated [`movies_app()`]{style="font-size: 1.10em"}

One of the key features of `shinyApp()` is the creation of the `shiny.appobj` (a `shiny` app object):


```{r}
#| eval: false 
#| code-fold: false
app <- shinyApp(ui = movies_ui, 
                server = movies_server)
str(app)
```

If we look at the structure of the returned object from `shinyApp()`, we see the `shiny.appobj` includes the `appDir` (the first argument of `runApp()`).

```{verbatim}
#| eval: false 
#| code-fold: false
List of 5
 $ httpHandler     :function (req)  
 $ serverFuncSource:function ()  
 $ onStart         : NULL
 $ options         : list()
 $ appOptions      :List of 2
  ..$ appDir       : chr "/path/to/app/project/pkgApp"
  ..$ bookmarkStore: NULL
 - attr(*, "class")= chr "shiny.appobj"
```

We'll rewrite `movies_app()` below using `shiny::runApp()`.

#### [`shiny.launch.browser`]{style="font-size: 1.05em"}

We want to have control over where the shiny application will be launched from (i.e., the **Viewer** pane, the IDE **Window**, or an external browser). We can access this with the `shiny.launch.browser` option:

```{r}
#| eval: false 
#| code-fold: false
options(shiny.launch.browser = ...)
```

The three options above are covered in [here](https://www.garrickadenbuie.com/blog/shiny-tip-option-where-to-run/), and we want to combine them into a `run` argument in `movies_app()`

```{r}
#| eval: false 
#| code-fold: false
  switch(EXPR = run, 
  	view = options(shiny.launch.browser = .rs.invokeShinyPaneViewer),
  	browser = options(shiny.launch.browser = .rs.invokeShinyWindowExternal),
  	win = options(shiny.launch.browser = .rs.invokeShinyWindowViewer)
  )
```

#### [`test.mode`]{style="font-size: 1.05em"}

Another great feature of `runApp()` is the ability to control the application's behavior with `test.mode`:

> '*Should the application be launched in test mode? This is only used for recording or running automated tests. Defaults to the `shiny.testmode` option, or `FALSE` if the option is not set.*'

The `test.mode` argument lets us [export values from our application]((https://shiny.posit.co/r/reference/shiny/1.0.2/exporttestvalues)) when we're running tests (which we'll cover in-depth in the testing chapter). 

We'll make `test` an logical argument (defaulting to `TRUE`) in our updated  `movies_app()` function.

```{r}
#| eval: false 
#| code-fold: false
movies_app <- function(test = TRUE, run = "view") {
  app <- shinyApp(
                  ui = movies_ui, 
                  server = movies_server)
  switch(EXPR = run, 
  	view = options(shiny.launch.browser = .rs.invokeShinyPaneViewer),
  	browser = options(shiny.launch.browser = .rs.invokeShinyWindowExternal),
  	win = options(shiny.launch.browser = .rs.invokeShinyWindowViewer)
  )
   if (test)
      runApp(appDir = app, test.mode = TRUE)
   else
      runApp(appDir = app, test.mode = FALSE)
}
```

:::{.column-margin}

:::{style="font-size: 1.05em;"}

Remember--we don't need to explicitly namespace `shinyApp()` or `runApp()` (i.e., with `pkg::fun()`) because we're using `#' @import shiny` in the `R/movies_app.R` file. 

:::

:::

The updated `roxygen2` documentation for `movies_app()` is below: 

```{verbatim}
#| eval: false 
#| code-fold: false
#' Movies app standalone function
#'
#' Wrapper function for `runApp()`
#' 
#' @param test logical, run in `test.mode`?
#' @param run where to launch app: 
#'  * `view` = launch in viewer  
#'  * `browse` = launch in external browser  
#'  * `win` = launch in window
#'
#' @return shiny app
#' 
#' 
#' @seealso [mod_var_input_ui()], [mod_var_input_server()], [mod_scatter_display_ui()], [mod_scatter_display_server()]
#' 
#' @import shiny
#'
#' @export
#' 
```


## Updated [`app.R`]{style="font-size: 1.10em"}

Now that we've updated the `movies_app()` function, we should re-write the contents of `app.R` to account for the app-package structure. 

### [`if (!interactive())`]{style="font-size: 0.95em"}

The first thing we should include is a check to see if there is a "*[human operator to interact with](https://stat.ethz.ch/R-manual/R-devel/library/base/help/interactive.html)*" with `base::interactive()`:

```{r}
#| eval: false 
#| code-fold: false
if (!interactive()) {
  
} else {
   
}
```

You have probably seen control flow like this in `shiny` help file examples (like `flowLayout()` below).

:::{#fig-05_app_interactive}

![`if (interactive())` in `flowLayout()` example](img/06_app_interactive.png){#fig-05_app_interactive width=100%}

Running examples interactively let's us see the app demo beneath the code
:::



#### [`stderr()`]{style="font-size: 0.85em"}

What if the session isn't interactive (i.e., `!interactive() == TRUE`)? 

In this case, we'll divert all outputs (standard output `stdout()` and standard error (`stderr()`)) to go to the same place (`stderr()`). 

```{r}
#| eval: false 
#| code-fold: false
if (!interactive()) {
   sink(stderr(), type = "output")
} else {
   
}
```


This is useful in a non-interactive settings if we want to re-direct the error output for the console text-mode connection.

#### [`tryCatch()`]{style="font-size: 0.85em"}

`tryCatch()` is used for 'catching conditions' during the execution of an expression (`expr = `):

```{r}
#| eval: false 
#| code-fold: false
if (!interactive()) {
   sink(stderr(), type = "output")
   tryCatch(expr = {
      library(pkgApp)
   }, error = function(e) {
      pkgload::load_all()
   })
} else {
   
}
```

In this case, if `library(pkgApp)` throws an error, the function specified after `error =` is executed (i.e., `pkgload::load_all()`).

Written this way, in a non-interactive R session, `app.R` will re-direct the error output and attempt to load and attach `pkgApp`, and if this fails, `app.R` will attempt to load all the files in the `R/` folder. 

### [`pkgload::load_all()`]{style="font-size: 0.95em"}

If the session ***is*** interactive (i.e., `!interactive() == FALSE`), we want `app.R` to load all the code in the `R/` folder with `pkgload::load_all()`.

:::{.column-margin}

:::{style="font-size: 1.05em"}

`pkgload` is part of the [conscious uncoupling](https://www.tidyverse.org/blog/2018/10/devtools-2-0-0/) of the `devtools` package we learned about back in [Chapter 3](https://mjfrigaard.github.io/shinyap/devtools.html). 

:::

:::

```{r}
#| eval: false 
#| code-fold: false
if (!interactive()) {
   sink(stderr(), type = "output")
   tryCatch(expr = {
      library(pkgApp)
   }, error = function(e) {
      pkgload::load_all()
   })
} else {
   pkgload::load_all()
}
```

Recall that `pkgload::load_all()` is function [actually called when we run `devtools::load_all()`](https://www.tidyverse.org/blog/2018/10/devtools-2-0-0/) (or use [<kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>]{style="font-weight: bold; font-size: 0.75em"}), and that this is analogous to running `library(pkgApp)`

## Calling [`movies_app()`]{style="font-size: 1.10em"}

After loading, documenting, and installing `pkgApp`, we'll run `movies_app()` in the **Console** to see if we're still getting the `loadSupport()` warning: 

:::{#fig-05_app_movies_app_console}

![Running `movies_app()` in **Console**](img/06_app_movies_app_console.png){#fig-05_app_movies_app_console width=100%}

The `loadSupport()` warning is gone
:::



## Running [`app.R`]{style="font-size: 1.10em"}

In `app.R` is a call to `movies_app()` (with `test` set to `FALSE` because we haven't set up our testing suite yet).

```{r}
#| eval: false 
#| code-fold: false
if (!interactive()) {
   sink(stderr(), type = "output")
   tryCatch(expr = {
      library(pkgApp)
   }, error = function(e) {
      pkgload::load_all()
   })
} else {
   pkgload::load_all()
}

# movies_app ------------------------------------
pkgApp::movies_app(test = FALSE)
```

When we send the contents of `app.R` to the **Console**, the control flow safely loads `pkgApp` before running the app:

```{r}
#| label: git_box_pkgApp_05_run-app
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "standard",
  fig_pw = '75%', 
  branch = "05_run-app", 
  repo = 'pkgApp')
```


:::{#fig-05_app_run_app_dot_r}

![Sending `app.R` to **Console**](img/06_app_run_app_dot_r.png){#fig-05_app_run_app_dot_r width=100%}

`pkgApp` is loaded before running `movies_app()`
:::

## Recap

This chapter has covered some options for what to include in the `app.R` file of your app-package. The differences between `shinyApp()` and `runApp()` are worth exploring further, especially if you plan on having more than one apps in a package (or multiple versions of the same application in the same app-package).

```{r}
#| label: co_box_app_recap
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  header = "Recap: `shinyApp()` vs. `runApp()`",
  contents = "

**`shinyApp()`**: 

-   `shinyApp()` doesn't care about file structure, so it's useful for quick prototyping or if the app is in a single `.R` script. It's also more portable because you can share your app with a single `.R` script.

-   It's possible to bundle `shinyApp()` in a wrapper function to integrate within an R package (like we've done with `movies_app()`).

-    `shinyApp()` can also be used to return a shiny app object, which can be useful if you want to explore the app structure programmatically (i.e., testing).

**`runApp()`**

-   `runApp()` is designed for running apps contained in a directory (i.e., `runApp('path/to/app')`. If the app is in separate `ui.R` and `server.R` files (or a single `app.R` file) `runApp()` will automatically look for these. However, a shiny app object can also be passed to the `appDir` argument to launch your app.

-   If you've separated your app into multiple files that includes additional assets like data or a `www/` folder, `runApp()` is a better option.
  ", 
  fold = FALSE
)
```

In the following chapter, we're going to cover how to ensure `movies.Data` becomes part of the `pkgApp` namespace.