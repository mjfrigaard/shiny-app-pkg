# `leprechaun` {#sec-leprechaun}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o", 
  look = "minimal",
  header = "Caution",
  contents = "The contents for section are being revised. Thank you for your patience."
)
```

```{r}
#| label: co_box_tldr
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", look = "minimal", size = '1.10', hsize = '1.30',
  header = "![](images/leprechaun.png){width='10%'} &emsp; The `leprechaun` framework", 
  fold = FALSE,
  contents = "
<br>
  
- `leprechaun` has many of the same features found in the `golem` framework, but without the added dependencies (think `golem` à la carte)

- Helper functions for creating modules, `app.R` files, JavaScript, CSS, SCSS, HTML, etc.
  
- `leprechaun` apps come 'pre-packaged' with UI, server, and standalone app functions
  
- Additional features and functionality are added with a variety of `use_*` functions 'bundle' resources in the `inst/` folder: 
  
  - `use_sass()`, `use_config()`, `use_packer()` (with `use_js_utils()`), etc.
  
"
)
```

This chapter walks through building a version of the `moviesApp` with the [`leprechaun`](https://leprechaun.opifex.org/#/) framework. The resulting app-package (`lap`) is in the [`fw_lap` branch](https://github.com/mjfrigaard/moviesApp/tree/fw_lap).

```{r}
#| eval: false
#| code-fold: false
install.packages("leprechaun")
library(leprechaun)
```

```{r}
#| label: git_box_lap
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "standard",
  fig_pw = '75%', 
  branch = "fw_lap", 
  repo = 'moviesApp')
```

After checking out the `fw_lap` branch, be sure to load, document, and install the application.

```{r}
#| label: dev_key_all_01
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```

## `lap` (a `leprechaun` app-package)

`lap` exports the `movies` data and the standalone app function, `run()`.

```{r}
#| eval: false
#| code-fold: false
library(lap)
lap::run()
```

::: {#fig-leprechaun_run}

![`lap` movies app](images/leprechaun_run.png){#fig-leprechaun_run width='100%' align='center'}

After loading, documenting, and installing `lap`, launch the movies with `run()`
:::

## Set up

Creating a new leprechaun app-package can be done with `usethis::create_package()` (covered in [Packages](packages.qmd)).[^leprechaun-create] 

[^leprechaun-create]: Remember to provide a list of fields to `usethis::create_package()` for the `DESCRIPTION` file (or edit this manually).

After your app-package is created, `leprechaun::scaffold()` builds the core app files: [^leprechaun-scaffold]

[^leprechaun-scaffold]: `leprechaun::scaffold()` has arguments for `ui` (`fluidPage` or `navbarPage`) `bs_version` (bootstrap version) and `overwrite` (if you need to start over).

- [x] **Code files**: the code files in new `leprechaun` apps include the following:
<br><br>
  - [x] `_disable_autoload.R`: Disables `shiny::loadSupport()` (covered in [Launch](launch.qmd))
<br><br>
  - [x] `assets.R`: includes `serveAssets()` for serving JavaScript files, `remove_modules()` and `get_modules()` for adding/removing modules, and the `collapse_files()` helper function for collapsing files.[^leprechaun-assets]
<br><br>
  - [x] `input-handlers.R`: `leprechaun_handler_df()` and `leprechaun_handler_list()` are helper functions for including data and lists *"from Websocket"*.[^leprechaun-input-handlers]
<br><br>
  - [x] `leprechaun-utils.R`: includes a `make_send_message()` function for *"send custom messages to the front-end"* with the *"namespace carried along"*. Read below for demonstration of how this is used.[^leprechaun-utils]
<br><br>
  - [x] `run.R`: the standalone app function for your leprechaun app (covered in [Launch](launch.qmd)).
<br><br>
  - [x] `server.R` & `ui.R` are applications primary UI and server functions.
<br><br>
    - [x] `ui`: contains the application UI and the `assets()` function (which calls `serveAssets()` covered above).[^leprechaun-ui]
<br><br>
    - [x] `server.R`: creates `send_message` from `make_send_message(session)` (covered below).[^leprechaun-server]
<br><br>
  - [x] `zzz.R` is a utility function file that holds the `.onLoad()` function for adding external resources (using methods covered in [External files](external.qmd)).[^leprechaun-zzz]
 
[^leprechaun-zzz]: [Link to `R/zzz.R`]((https://github.com/mjfrigaard/moviesApp/blob/fw_lap/R/zzz.R)) file.
 
[^leprechaun-server]: [Link to `R/server.R`]((https://github.com/mjfrigaard/moviesApp/blob/fw_lap/R/server.R)) file.

[^leprechaun-ui]: [Link to `R/ui.R`]((https://github.com/mjfrigaard/moviesApp/blob/fw_lap/R/ui.R)) file.

[^leprechaun-assets]: [Link to `R/assets.R`]((https://github.com/mjfrigaard/moviesApp/blob/fw_lap/R/assets.R)) file.

[^leprechaun-input-handlers]: [Link to `R/input-handlers.R`]((https://github.com/mjfrigaard/moviesApp/blob/fw_lap/R/input-handlers.R)) file.

[^leprechaun-utils]: [Link to `R/leprechaun-utils.R`](https://github.com/mjfrigaard/moviesApp/blob/fw_lap/R/leprechaun-utils.R) file.

```{bash}
#| eval: false
#| code-fold: false
R
├── _disable_autoload.R # <1>
├── assets.R # <2>
├── input-handlers.R # <3>
├── leprechaun-utils.R # <4>
├── run.R # <5>
├── server.R # <6>
├── ui.R # <7>
└── zzz.R # <8>

1 directory, 8 files
```
1. Disables `shiny::loadSupport()`  
2. Includes functions for serving JavaScript files, adding/removing modules, and collapsing files. 
3. Utility functions for handling `list`s and `data.frame`s  
4. Contains the `make_send_message()` function for 'send[ing] custom messages to the front-end'
5. Standalone app function  
6. App primary server function   
7. App primary ui function   
8. Includes wrapper for adding external files 

- [x] **Adding dependencies**: `shiny`, `bslib`, `htmltools` and `pkgload` should be added to the `DESCRIPTION` with `usethis::use_package()` (covered in the [Dependencies](dependencies.qmd) chapter).

```{bash}
#| eval: false
#| code-fold: false
Imports: 
    bslib,
    htmltools,
    shiny
Suggests: 
    pkgload
```

The `lap` folder structure should look familiar if you've been following along with the previous chapters. The standard R package files (`DESCRIPTION`, `NAMESPACE`, and `.Rproj`) are accompanied by a `.leprechaun` lock file.

```{bash}
#| eval: false
#| code-fold: false
lap/
├── .leprechaun
├── DESCRIPTION
├── NAMESPACE
└── moviesApp.Rproj

```

The initial call to `leprechaun::scaffold()` creates the following folders in the `inst/` folder (recall that `inst/` contents are available when the package is installed).

```{bash}
#| eval: false
#| code-fold: false
inst/
├── assets
├── dev
├── img
└── run
    └── app.R

5 directories, 1 file
```

`inst/run/app.R` contains a call to `leprechaun::build()`, `pkgload::load_all()`, then a call to the standalone app function, `run()`.[^leprechaun-inst-run-app]

[^leprechaun-inst-run-app]: [Link to `inst/run/app.R`](https://github.com/mjfrigaard/moviesApp/blob/fw_lap/inst/run/app.R) file.

## Development 

- [x] **Code files**: new code files in `leprechaun` apps can be created with `usethis::use_r()` or with a helper function:
<br><br>
  - [x] Create modules with `add_module()`. Modules created with `add_module("name")` will have:[^leprechaun-add-module]
<br>
    -   A module file with a `module_name` prefix (`R/module_name.R`)
    -   A module UI function: `nameUI()` 
    -   A module server function: `name_server()`  
<br>
  - [x] Create an `app.R` file with `add_app_file()`. This includes a call to `pkgload::load_all()` and `run()`.[^leprechaun-add-app-file]
<br><br> 
- [x] **App files**: `R/run.R` contains functions for running the app.[^leprechaun-add-run]
<br><br>
  - [x] Add the modules to `R/ui.R` and `R/server.R`.
<br><br>
    -   `R/server.R` includes a call to `send_message` by default.[^leprechaun-server-fun]
<br><br>
    -   `R/ui.R` holds the `ui()` and `assets()` functions.[^leprechaun-assets-fun]
<br><br>
  - [x] **Utility function**: `R/utils_scatter_plot.R` holds the `scatter_plot()` utility function.[^leprechaun-add-util-fun]
<br><br>
  - [x] **Adding files**: The `R/zzz.R` file contains the `.onLoad()` function, which wraps `system.file('img', package = 'lap')` and `addResourcePath()` for including external resources.
<br><br>

[^leprechaun-add-module]: `leprechaun` modules do not have the same naming conventions as `golem` (or that I've recommended throughout this book).

[^leprechaun-add-app-file]: `pkgload::load_all()` has `reset` set to `TRUE` and `helpers` set to `FALSE`.

[^leprechaun-assets-fun]: `assets()` loads the resources called in the `R/assets.R` file with the `serveAssets()` function.

[^leprechaun-server-fun]: `make_send_message()` is in `R/leprechaun-utils.R`.

[^leprechaun-add-util-fun]: The same `scatter_plot()` function from `moviesApp` (i.e, imports `.data` from `rlang`)

[^leprechaun-add-run]: `R/run.R` includes functions for running the production (`run()`) and development (`run_dev()`) version of the application. 

```{bash}
#| eval: false
#| code-fold: false
R
├── module_plot_display.R
├── module_var_input.R
├── run.R
├── server.R
├── ui.R
└── utils_scatter_plot.R

1 directory, 6 files
```

### Data files 

- [x] **Including data files**: the `movies.RData` data was moved into `inst/extdata`, then loaded into `data/` with the script created with `usethis::use_data_raw('movies')` (similar to methods covered in the [Data](data.qmd) chapter):

```{bash}
#| eval: false
#| code-fold: false
data-raw/
└── movies.R

1 directory, 1 file
```

```{bash}
#| eval: false
#| code-fold: false
└── extdata
      └── movies.RData
1 directory, 1 file
```

```{bash}
#| eval: false
#| code-fold: false
data
└── movies.rda

1 directory, 1 file
```

### Adding features

The `leprechaun` workflow involves a combination of `use_` functions that are combined with `leprechaun::build()` to add various functionality to your application. I'll demonstrate three options in the sections below: 

#### Use `packer`

I'll demo using the `make_send_message()` from the  JavaScript example on the [package website](https://leprechaun.opifex.org/#/examples/basic#javascript):

- [x] Run `packer::scaffold_leprechaun()` 
<br><br>
    -   *Initializes `npm`, adds `npm` scripts, creates `srcjs`, `srcjs/config`, `webpack`, `webpack-cli`, and `webpack-merge`*
<br><br>
- [x] Run `leprechaun::use_packer()`
<br><br>
- [x] Run `leprechaun::build()`

This creates `inst/dev/packer.R` and `inst/assets/index.js`.[^leprechaun-packer-folders]

```{bash}
#| eval: false
#| code-fold: false
inst
├── assets
│   └── index.js
├── dev
│   └── packer.R
├── extdata
│   └── movies.RData
├── img
└── run
    └── app.R
```

Assign the output from `make_send_message()` to `send_message()` in `R/server.R`, then pass the `msgId` and `text` of the message: 

```{r}
#| eval: false
#| code-fold: false
server <- function(input, output, session){
	## New code -->
  send_message <- make_send_message(session) # <1>
  
	send_message("show-packer", # <2>
				  text = "this message is from your R/server.R file") # <2>
	
   selected_vars <- var_input_server("vars")

   plot_display_server("plot", var_inputs = selected_vars)
   ## New code <--

}
```
1. Create `send_message()`   
2. Use `send_message()` to send message the UI.

[^leprechaun-packer-folders]: Using [`packer`](https://packer.john-coene.com/#/) will download multiple folders into your `leprechaun` app package root folder (`srcjs/`, `node_modules/`, `package-lock.json`, `package.json`, `webpack.common.js`, `webpack.dev.js`, `webpack.prod.js`). These are not necessary and can be removed (but do not remove `inst/dev/packer.R` and `inst/assets/index.js`).

After loading, documenting, and installing your app-package: 

```{r}
#| label: dev_key_all_02
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```

Run the application: 

```{r}
#| eval: false
#| code-fold: false
lap::run()
```

::: {#fig-leprechaun_send_message_server}

![`send_message()` in `lap::run()`](images/leprechaun_send_message_server.png){#fig-leprechaun_send_message_server width='70%' align='center'}

Adding the `make_send_message()` functionality to `R/server.R`
:::

#### Add images

Adding images is simplified with the `.onLoad()` function, which I'll demonstrate by adding the `leprechaun.jpg` image file to the UI function.

- [x] Place the `leprechaun.jpg` file in `inst/img/`
<br><br>
- [x] Add the `img/` path to the code to UI: 

```{r}
#| eval: false
#| code-fold: false
tags$img(
  src = "img/leprechaun.jpg", 
  height = "25%", 
  width = "25%")
```
  
- [x] run `devtools::load_all()`, `devtools::document()`, and `devtools::install()`, then run the application with `run()`: 

```{r}
#| label: dev_key_all_03
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```

```{r}
#| eval: false
#| code-fold: false
lap::run()
```

::: {#fig-leprechaun_add_image}
![`leprechaun.jpg` in `R/ui.R`](images/leprechaun_add_image.png){#fig-leprechaun_add_image width="100%" fig-align="center"}

Adding images to `inst/img/`
:::

#### Use Sass

To add Sass styling, I can use `leprechaun`'s [`use_sass()`](https://leprechaun.opifex.org/#/reference/use_sass) function

- [x] Run `leprechaun::use_sass()`
<br><br>
  -   a `scss/` folder will be created that contains `_core.scss` and `main.scss`
    
```{bash}
#| eval: false
#| code-fold: false
scss
├── _core.scss
└── main.scss

1 directory, 2 files
```

  -   The original `_core.scss` file is below
    
```scss
html{
	.error {
		color: red
	}
}
```

- [x] Change the `color:` from `red` to green (`#38B44A`) using `$accent: #38B44A;`
    
```scss
$accent: #38B44A;

html{
    h1 {
        color: $accent;
    }
}
```

- [x] Save this file and run [`leprechaun::build()`](https://leprechaun.opifex.org/#/reference/build):[^leprechaun-scss-folders]

```{r}
#| label: build-leprechaun
#| code-fold: false
#| eval: false
leprechaun::build()
```

```{bash}
#| label: build-running-sass-leprechaun
#| code-fold: false
#| eval: false
✔ Running packer.R
✔ Bundled       
✔ Running sass.R
```

- [x] Once again, run `devtools::load_all()`, `devtools::document()`, and `devtools::install()`, then run the application with `run()`:

```{r}
#| label: dev_key_all_04
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```

```{r}
#| eval: false
#| code-fold: false
lap::run()
```

::: {#fig-leprechaun_add_scss}
![](images/leprechaun_add_scss.png){#fig-leprechaun_add_scss width="100%" fig-align="center"}

Running `lap` with new Sass
:::

[^leprechaun-scss-folders]: The `scss` folder is added to the root directory, but after running `leprechaun::build()` and creating `inst/dev/sass.R`, this folder can be removed. 

## Tests 

`leprechaun` doesn't any specific support for testing (like the `golem` framework), but we can create tests using any combination of `testthat`, `testServer()`, and `shinytest2`. 

## `lap` dependencies 

It's also worth noting that using the `leprechaun` framework doesn't add itself as a dependency: 

```{r}
#| eval: false 
#| code-fold: false
# in the fw_lap branch of moviesApp
pak::local_deps_explain(deps = 'leprechaun', root = ".")
```

```{verbatim}
x leprechaun  
```

## Recap 

[`leprechaun`](https://leprechaun.opifex.org/#/) apps are built using the same methods as app-packages (`devtools` and `usethis`), and are intended to be a 'leaner and smaller' version of `golem`.

> *"it generates code and does not make itself a dependency of the application you build; this means applications are leaner, and smaller"*

`leprechaun` is similar to `golem` in that it 'bundles' various app-package development functions into helper/utility functions. For example, the `.onLoad()` function saves some time (at the cost of making your app code less clear and explicit). 

`leprechaun` also relies on external packages like [`packer`](https://packer.john-coene.com/#/) to integrate and bundle external code files, so becoming more familiar with these packages will extend what you can build with `leprechaun`.

