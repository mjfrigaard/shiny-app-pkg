# Packages 

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

::: {layout="[85, 15]" layout-valign="top"}

This chapter covers the 'necessary ingredients' of R packages. We’ll start by covering the differences between shiny projects, R packages, and shiny app-packages. Then, we’ll dive into the requirements for 1) creating new shiny app-packages, and 2) converting shiny app projects into shiny app-packages.

![](img/r_pkg.png){fig-align="right"}

:::

```{r}
#| label: co_box_tldr
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", look = "minimal",
  header = "![](img/00_index_pkg.png){width='9%'} &emsp; TLDR", 
  fold = TRUE,
  contents = "
  
#####
  
Functional packages require three things:
  
  1. A `DESCRITPION` file with the following fields:\n
  \`\`\`bash
  Package
  Version
  License
  Description
  Title
  Author
  Maintainer
  \`\`\`
  
  2. An `Rproj` file with the following fields:\n
  \`\`\`bash
  BuildType: Package
  PackageUseDevtools: Yes
  PackageInstallArgs: --no-multiarch --with-keep.source
  \`\`\`
  
&emsp; Access these settings via **Tools** > **Project Options** > **Build Tools**
  
  3. `devtools` installed\n
  \`\`\`r
  install.packages('devtools')
  library(devtools)
  \`\`\`
  "
)
```


## Projects, packages, and app-packages

Before we start, we should establish some operational definitions of what is meant by the terms 'project', 'package', and 'app-package'. 

:::{.column-margin}

```{r}
#| eval: false
#| include: false
rgb <- c(
  'r pkg' = "#ad343e",
  'shiny project' = "#00916e",
  'shiny app package' = "#00a6ed"
)
```

I'll use color to differentiate [**Shiny app projects**]{style="color: #00916e"}, [**R packages**]{style='color: #ad343e;'}, and [**Shiny app-packages**]{style="color: #00a6ed"}

:::

-   [**Shiny App Projects**]{style="color: #00916e"}: I consider a [**Shiny app project**]{style="color: #00916e"} to be any directory of files requiring R (the binary downloaded from [CRAN](https://cran.r-project.org/) with a version number and neat names like, '*R 4.3.1 "Beagle Scouts" released on ...*') to execute with an RStudio/Posit workbench project file (`.Rproj`) and an application (contained in an `app.R` file or `ui.R`/`server.R` files).

-   [**R Package**]{style='color: #ad343e;'}: I'll use the term [**R package**]{style='color: #ad343e;'} to describe a directory of functions, documentation, or data that can be installed and loaded into an R session. An [**R package**]{style='color: #ad343e;'} includes the necessary dependency management (`NAMESPACE`) and metadata files (`DESCRIPTION`) *and* has access to the package development tools in RStudio/Posit Workbench.

-   [**Shiny app-packages**]{style="color: #00a6ed;"}: A [**shiny app-package**]{style="color: #00a6ed;"} (which you have probably already guessed) is an [**R package**]{style='color: #ad343e;'} containing a [**shiny app**]{style="color: #00a6ed"}lication. [**shiny app-packages**]{style="color: #00a6ed"} have all of the functionality of a standard [**R package**]{style='color: #ad343e;'} but also contain the files and folders required to successfully develop, run, and deploy a [**shiny app**]{style="color: #00a6ed"}.

### Motivation

There are multiple reasons for deciding to develop a [**shiny app-package**]{style="color: #00a6ed;"}: your [**shiny app project**]{style="color: #00916e"} might need to be in an [**R package**]{style='color: #ad343e;'} structure due to specific organizational practices around deploying applications, or maybe you've been convinced it will improve the shareability/reproducibility of your [**shiny app project**]{style="color: #00916e"}. 

Regardless of the reason, you've likely found yourself in one of two circumstances:

1. You want to develop a new app, but want it structured as an [**R package**]{style='color: #ad343e;'}.  

2. You've already developed a [**shiny app project**]{style="color: #00916e"}, but now you need to convert it to a [**shiny app-packages**]{style="color: #00a6ed;"}

The previous chapter covered a few practices to adopt during shiny development that improve the extensibility of your [**shiny app project**]{style="color: #00916e"} to an [**shiny app-package**]{style="color: #00a6ed"}.[^pkgs-7]

[^pkgs-7]: Shiny app project features are covered in the [Project Folders](https://mjfrigaard.github.io/shinyap/shiny.html#project-folders) section of the Shiny apps chapter.

```{r}
#| label: co_workbench_app_packages
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", fold = TRUE, look = 'minimal', 
  header = "R Packages & Posit Workbench",
  contents = "
  
Posit Workbench (formerly RStudio) is a popular integrated development environment (IDE) that streamlines many R package development tasks. I’ve purposely connected Posit Workbench to the definitions above for R package and Shiny app-packages–specifically, the package development tools provided in the Build pane and `devtools`.

However, developing R packages in Posit Workbench (or using `.Rproj` files) is not required. There are alternative package development tools and processes outside of Posit Workbench, and many developers employ these setups.

Package development outside Posit Workbench would look almost identical to development in the IDE:

1. Create the package structure (`R/` folder for `.R` scripts, `man/` folder for documentation, `data/` folder for datasets, etc.)
  
2. Add `DESCRIPTION` and `NAMESPACE` files, etc.
  
3. Ensure the package can be installed and loaded into an R session.
  
It’s also possible to use many of the development workflow functions we’ll cover here outside of the IDE (`roxygen2::roxygenize()`, `devtools::check()`, `devtools::install()`, etc.).

  "
)
```

### [R packages]{style='font-weight: bold; color: #ad343e;'} vs. [Shiny app projects]{style="font-weight: bold; color: #00916e"}

Below is are folder trees with some of the typical files and folders found in [**R packages**]{style='color: #ad343e;'} (on the left) and the files that currently exist in `shinyAppProj` (on the right), our [**shiny app project**]{style='color: #00916e;'}. 

::: {layout="[45, 55]"}

```{bash}
#| eval: false
#| code-fold: false
#| echo: true
<R package>/
    ├── DESCRIPTION
    ├── <R package>.Rproj
    ├── LICENSE 
    ├── LICENSE.md 
    ├── NAMESPACE 
    ├── NEWS.md
    ├── README.Rmd
    ├── README.md
    ├── renv.lock
    ├── R/
    ├── man/
    ├── tests/
    ├── data/ 
    ├── data-raw/ 
    ├── vignettes/ 
    ├── inst/ 
    └── renv/
  
```

```{bash}
#| eval: false
#| code-fold: false
shinyAppProj/
├── DESCRIPTION
├── shinyAppProj.Rproj
├── R/
│   ├── mod_scatter_display.R
│   ├── mod_var_input.R
│   └── utils.R
├── README.md
├── app.R
├── movies.RData
└── www/
    └── shiny.png

4 directories, 9 files
```

:::


[**R packages**]{style='color: #ad343e;'} can be easily shared, reused, and reproduced because they all have a familiar structure, and each folder and file plays an essential role in extending R’s capabilities.[^pkgs-8]

[^pkgs-8]: Fortunately, [**shiny app-packages**]{style="color: #00a6ed;"} don't require *all* the files and folders displayed in the folder tree to gain the functionality and benefits of an [**R package**]{style='color: #ad343e;'}. 

This chapter will cover the minimum requirements for an [**R package**]{style='color: #ad343e;'}, so you can handle both creating new [**shiny app-packages**]{style="color: #00a6ed"} and converting existing [**shiny projects**]{style="color: #00916e"} into [**shiny app-packages**]{style="color: #00a6ed"}.

## What makes an [R package]{style='font-weight: bold; color: #ad343e;'}?

If you've done some research on [**R packages**]{style='color: #ad343e;'}, you've probably encountering one (or both) of the following statements, 

> *'Every package must have a `DESCRIPTION`. In fact, it’s the defining feature of a package (RStudio and `devtools` consider any directory containing `DESCRIPTION` to be a package)'* - [R Packages, 2ed (Chapter 9, `DESCRIPTION`)](https://r-pkgs.org/description.html#the-description-file)
> 
> *'all a project needs to be a package is a directory of `R/` files and a `DESCRIPTION` file.'* - [Mastering Shiny (Chapter 20, Packages)](https://mastering-shiny.org/scaling-packaging.html#summary-18)


The information above should be confusing if you've been following along with the code in `shinyAppProj`. 

We've created a [**shiny app project**]{style='color: #00916e;'} (`shinyAppProj`) with a `DESCRIPTION` file and an `R/` directory, but it's not a functioning [**R package**]{style='color: #ad343e;'}. 

As we noted above, a functioning [**R package**]{style='color: #ad343e;'} can be installed and loaded into an R session *and* has access to the **Build** pane in the IDE.

### Can we load it with [`devtools`]{style="font-size: 1.05em"}?

Package development kicks off with the `load_all()` function from `devtools`, which is similar to calling `library()` (we'll cover this function extensively in the `devtools` chapter). However, when we attempt to load the code in the `R/` folder with `load_all()`, we see the following error:

```{r}
#| eval: false 
#| code-fold: false
install.packages("devtools")
library(devtools)
devtools::load_all()
```


::: {#fig-02_pkgs_load_all_error}
![Load All Error](img/02_pkgs_load_all_error.png){#fig-02_pkgs_load_all_error width="100%" fig-align="center"}

`devtools` is looking for the **`Package` field** in our `DESCRIPTION` file
:::

### Where is the 'Build' pane?

When opened, functioning [**R packages**]{style='color: #ad343e;'} have access to the **Build** pane, which allows developers to quickly load, install, and test their packages. 

But when `shinyAppProj` is opened, the **Build** pane is not displayed in the IDE:

:::: {.column-page-inset-right}

::: {#fig-02_pkgs_shiny_app_ide}
![`shinyAppProj` IDE](img/02_pkgs_shiny_app_ide.png){#fig-02_pkgs_shiny_app_ide height="100%" width="100%" fig-align="center"}

Project IDE panes
:::

::::


As we've just learned, the presence of the `DESCRIPTION` file and an `R/` folder are insufficient to turn a [**shiny app project**]{style='color: #00916e;'} into a functioning [**R package**]{style='color: #ad343e;'} (or a [**shiny app-packages**]{style="color: #00a6ed;"}).

## What *really* makes an R [package]{style='font-weight: bold; color: #ad343e;'}?

> "*A project needs **a `DESCRIPTION` file with specific fields**, a directory of `R/` files, and **a properly configured `.Rproj` file** to be a **functioning** R package.*"

Let's see how each of these requirements work together to convert the contents of `shinyAppProj` from a [**shiny app project**]{style="color: #00916e"} into a [**shiny app-package**]{style='color: #ad343e;'}.

### [`DESCRIPTION`]{style="font-size: 0.95em"} fields

```{r}
#| label: git_box_shinyAppProj_04_description
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  fig_pw = '75%', 
  branch = "04_description", 
  repo = 'shinyAppProj')
```

The official R documentation[^pkgs-9] lists the following required fields for the `DESCRIPTION` in [**R packages**]{style='color: #ad343e;'}:

[^pkgs-9]: The mandatory fields are covered in [Writing R Extensions, 'The DESCRIPTION file'](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#The-DESCRIPTION-file)

> *The ‘Package’, ‘Version’, ‘License’, ‘Description’, ‘Title’, ‘Author’, and ‘Maintainer’ fields are mandatory.*

Below is an example `DESCRIPTION` file for `shinyAppProj` with the mandatory fields:[^pkgs-10]

[^pkgs-10]: Always leave empty final line in the `DESCRIPTION` file.

```{bash}
#| eval: false
#| code-fold: false
Package: shinyAppProj
Title: movies app
Version: 0.0.0.9000
Author: John Smith [aut, cre]
Maintainer: John Smith <John.Smith@email.io>
Description: A movie-review shiny application.
License: GPL-3
                                                                  # <1>
```

1. Leave an empty final line in the `DESCRIPTION`

::: {.callout-tip title="`Author` and `Maintainer` fields" collapse='true'}

Note that the `Author` and `Maintainer` fields require additional information beyond first and last name (i.e., `John Smith`). These can be created with the `utils::person()` function:

```{r}
#| collapse: true
#| code-fold: false 
#| code-summary: 'show/hide person() output'
# Author
utils::person(
  given = "John", 
  family = "Smith", 
  role = c("aut", "cre"))
# Maintainer
utils::person(
  given = "John", 
  family = "Smith", 
  email = "John.Smith@email.io")
```

:::

After adding the mandatory fields to the `DESCRIPTION` file, `devtools::load_all()` runs without the previous error, but the IDE still doesn't display the **Build** pane: 

:::: {.column-page-inset-right}

::: {#fig-02_pkgs_shiny_app_ide_desc_load_all}
![`shinyAppProj` IDE](img/02_pkgs_shiny_app_ide_desc_load_all.png){#fig-02_pkgs_shiny_app_ide_desc_load_all height="100%" width="100%" fig-align="center"}

[Where is the **Build** pane?]{style="font-style: italic; font-size: 1.10em;"}
:::

::::


### [Project]{style="font-weight: bold; color: #00916e"} Options...

[(i.e., the [`.Rproj`]{style="font-size: 1.10em"} file)]{style="font-style: italic; font-size: 1.30em"}

`.Rproj` files are plain text files with various settings for the IDE. We were able to run `devtools::load_all()` above *without* the presence of the **Build** pane because the IDE displays the **Build** pane after reading the fields in the `.Rproj` file.  

The quickest way to access the fields in the `.Rproj` file is under **Tools** > **Project Options...**.

#### Default options

**Tools** > **Project Options...** provide access to the project-level options. For example, fields 2 - 4 are available under **General**, 5 - 8 affect the **Code** options, and the final two fields deal with **Sweave**. 

::: {#fig-02_pkgs_rproj_defaults}
![`shinyAppProj.Rproj` fields](img/02_pkgs_rproj_defaults.png){#fig-02_pkgs_rproj_defaults width="100%" fig-align="center"}

Field settings from `shinyAppProj.Rproj` file
:::

The default settings were created when we selected the [**shiny app project**]{style='color: #00916e;'} from the **New Project Wizard** in the last chapter.

#### Build tools

I’ve placed the `.Rproj` file from `shinyAppPkg` with the example `.Rproj` file from [R Packages, (2ed)](https://r-pkgs.org/) side-by-side so you can compare them below:[^pkgs-11]

[^pkgs-11]: `.Rproj` files are covered in the [What makes an RStudio Project? section of R Packages (2 ed)](https://r-pkgs.org/workflow101.html#what-makes-an-rstudio-projec)

::: {#fig-02_pkgs_rproj_compare}
![`.Rproj` files](img/02_pkgs_rproj_compare.png){#fig-02_pkgs_rproj_compare  width="100%" fig-align="center"}

Comparison of `shinyAppProj.Rproj` file and `.Rproj` file in [R Packages, 2ed](https://r-pkgs.org/workflow101.html#what-makes-an-rstudio-project)
:::

I've circled the fields in the `.Rproj` file that illustrate it's configured to work with an [**R package**]{style='color: #ad343e'}. Note that in `shinyAppProj`, the **Project build tools** are initially set to (**None**) under **Build Tools**:

::: {#fig-02_pkgs_rproj_build_tools}
![`shinyAppProj.Rproj` build tools](img/02_pkgs_rproj_build_tools.png){#fig-02_pkgs_rproj_build_tools height="100%" width="100%" fig-align="center"}

Build tool settings in `shinyAppProj.Rproj` file
:::

Changing the **Project build tools** option to **Package** will set the default **Build Tools** options:[^pkgs-12]

[^pkgs-12]: The initial **Build Tools** settings (i.e., **(None)**) should help explain the absence of any [**R package**]{style='color: #ad343e;'} development fields in the `shinyAppProj.Rproj` when we compared it to the version in [R Packages, 2ed](https://r-pkgs.org/workflow101.html#what-makes-an-rstudio-project) (i.e., `BuildType`, `PackageUseDevtools`, `PackageInstallArgs`, and `PackageRoxygenize`). 

::: {#fig-02_pkgs_rproj_build_tools_defaults}
![Default package build tools](img/02_pkgs_rproj_build_tools_defaults.png){#fig-02_pkgs_rproj_build_tools_defaults height="100%" width="100%" fig-align="center"}

Default build tool settings
:::

The links between the **Build Tools** options and fields in `shinyAppProj.Rproj` are in the figure below:

::: {#fig-02_pkgs_rproj_connect_build_tools}
![`shinyAppProj.Rproj` build tool fields](img/02_pkgs_rproj_connect_build_tools.png){#fig-02_pkgs_rproj_connect_build_tools width="100%" fig-align="center"}

Default build tool settings in `shinyAppProj.Rproj` file
:::

-   `BuildType: Package` tells the IDE `shinyAppProj` is an [**R package**]{style='color: #ad343e;'} and triggers the **Build** pane.

-   `PackageUseDevtools: Yes` links the options in the **Build** pane to the [`devtools` package](https://devtools.r-lib.org/).

-   The `PackageInstallArgs` are complicated, but I've included some information about them in the callout block below (and you can read more in the [official R documentation](https://cran.r-project.org/manuals.html))


-   The fourth option (`PackageRoxygenize`) is available under **Generate documentation with Roxygen** > **Use roxygen to generate**:
    -   These options affect the documentation in an [**R package**]{style='color: #ad343e;'}. To match the example from [R Packages, 2ed](https://r-pkgs.org/workflow101.html#what-makes-an-rstudio-project) above, make sure **Rd files**, **Collate field**, and **NAMESPACE file** are selected and click **OK**.


::: {#fig-02_pkgs_package_roxygenize}
![`PackageRoxygenize` in `.Rproj` file](img/02_pkgs_package_roxygenize.png){#fig-02_pkgs_package_roxygenize width="100%" fig-align="center"}

`roxygen2` build settings
:::

After clicking **OK**, the IDE will automatically reboot, and the additional fields will be added to the bottom of the `shinyAppProj.Rproj`:

```{r}
#| label: git_box_shinyAppProj_05_rproj
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  fig_pw = '75%', 
  branch = "05_rproj", 
  repo = 'shinyAppProj')
```

```{bash}
#| eval: false
#| code-fold: false
Version: 1.0

RestoreWorkspace: Default
SaveWorkspace: Default
AlwaysSaveHistory: Default

EnableCodeIndexing: Yes
UseSpacesForTab: Yes
NumSpacesForTab: 2
Encoding: UTF-8

RnwWeave: Sweave
LaTeX: XeLaTeX

BuildType: Package
PackageUseDevtools: Yes
PackageInstallArgs: --no-multiarch --with-keep.source
PackageRoxygenize: rd,collate,namespace
                                                            # <1>
```
1. Always leave an empty final line in the `DESCRIPTION` 

```{r}
#| label: co_rproj_package_install_args
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g",
  fold = TRUE,
  header = "What is `--no-multiarch --with-keep.source`?",
  contents = "
  -   `--no-multiarch`: refers to the option for the package installer to only compile the package for the architecture of the current R session. By default, R tries to compile packages for 32-bit and 64-bit architectures if running in a 64-bit R session on Windows. This flag can help avoid problems if a package can only be compiled on one architecture. Read more [here](https://cran.r-project.org/doc/manuals/r-release/R-admin.html#Checking-installed-source-packages).
  
  -   `--with-keep.source`: In R, when a function is created, its body can be stored in two ways: 1) as a parsed but unevaluated expression and 2) as a character string containing the function's source code. By default, only the parsed expression is kept. If `–with-keep.source` is specified, R will also keep the source code as a character string, which can be helpful for debugging and tools that analyze or modify source code. Read more [here](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Tidying-R-code).
    "
)
```

#### Build pane

When the new session starts, the new project-level options activate the **Build** pane in the IDE. 

:::: {.column-page-inset-right}

::: {#fig-02_pkgs_shiny_app_pkg_ide}
![Build pane in IDE](img/02_pkgs_shiny_app_build_pane.png){#fig-02_pkgs_shiny_app_pkg_ide height="100%" width="100%" fig-align="center"}

**Build** pane triggered from project-level settings
:::

::::

When the IDE reboots, I can see the **Build** pane has been added, and I can check the [**R package**]{style='color: #ad343e;'} functionality by loading the code with **Build** > **Load All**

::: {#fig-02_pkgs_build_pane_tools}
![Load the code in the `R/` folder](img/02_pkgs_build_pane.png){#fig-02_pkgs_build_pane_tools width="100%" fig-align="center"}

Identical to running `devtools::load_all()`
:::

I should see the following in the **Console**:

```{verbatim}
#| eval: false 
#| code-fold: false
ℹ Loading shinyAppProj
```

There you have it--`shinyAppProj` is a functional [**R package**]{style="color: #ad343e"}!

## Functional [R packages]{style='font-weight: bold; color: #ad343e;'}

:::: {.column-page-inset-right}

::: {#fig-02_pkgs_shiny_app_pkg_ide_desc}
![**shiny app-package** (with `DESCRIPTION` and **Build** pane)](img/02_pkgs_build_pane_tools.png){#fig-02_pkgs_shiny_app_pkg_ide_desc width="100%" fig-align="center"}

Fully functional **shiny app-package**
:::

::::

In a functional [**R package**]{style='color: #ad343e;'}: 

1.   The `DESCRIPTION` file contains the seven mandatory fields (`Package`, `Version`, `License`, `Description`, `Title`, `Author`, and `Maintainer`), making running the necessary devtools functions possible. 

2.   The `.Rproj` file contains the three package configuration fields (`BuildType: Package`, `PackageUseDevtools: Yes`, and `PackageInstallArgs: --no-multiarch --with-keep.source`), which makes the **Build** pane accessible and functional. 

The items above will create a functional [**R package**]{style='color: #ad343e;'}, but these are the first steps (we haven't developed anything yet!) on our way to a [**shiny app-package**]{style="color: #00a6ed;"}.

Think of the two items above as a two-part process: the `DESCRIPTION` requires specific fields,[^pkgs-13] and the IDE requires `.Rproj` fields to trigger the **Build** pane.[^pkgs-14]

[^pkgs-13]: The [mandatory fields](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#The-DESCRIPTION-file) prevent the `devtools` error we encountered above.

[^pkgs-14]: If you'd like to learn more about the topics in this chapter, you should read
[Writing R Extensions](https://cran.r-project.org/doc/manuals/r-release/R-exts.html) (the official documentation for creating R packages) and [R Packages, 2ed](https://r-pkgs.org/).

## Creating [**shiny app-packages**]{style='font-weight: bold; color: #00a6ed;'} with [`create_package()`]{style="font-size: 0.95em"}

The Posit documentation[^pkgs-15a] lists the following ways to create [**R packages**]{style='color: #ad343e;'},[^pkgs-15b]

> 1. Call `usethis::create_package()`.
> 
> 2. In RStudio, do **File** > **New Project** > **New Directory** > **R Package**. This ultimately calls `usethis::create_package()`, so really there’s just one way.
> 

[^pkgs-15a]: This information comes from the [Writing R Packages](https://docs.posit.co/ide/user/ide/guide/pkg-devel/writing-packages.html) documentation for Posit Workbench.

[^pkgs-15b]: We now know it's possible to create an [**R package**]{style='color: #ad343e;'} with the `DESCRIPTION` file fields and configuring the **Project Build Tools**. 

`create_package()` is a great option if you're looking for a way to quickly create or convert your [**shiny app project**]{style="color: #00916e"} into a [**shiny app-package**]{style='color: #00a6ed;'}.[^pkgs-16] In the following sections I'll cover some suggestions for using `create_package()`.

[^pkgs-16]: `usethis::create_package()` is covered in the ['Fundamental development workflows' chapter of R Packages, 2ed](https://r-pkgs.org/workflow101.html)

### New [shiny app-packages]{style="font-weight: bold; color: #00a6ed"}

If you haven’t written any code and want to create a new [**shiny app-package**]{style="color: #00a6ed;"}, [`create_package()`](https://usethis.r-lib.org/reference/create_package.html) is the quickest way to get started.

First, install `devtools`:

```{r}
#| eval: false 
#| code-fold: false
install.packages("devtools")
library(devtools)
```

`devtools` automatically loads `usethis`

```{verbatim}
#| eval: false 
#| code-fold: false
Loading required package: usethis
```

Assuming your current working directory is where you want your new [**shiny app-package**]{style="color: #00a6ed;"}, call `usethis::create_package()` with the `path` argument set to `getwd()`

```{r}
#| eval: false 
#| code-fold: false
usethis::create_package(path = getwd())
```

This call launches a series of actions:

-   First, the active project is set to whatever was given to the `path` argument. 

    ```{verbatim}
    #| eval: false 
    #| code-fold: false
    ✔ Setting active project to 'path/to/newApp'
    ```
    
-   The `R/` folder and `DESCRIPTION/` file are created:

    ```{verbatim}
    #| eval: false 
    #| code-fold: false
    ✔ Creating 'R/'
    ✔ Writing 'DESCRIPTION'
    ```
    
-   The `NAMESPACE` and `.Rproj` files are created:

    ```{verbatim}
    #| eval: false 
    #| code-fold: false
    ✔ Writing 'NAMESPACE'
    ✔ Writing 'newApp.Rproj'
    ```
    
-   The `.Rproj` is added to the `.Rbuildignore` file, the `.Rproj.user` folder is added to the `.gitignore` and `.Rbuildignore` files.
    
    ```{verbatim}
    #| eval: false 
    #| code-fold: false
    ✔ Adding '^newApp\\.Rproj$' to '.Rbuildignore'
    ✔ Adding '.Rproj.user' to '.gitignore'
    ✔ Adding '^\\.Rproj\\.user$' to '.Rbuildignore'
    ```
    
-   A new session is opened from the new `.Rproj` file:

    ```{verbatim}
    #| eval: false 
    #| code-fold: false
    ✔ Opening 'path/to/newApp/' in new RStudio session
    ```

When the new session opens, `newApp` has the following contents:

```{bash}
#| eval: false 
#| code-fold: false
newApp/
  ├── .Rbuildignore
  ├── .Rproj.user/
  ├── .gitignore
  ├── DESCRIPTION
  ├── NAMESPACE
  ├── R/
  └── newApp.Rproj
```

You're now free to develop `newApp`. Store and document any `.R` files in the `R/` folder, edit the `DESCRIPTION` file with details about the application, read through  [R Packages](https://r-pkgs.org/) and [Mastering Shiny](https://mastering-shiny.org/), and add the shiny code to complete your [**shiny app-package**]{style="color: #00a6ed;"}.

### Converting existing [shiny app projects]{style="font-weight: bold; color: #00916e"}

If you already have a [**shiny app project**]{style='color: #00916e;'} that needs to be converted into a [**shiny app-package**]{style="color: #00a6ed;"} (like the app files stored in the [`03_proj-app` branch](https://github.com/mjfrigaard/shinyAppProj/tree/03_proj-app)), you can also use `create_package(path = getwd())` in your root folder, but I recommend using the following arguments:

#### [`DESCRIPTION`]{style="font-size: 0.95em"} arguments

-   **`fields`**: these are arguments passed to `usethis::use_description()`. If the `fields` argument is empty, a boilerplate `DESCRIPTION` file is created (similar to [this one](https://r-pkgs.org/description.html#the-description-file)). 

    -   These boilerplate fields in the `DESCRIPTION` work, but I've found some of the fields are unnecessary (i.e., I've never needed `Authors@R:` or `ORCID`) and inevitably require revision, so I'd prefer to handle this during the creation process (and remove the risk of forgetting to change it later).

    -   All fields should be passed in a `list()` as `field = 'value'` pairs. 

    ```{r}
    #| eval: false 
    #| code-fold: false
    usethis::use_description(
        list(Package = 'shinyAppProj',
             Version = '0.0.0.9000',
             Title = 'movies app',
             Description = 'A movie-review shiny application.',
             "Authors@R" = NULL,
             Author = utils::person(
                given = "John", 
                family = "Smith", 
                role = c("aut", "cre")),
              Maintainer = utils::person(
                given = "John", 
                family = "Smith",
                email = "John.Smith@email.io"),
              License = "GPL-3"))
    ```
    
    -   A few fields require specially formatted values (see the `utils::person()` examples below).
    
        ```{r}
        #| eval: true 
        #| code-fold: false
        utils::person("John", "Smith", 
                      email = "John.Smith@email.io", 
                      role = c("aut", "cre"))
        ```

-   Two additional arguments from `use_description()` are passed to `create_package()`:

    -   **`check_name`**: verifies your [**shiny app-package**]{style="color: #00a6ed;"} name is valid for CRAN, so we can set this to `FALSE` (unless you're planning on submitting to CRAN)

    -   **`roxygen2`**: is `TRUE` by default and adds the fields required to use `roxygen2` (which I won't cover here because we'll cover documentation in-depth in a future chapter). 

```{r}
#| label: co_box_create_package_dot
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o", fold = TRUE,
  header = "WARNING: Don't use `usethis::create_package('.')`!",
  contents = "

When converting your existing shiny app project into a shiny app-package with `usethis::create_package()`, don't use `'.'` in the `path` argument:
  
\`\`\`r
usethis::create_package('.')
\`\`\`
  
This will return the following warning about creating nested projects, and ask if you want to proceed anyway:
  
`\`\`r
New project 'shinyAppProj' is nested inside an existing project
'./', which is rarely a good idea. If this is unexpected, 
the here package has a function,
`here::dr_here()` that reveals why './' is regarded as a
project.
  
Do you want to create anyway?

1: Yes
2: No way
3: Not now
`\`\`\


We can avoid this warning altogether by passing `getwd()` to the `path` argument, so I recommend cancelling the project creation:

\`\`\`r
Selection: 2
Error: Cancelling project creation.
\`\`\`

  "
)
```

#### IDE arguments 

-   `rstudio`: adds the necessary **Build Tools** fields in the `.Rproj` file (leave as `TRUE`)

-   `open`: can be set to `FALSE` because we don't need RStudio/Posit Workbench to open in a new session

```{r}
#| eval: false 
#| code-fold: false
usethis::create_package(
  path = getwd(),
  fields = list(Package = 'shinyAppProj',
         Version = '0.0.0.9000',
         Title = 'movies app',
         Description = 'A movie-review shiny application.',
         "Authors@R" = NULL,
         Author = utils::person(
            given = "John", 
            family = "Smith", 
            email = "John.Smith@email.io", 
            role = c("aut", "cre")),
          Maintainer = utils::person(
            given = "John", 
            family = "Smith",
            email = "John.Smith@email.io"),
          License = "GPL-3"),
  roxygen = TRUE,
  check_name = FALSE, 
  rstudio = TRUE,
  open = FALSE)
```

After running `usethis::create_package()` with the arguments above, the IDE will present us with a few prompts to confirm: 

```{verbatim}
#| eval: false 
#| code-fold: false
Overwrite pre-existing file 'DESCRIPTION'?
```

```{verbatim}
#| eval: false 
#| code-fold: false
Overwrite pre-existing file 'shinyAppProj.Rproj'?
```

The [**shiny app-package**]{style="color: #00a6ed;"} structure is below:
   
```{bash}
#| eval: false 
#| code-fold: false
├── DESCRIPTION
├── NAMESPACE
├── R
│   ├── mod_scatter_display.R
│   ├── mod_var_input.R
│   └── utils.R
├── README.md
├── app.R
├── movies.RData
├── shinyAppProj.Rproj
└── www
    └── shiny.png

3 directories, 10 files
```

The `DESCRIPTION` file (shown below) has a few additional fields (`Encoding`, `Roxygen`, and `RoxygenNote`) we didn't include when we converted `shinyAppProj` above, but we will cover these in the upcoming chapters. 

```{bash}
#| eval: false 
#| code-fold: false
Package: shinyAppProj
Title: movies app
Version: 0.0.0.9000
Author: John Smith <John.Smith@email.io> [aut, cre]
Maintainer: John Smith <John.Smith@email.io>
Description: A movie-review shiny application.
License: GPL-3
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.2.3
                                                                      # <1>
```
1. Leave an empty final line in the `DESCRIPTION`

```{r}
#| label: git_box_shinyAppProj_06_create-package
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  fig_pw = '75%', 
  branch = "06_create-package", 
  repo = 'shinyAppProj')
```

## Recap

This chapter has covered the mandatory fields in the `DESCRIPTION` file and the [**R package**]{style='color: #ad343e;'} configuration fields in `.Rproj`. We also covered creating and converting [**shiny app projects**]{style='color: #00916e;'} using the `usethis::create_package()` function.

```{r}
#| label: co_box_recap
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", 
  fold = FALSE,
  header = "Recap: Packages!",
  contents = "
  
-   **The `DESCRIPTION` file** ultimately controls whether you have a functional shiny app-package.
    -   The mandatory fields are `Package`, `Version`, `License`, `Description`, `Title`, `Author`, and `Maintainer`.

-   `usethis::create_package()` can be used to create a new R package and to convert an existing shiny project into a shiny app-package.

-   The IDE reads RStudio (`.Rproj`) files and determines R session settings at the project-level (i.e., working directory, workspace, history, code formatting, etc.)

    -   Package development settings can be accessed via **Project Options** > **Build Tools**.
  
  "
)
```

In the next chapter, I'll cover how you can quickly **Load**, **Document**, and **Install** your package!


end `packages.qmd`
