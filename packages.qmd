# Packages {.unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  header = "Caution!",
  contents = "This section is currently under development. Thank you for your patience.", 
  fold = FALSE
)
```

This chapter dives into the makings of R packages. We’ll start by covering the differences between R projects, R packages, and app-packages. Then, we’ll dive into what’s required to convert an R project into an R package.

The final section of this chapter will cover the `usethis::create_package()` function, which can be used to create new shiny app-packages and convert existing shiny projects into app-packages.

## Projects, packages, and app-packages

Before we start, we should establish some 'operational definitions' of what I mean by the terms 'project', 'package', and 'app-package'. 

:::{.column-margin}

I'll use color to differentiate shiny app [projects]{style="font-weight: bold; color: #0DA574"}, R [packages]{style='font-weight: bold; color: #F37735;'}, and [app]{style="font-weight: bold; color: #428BCA"}-[package]{style="font-weight: bold; color: #F37735"}.

:::

-   [Project]{style="font-weight: bold; color: #0DA574"}: I consider a [project]{style="font-weight: bold; color: #0DA574"} to be any directory of files requiring R (the binary downloaded from [CRAN](https://cran.r-project.org/) with a version number and neat names like, '*R 4.3.1 "Beagle Scouts" released on ...*') to execute with an RStudio/Posit workbench project file (`.Rproj`).

-   [Package]{style='font-weight: bold; color: #F37735;'}: I'll use the term [package]{style='font-weight: bold; color: #F37735;'} to describe a directory of functions, documentation, or data that can be installed and loaded into an R session. A [package]{style='font-weight: bold; color: #F37735;'} includes the necessary dependency management (`NAMESPACE`) and metadata files (`DESCRIPTION`) *and* has access to the package development tools in RStudio/Posit Workbench.

-   [App]{style="font-weight: bold; color: #1363DF"}-[package]{style="font-weight: bold; color: #F37735"}: An [app]{style="font-weight: bold; color: #428BCA"}-[package]{style="font-weight: bold; color: #F37735"} (which you have probably already guessed) is a [package]{style='font-weight: bold; color: #F37735;'} containing a shiny application. [App]{style="font-weight: bold; color: #428BCA"}-[packages]{style="font-weight: bold; color: #F37735"} have all of the functionality of a standard R [package]{style='font-weight: bold; color: #F37735;'} but also contain the files and folders required to successfully develop, run, and deploy a shiny [app]{style="font-weight: bold; color: #428BCA"}.

```{r}
#| label: co_workbench_app_packages
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", fold = TRUE,
  header = "R Packages & Posit Workbench",
  contents = "
  
Posit Workbench (formerly RStudio) is a popular integrated development environment (IDE) that streamlines many R [package]{style='font-weight: bold; color: #F37735;'} development tasks. I’ve purposely connected Posit Workbench to the definitions above for [package]{style='font-weight: bold; color: #F37735;'} and [app]{style='font-weight: bold; color: #428BCA'}-[package]{style='font-weight: bold; color: #F37735;'}–specifically, the [package]{style='font-weight: bold; color: #F37735;'} development tools provided in the Build pane and devtools.

However, developing R [packages]{style='font-weight: bold; color: #F37735;'} in Posit Workbench (or using `.Rproj` files) is not required. There are alternative [package]{style='font-weight: bold; color: #F37735;'} development tools and processes outside of Posit Workbench, and many developers employ these setups.

[Package]{style='font-weight: bold; color: #F37735;'} development outside Posit Workbench would look almost identical to development in the IDE:

1. Create the [package]{style='font-weight: bold; color: #F37735;'} structure (`R/` folder for `.R` scripts, `man/` folder for documentation, `data/` folder for datasets, etc.)
  
2. Add `DESCRIPTION` and `NAMESPACE` files, etc.
  
3. Ensure the [package]{style='font-weight: bold; color: #F37735;'} can be installed and loaded into an R session.
  
It’s also possible to use many of the development workflow functions we’ll cover here outside of the IDE (`roxygen2::roxygenize()`, `devtools::check()`, `devtools::install()`, etc.).

  "
)
```

The previous chapter covered a few practices to adopt during shiny development that improve the extensibility of your app [project]{style="font-weight: bold; color: #0DA574"} to an [app]{style='font-weight: bold; color: #428BCA;'}-[package]{style='font-weight: bold; color: #F37735;'} (these are summarized in the callout box below).

```{r}
#| label: co_shiny_recap
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  header = "Shiny 'pre-package' practices",
  contents = "
  - **Folders**
  
      - `www`: can be used to store static resources (images, CSS files, JavaScript)
  
      - `R/`: any `.R` files in the `R/` folder will automatically be loaded with your app when it's run. 
          -  Converting the code in `app.R` into separate functions (i.e., modules and standalone app functions) also allows you to develop and debug the code independently. 
  
  - **Files** 
  
      - `DESCRIPTION` files store metadata and include fields for application deployment (i.e., `DisplayMode: Showcase`)   
      - `README.md` files can document application descriptions, purposes, requirements, etc.
  
  - **Dependencies**
  
      - `renv` can be used to help manage app dependencies. 
        - Run `renv::status()` & `renv::snapshot()` to record dependencies in the lock file.
  
  ", fold = TRUE
)
```



## [App]{style='font-weight: bold; color: #428BCA'}-[packages]{style='font-weight: bold; color: #F37735'}: Motivation

There are multiple reasons for deciding to develop an [app]{style="font-weight: bold; color: #428BCA"}-[package]{style="font-weight: bold; color: #F37735"}: your app [project]{style="font-weight: bold; color: #0DA574"} might have to be in a [package]{style='font-weight: bold; color: #F37735;'} structure due to specific organizational needs or practices around deploying applications, or maybe you've been convinced it's the best practice for improving the shareability/reproducibility of your app [project]{style="font-weight: bold; color: #0DA574"}. 

Regardless of the reason, you've likely found yourself in one of two circumstances:

1. You want to develop a new shiny app, but want it structured as an [app]{style="font-weight: bold; color: #428BCA"}-[package]{style="font-weight: bold; color: #F37735"}.  

2. You've already developed a shiny app [project]{style="font-weight: bold; color: #0DA574"} but now you need to convert it to an [app]{style="font-weight: bold; color: #428BCA"}-[package]{style="font-weight: bold; color: #F37735"}

### R [package]{style='font-weight: bold; color: #F37735;'} vs. shiny [project]{style="font-weight: bold; color: #0DA574"}

Below is a folder tree with some of the typical files and folders found in R [packages]{style='font-weight: bold; color: #F37735;'}:

```{bash}
#| eval: false
#| code-fold: false
#| echo: true
<R package>/
    ├── DESCRIPTION
    ├── <R package>.Rproj
    ├── LICENSE 
    ├── LICENSE.md 
    ├── NAMESPACE 
    ├── NEWS.md
    ├── README.Rmd
    ├── README.md
    ├── renv.lock
    ├── R/
    ├── man/
    ├── tests/
    ├── data/ 
    ├── data-raw/ 
    ├── vignettes/ 
    ├── inst/ 
    └── renv/
  
```

R [packages]{style='font-weight: bold; color: #F37735;'} can be easily shared, reused, and reproduced because they all have a familiar structure, and each folder and file plays an essential role in extending R’s capabilities.

At first glance, the contents above can seem daunting when compared to the folders and files that currently exist in your app [project]{style='font-weight: bold; color: #0DA574;'} (like `projApp` below): 

```{bash}
#| eval: false
#| code-fold: false
projApp/
├── DESCRIPTION
├── R/
│   ├── mod_scatter_display.R
│   ├── mod_var_input.R
│   └── utils.R
├── README.md
├── app.R
├── movies.RData
├── projApp.Rproj
├── rsconnect/
└── www/
    └── shiny.png

4 directories, 9 files
```

Fortunately, [app]{style='font-weight: bold; color: #428BCA;'}-[packages]{style='font-weight: bold; color: #F37735;'} don't require *all* the files and folders displayed above to gain the functionality and benefits of an R [package]{style='font-weight: bold; color: #F37735;'}. 

This chapter will cover what's required in all R [packages]{style='font-weight: bold; color: #F37735;'}, so you can handle both creating new [app]{style='font-weight: bold; color: #428BCA;'}-[package]{style='font-weight: bold; color: #F37735;'} and converting existing shiny [projects]{style="font-weight: bold; color: #0DA574"} into [app]{style='font-weight: bold; color: #428BCA;'}-[package]{style='font-weight: bold; color: #F37735;'}.

## What makes an R [package]{style='font-weight: bold; color: #F37735;'}?

If you've read [R packages, 2ed](https://r-pkgs.org/) or [Mastering Shiny](https://mastering-shiny.org/index.html), you might recall encountering one (or both) of the following quotes, 

> *'Every package must have a `DESCRIPTION`. In fact, it’s the defining feature of a package (RStudio and `devtools` consider any directory containing `DESCRIPTION` to be a package)'* - [R Packages, 2ed (Chapter 9, `DESCRIPTION`)](https://r-pkgs.org/description.html#the-description-file)
> 
> *'all a project needs to be a package is a directory of `R/` files and a `DESCRIPTION` file.'* - [Mastering Shiny (Chapter 20, Packages)](https://mastering-shiny.org/scaling-packaging.html#summary-18)


If you've followed the code in `projApp`, the quotes above should confuse you. We've created a shiny [project]{style='font-weight: bold; color: #0DA574;'} with a `DESCRIPTION` file and an `R/` directory, but it is not a functioning [package]{style='font-weight: bold; color: #F37735;'}. 

As we defined above, a functioning [package]{style='font-weight: bold; color: #F37735;'} can be installed and loaded into an R session *and* has access to the **Build** pane in the IDE.

### [`devtools`]{style="font-size: 1.05em"} functions

`devtools` simulates installing and loading with `load_all()` (we'll cover this function extensively in the `devtools` chapter), 

But when we attempt to load the code in the `R/` folder with `load_all()`, we see the following error:

```{r}
#| eval: false 
#| code-fold: false
install.packages("devtools")
library(devtools)
devtools::load_all()
```


::: {#fig-load_all_error}
![Load All Error](img/load_all_error.png){#fig-load_all_error width="100%" fig-align="center"}

`devtools` is looking for the **`Package` field** in the `DESCRIPTION` file
:::

### The Build pane

When opened, functioning [packages]{style='font-weight: bold; color: #F37735;'} have access to the **Build** pane, which allows us to iterate between loading, installing, and testing quickly. But when `projApp` is opened, the **Build** pane is not displayed in the IDE:

:::: {.column-page-inset-right}

::: {#fig-shiny_app_ide}
![`projApp` IDE](img/shiny_app_ide.png){#fig-shiny_app_ide height="100%" width="100%" fig-align="center"}

Project IDE panes
:::

::::


As we've just learned, the presence of the `DESCRIPTION` file and an `R/` folder are insufficient to turn your app [project]{style='font-weight: bold; color: #0DA574;'} into a [package]{style='font-weight: bold; color: #F37735;'} (or an [app]{style="font-weight: bold; color: #428BCA"}-[package]{style="font-weight: bold; color: #F37735"}).

## What *really* makes an R [package]{style='font-weight: bold; color: #F37735;'}?

For our purposes, I'll rewrite the minimum requirements for creating a 'functional' R [package]{style='font-weight: bold; color: #F37735;'}:

> "*A [project]{style="font-weight: bold; color: #0DA574"} needs **a `DESCRIPTION` file with specific fields**, a directory of `R/` files, and **a properly configured `.Rproj` file** to be a [package]{style='font-weight: bold; color: #F37735;'}.*" - Me

Let's see how each of these requirements works together to convert the contents of `projApp` from a [project]{style="font-weight: bold; color: #0DA574"} into a [package]{style='font-weight: bold; color: #F37735;'}.

### [`DESCRIPTION`]{style="font-size: 0.95em"} fields

The [official R documentation](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#The-DESCRIPTION-file) lists the following required fields for the `DESCRIPTION` in R [packages]{style='font-weight: bold; color: #F37735;'}:

> *The ‘Package’, ‘Version’, ‘License’, ‘Description’, ‘Title’, ‘Author’, and ‘Maintainer’ fields are mandatory.*

Below is an example `DESCRIPTION` file for `projApp` with the mandatory fields:

```{r}
#| label: git_box_projApp_04_description
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  fig_pw = '75%', 
  branch = "04_description", 
  repo = 'projApp')
```


```{verbatim}
#| eval: false
#| code-fold: false
Package: projApp
Version: 0.0.0.9000
Type: Package
Title: movies app
Description: A movies data shiny application.
Author: John Smith [aut, cre]
Maintainer: John Smith <John.Smith@email.io>
License: GPL-3
*leave empty final line*
```

::: {.callout-tip title="`Author` and `Maintainer` fields" collapse='true'}

Note that the `Author` and `Maintainer` fields require additional information beyond first and last name (i.e., `John Smith`). These can be created with the `utils::person()` function:

```{r}
#| collapse: true
#| code-fold: false 
#| code-summary: 'show/hide person() output'
# Author
utils::person(
  given = "John", 
  family = "Smith", 
  role = c("aut", "cre"))
# Maintainer
utils::person(
  given = "John", 
  family = "Smith", 
  email = "John.Smith@email.io")
```

:::

After adding the mandatory fields to the `DESCRIPTION` file in `projApp`, `load_all()` runs without the previous error, but the IDE still doesn't display the **Build** pane: 

:::: {.column-page-inset-right}

::: {#fig-shiny_app_ide_desc_load_all}
![`projApp` IDE](img/shiny_app_ide_desc_load_all.png){#fig-shiny_app_ide_desc_load_all height="100%" width="100%" fig-align="center"}

[Where is the **Build** pane?]{style="font-style: italic; font-weight: bold; font-size: 1.15em; color: #772953;"}
:::

::::


### [Project]{style="font-weight: bold; color: #0DA574"} options 

[i.e., the [`.Rproj`]{style="font-size: 1.10em"} file]{style="font-style: italic; font-size: 1.30em"}

`.Rproj` files are plain text files with various settings for the IDE. We ran `devtools::load_all()` above without the presence of the **Build** pane because the IDE displays the **Build** pane after reading the fields in the `projApp.Rproj` file.  

The quickest way to access the fields in the `.Rproj` file is under **Tools** > **Project options**.

#### Default [project]{style="font-weight: bold; color: #0DA574"} options

**Tools** > **Project options** provide access to the [project]{style="font-weight: bold; color: #0DA574"}-level options. For example, fields 2 - 4 are available under **General**, 5 - 8 affect the **Code** options, and the final two fields deal with **Sweave**. 

::: {#fig-rproj_defaults}
![`projApp.Rproj` fields](img/rproj_defaults.png){#fig-rproj_defaults width="100%" fig-align="center"}

Field settings from `projApp.Rproj` file
:::

The default settings were created when we selected the Shiny App project [project]{style='font-weight: bold; color: #0DA574;'} from the **New Project Wizard** in the last chapter.

#### Build tools

If you've read the [What makes an RStudio Project? section of R Packages (2 ed)](https://r-pkgs.org/workflow101.html#what-makes-an-rstudio-project), you’ll notice a few differences between each `.Rproj` file (I’ve placed the files side-by-side so you can compare them below):


::: {#fig-rproj_compare}
![`.Rproj` files](img/rproj_compare.png){#fig-rproj_compare  width="100%" fig-align="center"}

Comparison of `projApp.Rproj` file and `.Rproj` file in [R Packages, 2ed](https://r-pkgs.org/workflow101.html#what-makes-an-rstudio-project)
:::

I've circled the fields in the [R Packages, 2ed](https://r-pkgs.org/workflow101.html#what-makes-an-rstudio-project) `.Rproj` file that illustrate it's configured to work with a [package]{style='font-weight: bold; color: #F37735'}. Note that in `projApp`, the **Project build tools** are initially set to (**None**) under **Build Tools**:

::: {#fig-rproj_build_tools}
![`projApp.Rproj` build tools](img/rproj_build_tools.png){#fig-rproj_build_tools height="100%" width="100%" fig-align="center"}

Build tool settings in `projApp.Rproj` file
:::


This setting should help explain the absence of any [package]{style='font-weight: bold; color: #F37735;'} development fields in the `projApp.Rproj` when we compared it to the version in [R Packages, 2ed](https://r-pkgs.org/workflow101.html#what-makes-an-rstudio-project) (i.e., `BuildType`, `PackageUseDevtools`, `PackageInstallArgs`, and `PackageRoxygenize`). 

Changing the **Project build tools** option to **Package** will set the default **Build Tools** options:

::: {#fig-rproj_build_tools_defaults}
![Default package build tools](img/rproj_build_tools_defaults.png){#fig-rproj_build_tools_defaults height="100%" width="100%" fig-align="center"}

Default build tool settings
:::

The links between the **Build Tools** options and fields in `projApp.Rproj` are in the figure below:

::: {#fig-rproj_connect_build_tools}
![`projApp.Rproj` build tool fields](img/rproj_connect_build_tools.png){#fig-rproj_connect_build_tools width="100%" fig-align="center"}

Default build tool settings in `projApp.Rproj` file
:::

-   `BuildType: Package` tells the IDE `projApp` is a [package]{style='font-weight: bold; color: #F37735;'} and triggers the **Build** pane.

-   `PackageUseDevtools: Yes` links the options in the **Build** pane to the [`devtools` package](https://devtools.r-lib.org/).

-   The `PackageInstallArgs` are complicated, but I've included some information about them in the callout block below (and you can read more in the [official R documentation](https://cran.r-project.org/manuals.html))


-   The fourth option (`PackageRoxygenize`) is available under **Generate documentation with Roxygen** > **Use roxygen to generate**:
    -   These options affect the documentation in your [package]{style='font-weight: bold; color: #F37735;'}. To match the example from [R Packages, 2ed](https://r-pkgs.org/workflow101.html#what-makes-an-rstudio-project) above, make sure **Rd files**, **Collate field**, and **NAMESPACE file** are selected and click **OK**.


::: {#fig-package_roxygenize}
![`PackageRoxygenize` in `.Rproj` file](img/package_roxygenize.png){#fig-package_roxygenize width="100%" fig-align="center"}

`roxygen2` build settings
:::

After clicking **OK**, the IDE will automatically reboot, and the additional fields will be added to the bottom of the `projApp.Rproj`:

```{r}
#| label: git_box_projApp_05_rproj
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  fig_pw = '75%', 
  branch = "05_rproj", 
  repo = 'projApp')
```

```{bash}
#| eval: false
#| code-fold: false
Version: 1.0

RestoreWorkspace: Default
SaveWorkspace: Default
AlwaysSaveHistory: Default

EnableCodeIndexing: Yes
UseSpacesForTab: Yes
NumSpacesForTab: 2
Encoding: UTF-8

RnwWeave: Sweave
LaTeX: XeLaTeX

BuildType: Package
PackageUseDevtools: Yes
PackageInstallArgs: --no-multiarch --with-keep.source
PackageRoxygenize: rd,collate,namespace

```

```{r}
#| label: co_rproj_package_install_args
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g",
  fold = TRUE,
  header = "What is `--no-multiarch --with-keep.source`?",
  contents = "
  -   `--no-multiarch`: refers to the option for the package installer to only compile the package for the architecture of the current R session. By default, R tries to compile packages for 32-bit and 64-bit architectures if running in a 64-bit R session on Windows. This flag can help avoid problems if a package can only be compiled on one architecture. Read more [here](https://cran.r-project.org/doc/manuals/r-release/R-admin.html#Checking-installed-source-packages).
  
  -   `--with-keep.source`: In R, when a function is created, its body can be stored in two ways: 1) as a parsed but unevaluated expression and 2) as a character string containing the function's source code. By default, only the parsed expression is kept. If `–with-keep.source` is specified, R will also keep the source code as a character string, which can be helpful for debugging and tools that analyze or modify source code. Read more [here](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Tidying-R-code).
    "
)
```

#### Build pane

When the new session starts, the new [project]{style="font-weight: bold; color: #0DA574"}-level options activate the **Build** pane in the IDE. 

:::: {.column-page-inset-right}

::: {#fig-shiny_app_pkg_ide}
![Build pane in IDE](img/shiny_app_pkg_ide.png){#fig-shiny_app_pkg_ide height="100%" width="100%" fig-align="center"}

**Build** pane triggered from project-level settings
:::

::::

When the IDE reboots, I can see the **Build** pane has been added, and I can check the [package]{style='font-weight: bold; color: #F37735;'} functionality by loading the code with **Build** > **Load All**

::: {#fig-build_pane_tools}
![Load the code in the `R/` folder](img/build_pane_tools.png){#fig-build_pane_tools width="100%" fig-align="center"}

Identical to running `devtools::load_all()`
:::

I should see the following in the **Console**:

```{verbatim}
#| eval: false 
#| code-fold: false
ℹ Loading projApp
```

There you have it--`projApp` is a functional [package]{style="font-weight: bold; color: #F37735"}!

## Functional R [packages]{style='font-weight: bold; color: #F37735;'}

:::: {.column-page-inset-right}

::: {#fig-shiny_app_pkg_ide_desc}
![Shiny app-package (with `DESCRIPTION` and **Build** pane)](img/shiny_app_pkg_ide_desc.png){#fig-shiny_app_pkg_ide_desc width="100%" fig-align="center"}

Fully functional shiny app-package
:::

::::

A functional R [package]{style='font-weight: bold; color: #F37735;'}: 

1.   The `DESCRIPTION` file contains the seven mandatory fields (`Package`, `Version`, `License`, `Description`, `Title`, `Author`, and `Maintainer`), making running the necessary devtools functions possible. 

2.   The `.Rproj` file contains the three package configuration fields (`BuildType: Package`, `PackageUseDevtools: Yes`, and `PackageInstallArgs: --no-multiarch --with-keep.source`), which makes the **Build** pane accessible and functional. 

The items above will create a functional R [package]{style='font-weight: bold; color: #F37735;'}, but these are the first steps (we haven't developed anything yet!) on our way to an [app]{style="font-weight: bold; color: #428BCA"}-[package]{style="font-weight: bold; color: #F37735"}.

Think of the two items above as a two-part process: the [official R documentation](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#The-DESCRIPTION-file) requires the `DESCRIPTION` fields (and hence, `devtools`), and the IDE requires `.Rproj` fields to trigger the **Build** pane. 

For more information on the topics in this chapter, you should read
[Writing R Extensions](https://cran.r-project.org/doc/manuals/r-release/R-exts.html) (the official documentation for creating R packages) and [R Packages, 2ed](https://r-pkgs.org/).

## Creating packages with [`create_package()`]{style="font-size: 0.95em"}

The [Posit documentation](https://docs.posit.co/ide/user/ide/guide/pkg-devel/writing-packages.html) lists the following ways to create R [packages]{style='font-weight: bold; color: #F37735;'}, 

> 1. Call `usethis::create_package()`.
> 
> 2. In RStudio, do **File** > **New Project** > **New Directory** > **R Package**. This ultimately calls `usethis::create_package()`, so really there’s just one way.
> 

While this information isn't incorrect, we just demonstrated it's possible to create a [package]{style='font-weight: bold; color: #F37735;'} without the `usethis::create_package()` function. Still, if you're looking for a way to quickly create or convert your app [project]{style="font-weight: bold; color: #0DA574"} into an [app-package]{style='font-weight: bold; color: #428BCA;'}, using `create_package()` is a great option. 

This function is covered in the ['Fundamental development workflows' chapter of R Packages, 2ed](https://r-pkgs.org/workflow101.html). I've provided some suggestions below for using `create_package()`.

### New app-packages

If you want to create a new shiny [app-package]{style='font-weight: bold; color: #428BCA;'}, but haven’t written any code, you can create it with the `create_package()` function from the [`usethis` package](https://usethis.r-lib.org/reference/create_package.html).

First, install `devtools`:

```{r}
#| eval: false 
#| code-fold: false
install.packages("devtools")
library(devtools)
```

`devtools` automatically loads `usethis`

```{verbatim}
#| eval: false 
#| code-fold: false
Loading required package: usethis
```

Assuming your current working directory is where you want your new [app-package]{style='font-weight: bold; color: #428BCA;'}, call `usethis::create_package()` with the `path` argument set to `getwd()`

```{r}
#| eval: false 
#| code-fold: false
usethis::create_package(path = getwd())
```

This call launches a series of actions:

-   First, the active project is set to whatever was given to the `path` argument. 

    ```{verbatim}
    #| eval: false 
    #| code-fold: false
    ✔ Setting active project to 'path/to/newApp'
    ```
    
-   The `R/` folder and `DESCRIPTION/` file are created:

    ```{verbatim}
    #| eval: false 
    #| code-fold: false
    ✔ Creating 'R/'
    ✔ Writing 'DESCRIPTION'
    ```
    
-   The `NAMESPACE` and `.Rproj` files are created:

    ```{verbatim}
    #| eval: false 
    #| code-fold: false
    ✔ Writing 'NAMESPACE'
    ✔ Writing 'newApp.Rproj'
    ```
    
-   The `.Rproj` is added to the `.Rbuildignore` file, the `.Rproj.user` folder is added to the `.gitignore` and `.Rbuildignore` files.
    
    ```{verbatim}
    #| eval: false 
    #| code-fold: false
    ✔ Adding '^newApp\\.Rproj$' to '.Rbuildignore'
    ✔ Adding '.Rproj.user' to '.gitignore'
    ✔ Adding '^\\.Rproj\\.user$' to '.Rbuildignore'
    ```
    
-   A new session is opened from the new `.Rproj` file:

    ```{verbatim}
    #| eval: false 
    #| code-fold: false
    ✔ Opening 'path/to/newApp/' in new RStudio session
    ```

When the new session opens, `newApp` has the following contents:

```{verbatim}
#| eval: false 
#| code-fold: false
newApp/
  ├── .Rbuildignore
  ├── .Rproj.user/
  ├── .gitignore
  ├── DESCRIPTION
  ├── NAMESPACE
  ├── R/
  └── projApp.Rproj
```

You're now free to develop `newApp`. Store and document any `.R` files in the `R/` folder, edit the `DESCRIPTION` file with details about the application, read through  [R Packages](https://r-pkgs.org/) and [Mastering Shiny](https://mastering-shiny.org/), and add the shiny code to complete your [app]{style="font-weight: bold; color: #428BCA"}-[package]{style="font-weight: bold; color: #F37735"}

### Converting existing app

If you already have a shiny app [project]{style='font-weight: bold; color: #0DA574'} that needs to be converted into an [app]{style="font-weight: bold; color: #428BCA"}-[package]{style="font-weight: bold; color: #F37735"} (like the app files stored in the [`03_projApp` branch](https://github.com/mjfrigaard/projApp/tree/03_projApp)), you can also use `create_package(path = getwd())` in your root folder, but I recommend using the following arguments:

#### [`DESCRIPTION`]{style="font-size: 0.95em"} arguments

-   **`fields`**: these are arguments passed to `usethis::use_description()`. If the `fields` argument is empty, a boilerplate `DESCRIPTION` file is created (similar to [this one](https://r-pkgs.org/description.html#the-description-file)). 

    -   These boilerplate fields in the `DESCRIPTION` work, but I've found some of the fields are unnecessary (i.e., I've never needed `Authors@R:` or `ORCID`) and inevitably require revision, so I'd prefer to handle this during the creation process (and remove the risk of forgetting to change it later).

    -   All fields should be passed in a `list()` as `field = 'value'` pairs. 

    ```{r}
    #| eval: false 
    #| code-fold: false
    usethis::use_description(
        list(Package = 'projApp',
             Version = '0.0.0.9000',
             Title = 'movies app',
             Description = 'A movie-review shiny application.',
             "Authors@R" = NULL,
             Author = utils::person(
                given = "John", 
                family = "Smith", 
                email = "John.Smith@email.io", 
                role = c("aut", "cre")),
              Maintainer = utils::person(
                given = "John", 
                family = "Smith",
                email = "John.Smith@email.io"),
              License = "GPL-3"))
    ```
    
    -   A few fields require specially formatted values (see the `utils::person()` examples below).
    
        ```{r}
        #| eval: true 
        #| code-fold: false
        utils::person("John", "Smith", 
                      email = "John.Smith@email.io", 
                      role = c("aut", "cre"))
        ```

-   Two additional arguments from `use_description()` are passed to `create_package()`:

    -   **`check_name`**: verifies your [app]{style="font-weight: bold; color: #428BCA"}-[package]{style="font-weight: bold; color: #F37735"} name is valid for CRAN, so we can set this to `FALSE` (unless you're planning on submitting to CRAN)

    -   **`roxygen2`**: is `TRUE` by default and adds the fields required to use `roxygen2` (which I won't cover here because we'll cover documentation in-depth in a future chapter). 

```{r}
#| label: co_box_create_package_dot
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o", fold = TRUE,
  header = "WARNING: Don't use `usethis::create_package('.')`!",
  contents = "

When converting your existing shiny app [project]{style='font-weight: bold; color: #0DA574'} into an [app]{style='font-weight: bold; color: #428BCA'}-[package]{style='font-weight: bold; color: #F37735'} with `usethis::create_package()`, don't use `'.'` in the `path` argument:
  
`\`\`\r
usethis::create_package('.')
`\`\`\
  
This will return the following warning about creating nested [projects]{style='font-weight: bold; color: #0DA574'}, and ask if you want to proceed anyway:
  
`\`\`\bash
New project 'projApp' is nested inside an existing project
'./', which is rarely a good idea. If this is unexpected, 
the here package has a function,
`here::dr_here()` that reveals why './' is regarded as a
project.
  
Do you want to create anyway?

1: Yes
2: No way
3: Not now
`\`\`\


We can avoid this warning altogether by passing `getwd()` to the `path` argument, so I recommend cancelling the [project]{style='font-weight: bold; color: #0DA574'} creation:

`\`\`\bash
Selection: 2
Error: Cancelling project creation.
`\`\`\

  "
)
```

#### IDE arguments 

-   `rstudio`: adds the necessary **Build Tools** fields in the `.Rproj` file (leave as `TRUE`)

-   `open`: can be set to `FALSE` because we don't need RStudio/Posit Workbench to open in a new session

```{r}
#| eval: false 
#| code-fold: false
usethis::create_package(
  path = getwd(),
  fields = list(Package = 'projApp',
         Version = '0.0.0.9000',
         Title = 'movies app',
         Description = 'A movie-review shiny application.',
         "Authors@R" = NULL,
         Author = utils::person(
            given = "John", 
            family = "Smith", 
            email = "John.Smith@email.io", 
            role = c("aut", "cre")),
          Maintainer = utils::person(
            given = "John", 
            family = "Smith",
            email = "John.Smith@email.io"),
          License = "GPL-3"),
  roxygen = TRUE,
  check_name = FALSE, 
  rstudio = TRUE,
  open = FALSE)
```

After running `usethis::create_package()` with the arguments above, the IDE will present us with a few prompts to confirm: 

```{verbatim}
#| eval: false 
#| code-fold: false
Overwrite pre-existing file 'DESCRIPTION'?
```

```{verbatim}
#| eval: false 
#| code-fold: false
Overwrite pre-existing file 'projApp.Rproj'?
```

The [app]{style="font-weight: bold; color: #428BCA"}-[package]{style="font-weight: bold; color: #F37735"} structure is below:
   
```{verbatim}
#| eval: false 
#| code-fold: false
├── DESCRIPTION
├── NAMESPACE
├── R
│   ├── mod_scatter_display.R
│   ├── mod_var_input.R
│   └── utils.R
├── README.md
├── app.R
├── movies.RData
├── projApp.Rproj
└── www
    └── shiny.png

3 directories, 10 files
```

The `DESCRIPTION` file (shown below) has a few additional fields (`Encoding`, `Roxygen`, and `RoxygenNote`) we didn't include when we converted `projApp` above. We will cover these in the upcoming chapters. 

```{verbatim}
#| eval: false 
#| code-fold: false
Package: projApp
Title: movies app
Version: 0.0.0.9000
Author: John Smith <John.Smith@email.io> [aut, cre]
Maintainer: John Smith <John.Smith@email.io>
Description: A movie-review shiny application.
License: GPL-3
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.2.3

```

```{r}
#| label: git_box_projApp_06_create-package
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  fig_pw = '75%', 
  branch = "06_create-package", 
  repo = 'projApp')
```

## Recap

This chapter has covered the mandatory fields in the `DESCRIPTION` file and the [package]{style='font-weight: bold; color: #F37735;'} configuration fields in `.Rproj`. We also covered creating and converting [projects]{style='font-weight: bold; color: #0DA574'} using the `usethis::create_package()` function.

```{r}
#| label: co_box_recap
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", 
  fold = FALSE,
  header = "Recap: Packages!",
  contents = "
  
-   **The `DESCRIPTION` file** ultimately controls whether you have a functional shiny [package]{style='font-weight: bold; color: #F37735;'}.
    -   The mandatory fields are `Package`, `Version`, `License`, `Description`, `Title`, `Author`, and `Maintainer`.

-   `usethis::create_package()` can be used to create a new [package]{style='font-weight: bold; color: #F37735;'} and to convert an existing shiny [project]{style='font-weight: bold; color: #0DA574;'} into a shiny [app]{style='font-weight: bold; color: #428BCA'}-[package]{style='font-weight: bold; color: #F37735'}.

-   The IDE reads RStudio (`.Rproj`) files and determines R session settings at the [project]{style='font-weight: bold; color: #0DA574;'}-level (i.e., working directory, workspace, history, code formatting, etc.)

    -   [Package]{style='font-weight: bold; color: #F37735;'} development settings can be accessed via **Project Options** > **Build Tools**.
  
  "
)
```

In the next chapter, I'll cover how you can **Install**, **Document**, **Test**, and **Check** your package with a single click!


end `packages.qmd`