# Special topics {#sec-spec-topics .unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o", look = "minimal",
  header = "Caution",
  contents = "This chapter is under review.",
  fold = FALSE
)
```

This section holds a collection of topics you might find useful when developing your app-package.

## Debugging

The [Debugging](debugging.qmd) chapter covers how to use `browser()` (see @sec-browser) and the IDE's debugger console to 'step through' a function line-by-line. This chapter also covers how to send and view `print()` statements in the UI (see @sec-verbatim-reactives) 


## Values vs. Data 

[Values vs. Data](values_vs_data.qmd)  gives an example of how to use `session$userData` to store persistent, non-reactive objects in your application (see also @sec-external-inst-dev). @sec-reactiveValues demonstrates how we can use [`reactiveValues()`](https://shiny.posit.co/r/reference/shiny/0.11/reactivevalues) to store and retrieve reactive values from a 'persistent' object in our app.  @sec-testing-reactive-values also has examples of testing modules with values from a `reactiveValues()` object.

## Graph snapshots 

Snapshots for graphs are covered in @sec-tests-snapshots-vdiffr using the [`vdiffr` package](https://vdiffr.r-lib.org/)

## Test mocks 

[Test mocks](test_mocks.qmd) gives a general overview of how to use test mocks. **Note:** this example does not use code from the `moviesApp` app-package (see @sec-test-fixtures and @sec-test-helpers) 

## Code tools 

Properly styled and formatted code is easier to read, but not always easy to write. [Code tools](code_tools.qmd) introduces two packages ([`lintr`](https://lintr.r-lib.org/) and [`styler`](https://styler.r-lib.org/)) to help keep your code clean and stylish.

## CI/CD

The [CI/CD](code_tools.qmd) chapter...

## JavaScript

The [JavaScript](js.qmd) chapter...




