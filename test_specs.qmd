# Specifications {#sec-tests-specs}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
library(testthat)
library(withr)
library(logger)
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o", look = "minimal",
  header = "Caution",
  contents = "This chapter is under review.",
  fold = FALSE
)
```

## Testing app-packages

Testing shiny applications poses some unique challenges. Shiny functions are written in the context of its reactive model,[^tests-shiny-reactive] so some standard testing techniques and methods for regular R packages don't directly apply. Fortunately, every developer looking to test their code is faced with the same two questions:

[^tests-shiny-reactive]: The ['Reactivity - An overview'](https://shiny.posit.co/r/articles/build/reactivity-overview/) article gives an excellent description (and mental module) of reactive programming.

1. What should I test?  
2. How should I test it?   

```{r}
#| label: co_box_tldr
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", look = "minimal",
  header = "TLDR", fold = TRUE,
  contents = "
  
##### Application Requirements
  
- **User Specifications**: Describe what the end-users expect the application to accomplish`\n
- **Features**: User-focused descriptions of the high-level capabilities or characteristics of an application, and often represent a bundle of smaller functionalities\n
- **Functional Requirements**: The precise, measurable, and testable 'functions' an application should perform\n
- **Traceability Matrix**: Maps the user specifications to the functional requirements and tests, ensuring that all needs are met and functions are tested\n
  
  "
)
```

This chapter focuses on *what* to test. The following chapters provide a few examples of tests but won't go into depth on *how* to write tests. Excellent resources exist for writing unit tests in R packages, [^tests-intro-unit-tests] testing shiny apps, [^tests-intro-testing] [^tests-intro-testserver] The goal of this chapter is to illustrate the connections between the user's needs, the code below `R/`, and developing tests.[^testing-introduce-bdd]

[^testing-introduce-bdd]: The behavior-driven development functions aren't covered in [R Packages, 2ed](https://r-pkgs.org/testing-basics.html) or the [Testing chapter](https://mastering-shiny.org/scaling-testing.html) of Mastering Shiny, but I've found them to be particularly useful for building app-packages.

[^tests-intro-unit-tests]: Unit tests are covered extensively in [R Packages, 2ed](https://r-pkgs.org/testing-basics.html) and the [`testthat` documentation](https://testthat.r-lib.org/index.html)

[^tests-intro-testing]: Mastering shiny dedicates an entire [Chapter to Testing](https://mastering-shiny.org/scaling-testing.html).) `shinytest2` also has [excellent documentation](https://rstudio.github.io/shinytest2/) (and [videos](https://www.youtube.com/watch?v=Gucwz865aqQ)), and I highly recommend reading through those resources.

[^tests-intro-testserver]: I *will* cover a few tips and tricks I've learned for testing module server functions with `testServer()` because they're not in the  [documentation](https://shiny.posit.co/r/articles/improve/server-function-testing/).

The code chunk below will load the necessary packages for testing.

```{r}
#| eval: false
#| code-fold: false
install.packages(c("testthat", "shinytest2", "covr"))
library(testthat)
library(shinytest2)
library(covr)
```

(*If you're using `devtools`, you won't have to worry about installing `testthat` and `covr`*)

### Where to look

The traditional application development process looks something like the figure below:

![An oversimplified application development process](img/tests_standard_flow.png){width='80%'}

Most applications have accompanying resources to address what *should* be tested, the most common source being a software requirements specification (SRS) document.[^tests-srs] The SRS is a development document that breaks down an application's intended purpose (i.e., the problem it's designed to solve) into three general areas: user specifications, features, and functional requirements: 

-   **The user specifications capture the needs and expectations of the end-user.** These are usually non-technical and focused on the "why" and the "what" of the application.

-   **The features describe the high-level capabilities of the application.** Features are defined early in the life of a project and often become the talking points during discussions between stakeholders and developers. Features can be used for scoping and prioritization and may comprise various functional (and sometimes non-functional) requirements.

-   **Functional requirements are the testable, specific actions, inputs, and outputs.** Functional requirements provide the technical details of how the features will be implemented, and a single feature can give rise to multiple functional requirements.

-   A **traceability matrix** is a table that ‘traces’ the user specifications to features and functional requirements (and the tests they give rise to) to verify that the application has been developed correctly. 

[^tests-srs]: Read more about what goes in the [Software Requirements Specification](https://en.wikipedia.org/wiki/Software_requirements_specification)

These guidelines direct the development process, albeit from slightly different perspectives. However, understanding the relationship between user specifications, features, and functional requirements helps us build applications that satisfy the technical standards while addressing the user's needs.

The traceability matrix is a tool to ensure the tests cover all the functionalities and address the user specifications *and* that every user need corresponds to a functionality that's been tested. 

I'll use `moviesApp` to illustrate a brief example in the sections below. 

## User Specifications

```{r}
#| label: git_box_10a_tests-specs
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  fig_pw = '65%', 
  branch = "10a_tests-specs", 
  repo = 'moviesApp')
```

**User specifications** are what the end-user (in this case, a film analyst) wants to achieve with the application. The language used for these descriptions is non-technical but should provide a basis for deriving the more technical (but still high-level) features. [^tests-specs-user-specs]

[^tests-specs-user-specs]: User Specifications are sometimes referred to as "user stories," "use cases," or "general requirements"

```{r}
#| label: co_box_user_specs
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", fold = FALSE, look = "minimal", 
  size = '1.10', header = "Scatter plot user specification",
  contents = "
  
**US1**: Shiny App Scatter Plot Data Visualization for Movie Review Explorer:\n
  
  - The application should source movie review data from platforms like IMDB or Rotten Tomatoes and should encompass both continuous variables (e.g., audience and critic reviews) and categorical variables (e.g., MPAA ratings).\n
  
  - Users should have dropdown menus for selecting continuous variables for x and y axes, and a separate dropdown to choose a categorical variable (to color the points in the scatter plot).\n
  
  - The application should also have sliders or similar controls for users to adjust the size and opacity of the points (allowing them to handle overlapping points more effectively). Finally, users should have the option to enter text and provide a custom title for the scatter plot.\n
  
  ")
```

## Features

**Features** (or **feature requirements**) translate the user's expectations into language that describes the tasks a film analyst should be able to accomplish with the application (i.e., explore data with a scatter plot). However, features are still phrased to satisfy the user needs outlined in the specifications.

```{r}
#| label: co_box_feat_reqs
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", fold = FALSE, look = "minimal",
  size = '1.10', header = "Scatter plot features",
  contents = 
" 
**Movie review app Scatter plot data visualization features:** 
  
**F1.1**: The movie review data should contain continuous variables (e.g., critic and audience ratings) and categorical variables (e.g., mpaa, genres) from IMDB and Rotten Tomatoes.\n
**F1.2**: The UI should display dropdown menus for selecting continuous variables on both the x-axis and y-axis, and a dropdown menu categorical variable for point coloration.\n
**F1.3**: Incorporate sliders or similar controls for adjusting point size and point opacity.\n\n
**F1.4**: Provide input field for users to enter an optional scatter plot title.\n
  ")
```

## Functional Requirements

**Functional requirements** are written for the developer, providing technical details on the feature (i.e., the scatter plot) and how the application should behave. A single feature will often give rise to multiple functional requirements (these are where the end-users' expectations come into direct contact with code)[^tests-specs-feat]

[^tests-specs-feat]: 'Features' and 'functional requirements' are sometimes used interchangeably, but they refer to different aspects of the application. **Features** are high-level capabilities an application *should* have, and often contain a collection of smaller functionalities (broken down into the specific **functional requirements**).

```{r}
#| label: co_box_fun_reqs
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", fold = FALSE, look = "minimal",
  size = '1.10', header = "Scatter plot functional requirements",
  contents = 
" 
  - **FR 1.1**: The app data should be from IMDB and Rotten Tomatoes (accessed from appropriate APIs) containing both continuous and categorical variables stored in a tabular format.\n
  
  - **FR 1.2**: The app should display dropdown menus listing available continuous variables for x-axis and y-axis selection.\n
  
  - **FR 1.3**: Upon user selection of x-axis and y-axis variables, the app should update the scatter plot to reflect the user's choices.\n
  
  - **FR 1.4**: The app should present a dropdown menu listing available categorical variables for point coloration.\n
  
  - **FR 1.5**: The app should dynamically change the color of points in the scatter plot based on the user's categorical variable selection.\n
  
  - **FR 1.6**: The app should provide a slider control that allows users to adjust the size of the points, ranging from a pre-defined minimum to a maximum size.\n
  
  - **FR 1.7**: The app should offer an opacity control, letting users adjust the transparency of points from fully opaque to fully transparent.\n
  
  - **FR 1.8**: The app should display an input field where users can type in a custom title for the scatter plot.
  
  - **FR 1.9**: Upon user entry or modification in the title input field, the app should update the scatter plot's title in real-time.
  
  ")
```


Capturing an application's requirements involves three steps:

1. Understand the user's needs.  

2. Convert the need into a feature or capability.  

3. Translate each feature into code (i.e., 'functions') the application requires

If we've documented these three items, we'll have a clearer picture of what tests to write.

## Traceability Matrix

After translating the user needs into functional requirements, we can quickly identify what needs to be tested by building a look-up table (i.e., a matrix). I like to store early drafts of the application requirements in a vignette:

```{r}
#| eval: false 
#| code-fold: false
usethis::use_vignette("test-specs")
```

Adding our first vignette to the `vignettes/` folder does the following:

- [x]   Adds the `knitr` and `rmarkdown` packages to the `Suggests` field in `DESCRIPTION`[^test-specs-suggests]

    ```bash
    Suggests: 
        knitr,
        rmarkdown
    ```

- [x]   Adds `knitr` to the `VignetteBuilder` field[^test-specs-vignette-builder]

    ```bash
    VignetteBuilder: knitr
    ```

- [x]   Adds `inst/doc` to `.gitignore` and `*.html`, `*.R` to `vignettes/.gitignore`

[^test-specs-suggests]: We briefly covered the `Suggests` field in [Dependencies](dependencies.qmd), but in this case it specifically applies to "*packages that are not necessarily needed. This includes packages used only in examples, tests or vignettes...*" - [Writing R Extensions, Package Dependencies](https://cran.r-project.org/doc/manuals/R-exts.html#Package-Dependencies)

[^test-specs-vignette-builder]: The [documentation](https://cran.r-project.org/doc/manuals/R-exts.html#The-DESCRIPTION-file) on `VignetteBuilder` gives a great example of why `knitr` and `rmarkdown` belong in `Suggests` and not `Imports`.

The first column in the traceability matrix contains the user specifications, which we can 'trace' over to the functional requirements and their relevant  tests.[^tests-visual-markdown]

[^tests-visual-markdown]: When building tables in vignettes, I highly recommend using the [Visual Markdown mode](https://rstudio.github.io/visual-markdown-editing/).

{{< include _trace_matrix.qmd >}}

Building a traceability matrix ensures:  

1. All user specifications have accompanying application features. 

2. Each feature has been broken down into precise, measurable, and testable functional requirements.

3. Tests have been written for each functional requirement.

## Recap 

Documenting the traceability matrix in vignettes is great for developers, but using an issue-tracking system with version control is also a good idea, like GitHub Projects or Azure DevOps.

The following section covers the `testthat` infrastructure, unit tests, and behavior-driven development.

```{r}
#| label: co_box_app_recap
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  header = "Recap: testing your app-package",
  contents = "

**Specifications**
  
  - Scoping tests: user specifications outline software goals and needs, and the functional requirements provide the technical details to achieve them. 
  
    - User specifications: descriptions of what a user expects the application to do (i.e., the user 'wish list' of features they want in the application).
  
    - Features: detailed list of the main capabilities and functions the application needs to offer to users.
  
    - Functional requierments: testable, specific step-by-step instructions for ensuring the application does what it's supposed to do.
  
    - Traceability matrix: tracking tool for connecting the users 'wish list' (i.e, specifications) to what's being tested.
  
  ", 
  fold = FALSE
)
```

