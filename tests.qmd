# Tests {#sec-tests .unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o", look = "minimal",
  header = "Caution",
  contents = "This chapter is under review.",
  fold = FALSE
)
```

## Review Chapters 5 - 9

Let's briefly review what we've covered in the last five chapters:

### Documentation (Chapter 5)

The [Documentation](document.qmd) chapter covered an introduction to the `roxygen2` package (@sec-intro-roxygen2) and some tips for documenting app-package functions (@sec-document-app-functions)

### Dependencies (Chapter 6)

[Dependencies](dependencies.qmd) provided examples of managing dependencies (i.e., exports (@sec-depends-imports) and imports (@sec-depends-exports)) with the `DESCRIPTION` and `NAMESPACE`.

### Data (Chapter 7)

[Data](data.qmd) covered how to add data to your app-package (in `data/` (@sec-data-data), `data-raw/` (@sec-data-data-raw) and `inst/extdata/` (@sec-data-inst-extdata))

### Launch (Chapter 8)

[Launch](launch.qmd) described the differences between `shinyApp()` (@sec-shiny-app), `runApp()` (@sec-run-app) and `shinyAppDir()` (@sec-shiny-app-dir).

### External files (Chapter 9)

[External files](external.qmd) covered how to deal with the files normally stored in `www/`, the `system.file()` (@sec-external-system-file) and `addResourcePath()` (@sec-external-add-resource-path) functions, and various uses of the `inst/` folder (@sec-inst-apps).

## Test suite 

[Test suite](test_suite.qmd) starts by showing how to use `testthat` to create your app-package test infrastructure, then dives into creating test files, and running tests during development.

## Specifications

[Specifications](test_specs.qmd) discusses how to collect and organize user specifications, features, and functional requirements. This chapter also gives example descriptions of features and scenarios in the behavior-driven development format, and how to track specifications and tests in a traceability matrix. 

## Test tools 

[This chapter](test_tools.qmd) introduces test fixtures and helpers. Each tool can contribute to testing your shiny app-package in a unique way (they're also relatively recent additions to the `testthat` framework) 

## Testing modules 

Shiny's `testServer()` function can be useful for performing integration tests with module server functions. [Testing modules](test_modules.qmd) gives examples of using `testServer()` to verify module communication (i.e., passing data between modules). 

## System tests 

The [final chapter](test_system.qmd) in this section covers setting up and running system (or end-to-end tests with `shinytest2`).
