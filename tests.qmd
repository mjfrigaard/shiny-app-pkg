# Tests {#sec-tests .unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
library(shinypak)
```

## Review of App-packages

Let's briefly review what we've covered in the last five chapters:

### Documentation (Chapter 5)

In the [Documentation](document.qmd) chapter we covered: 

1. An introduction to the `roxygen2` (@sec-intro-roxygen2) package, and

2. Some tips for documenting app-package functions (@sec-document-app-functions)

:::: {.callout-tip collapse='true' appearance='default'}

## [Chapter 5 Applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 5 (Documentation) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 1 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^05')
```

::: 

::::

### Dependencies (Chapter 6)

In [Dependencies](dependencies.qmd), we walked through:

1. How to give users of our app-package access to it's functions (i.e., exports (@sec-depends-exports)), and

2. What to do with the functions we use from other packages in the `R/` folder (i.e., imports (@sec-depends-imports))

:::: {.callout-tip collapse='true' appearance='default'}

## [Chapter 6 Applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 6 (Dependencies) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 6 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^06')
```

::: 

::::

### Data (Chapter 7)

[Data](data.qmd) covered the three common locations for data in R packages: 

1. `data/` (@sec-data-data), 

2. `data-raw/` (@sec-data-data-raw), and

3. `inst/extdata/` (@sec-data-inst-extdata)

:::: {.callout-tip collapse='true' appearance='default'}

## [Chapter 7 Applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 7 (Data) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 7 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^07')
```

::: 

::::


### Launch (Chapter 8)

[Launch](launch.qmd) described the differences between

1. `shinyApp()` (@sec-launch-shiny-app),

2. `runApp()` (@sec-launch-run-app), and

3. `shinyAppDir()` (@sec-launch-shiny-app-dir)

This chapter also provided some options to include in `app.R` (@sec-launch-app-dot-r) and the standalone app function (@sec-launch-standalone-app-function).

:::: {.callout-tip collapse='true' appearance='default'}

## [Chapter 8 Applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 8 (Launch) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 8 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^08')
```

::: 

::::

### External files (Chapter 9)

[External files](external.qmd) covered how to include external files and/or resources in your app (i.e., those previously stored in `www/`): 

1. Combining `system.file()` (@sec-external-system-file) and `addResourcePath()` (@sec-external-add-resource-path), and  

2. The various uses of the `inst/` folder (@sec-inst)
<br>
    a. Alternative images and layout options (@sec-external-system-file)
<br><br>
    b. Development versions of your application using alternative data and modules (@sec-external-inst-dev)
<br><br>
    c. A production version of your application (@sec-external-inst-prod)

:::: {.callout-tip collapse='true' appearance='default'}

## [Chapter 9 Applications]{style='font-weight: bold; font-size: 1.15em;'}

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 9 (External files) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 9 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
list_apps(regex = '^09')
```

::: 

::::


# Testing your app

We're now ready to test the code and features in our app-package. The next section covers the following topics:

## Test suite 

[Test suite](test_suite.qmd) starts by showing how to create the `testthat` infrastructure (@sec-tests-suite-use-testthat) then, dives into

* Creating test files (@sec-tests-suite-use-test);

* The mechanics unit tests (@sec-tests-suite-test-that) and expectations (@sec-tests-suite-expectations); 

* Running tests during development (@sec-tests-suite-running-tests)

This chapter also introduces keyboard shortcuts for testing (@sec-tests-suite-keyboard-shortcuts) and `testthat`'s behavior-driven development functions (@sec-tests-suite-bdd-intro).

## Specifications

[Specifications](test_specs.qmd) discusses how to collect and organize @sec-tests-specs-app-reqs, @sec-tests-specs-user-specs, @sec-tests-specs-features, and @sec-tests-specs-func-reqs. 

This chapter also gives example descriptions of features and scenarios with @sec-tests-specs-bdd-testthat, and how to track specifications and tests in a @sec-tests-specs-traceability-matrix. 

## Test tools 

[This chapter](test_tools.qmd) introduces test @sec-test-fixtures, @sec-test-helpers, @sec-test-coverage-active-file, and @sec-test-snaps-review. Each tool can contribute to testing your Shiny app-package in a unique way (they're also relatively recent additions to the `testthat` framework) 


## Testing modules 

Shiny's `testServer()` function can be useful for performing integration tests with module server functions. [Testing modules](test_modules.qmd) gives examples of using `testServer()` to verify module communication (i.e., passing data between modules). 

-   @sec-tests-mods-returned covers how to ensure the values returned from your modules are correct.

-   @sec-tests-mods-args-list shows how to parameterize your module function tests.

-   Ensure execution paths are tested with @sec-tests-mods-coverage 

-   Verifying the outputs returned from modules is covered in @sec-tests-mods-outputs

## System tests 

The [final chapter](test_system.qmd) in this section covers setting up and running system (or end-to-end tests with `shinytest2`).

```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```