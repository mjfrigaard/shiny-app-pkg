# Tests {#sec-tests .unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o", look = "minimal",
  header = "Caution",
  contents = "This section is under review.",
  fold = FALSE
)
```

## Review Chapters 5 - 9

Let's briefly review what we've covered in the last five chapters:

### Documentation (Chapter 5)

In the [Documentation](document.qmd) chapter we covered: 

- [x] an [introduction to the `roxygen2`](@sec-intro-roxygen2) package, and

- [x] some tips for [documenting app-package functions](@sec-document-app-functions)

```{r}
#| label: co_box_branches_chp_05
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = TRUE, look = "simple",
  header = "Chapter 5: GitHub Branches",
  contents = "
The code for Chapter 5 (Documentation) is stored in the following branche(s):
  
- [`07_roxygen2`](https://github.com/mjfrigaard/moviesApp/tree/07_roxygen2)
  
"
)
```

### Dependencies (Chapter 6)

[Dependencies](dependencies.qmd) walked through 

- [x] how to give users of our app-package access to it's functions (i.e., [exports](@sec-depends-exports)), and

- [x] what to do with the functions we use from other packages in the `R/` folder (i.e., [imports](@sec-depends-imports))

```{r}
#| label: co_box_branches_chp_06
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = TRUE, look = "simple",
  header = "Chapter 6: GitHub Branches",
  contents = "
The code for Chapter 6 (Dependencies) is stored in the following branche(s):
  
- [`<branch>`](https://github.com/mjfrigaard/moviesApp/tree/<branch>)
  
"
)
```

### Data (Chapter 7)

[Data](data.qmd) covered the three common locations for data in R packages: 

- [x] [`data/`](@sec-data-data), 

- [x] [`data-raw/`](@sec-data-data-raw), and

- [x] [`inst/extdata/`](@sec-data-inst-extdata)

```{r}
#| label: co_box_branches_chp_07
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = TRUE, look = "simple",
  header = "Chapter 7: GitHub Branches",
  contents = "
The code for Chapter 7 (Data) is stored in the following branche(s):
  
- [`<branch>`](https://github.com/mjfrigaard/moviesApp/tree/<branch>)
  
"
)
```

### Launch (Chapter 8)

[Launch](launch.qmd) described the differences between

- [x] [`shinyApp()`](@sec-launch-shiny-app),

- [x] [`runApp()`](@sec-launch-run-app), 

- [x] and [`shinyAppDir()`](@sec-launch-shiny-app-dir)

This chapter also provided some [options to include in app.R](@sec-launch-app-dot-r) and the [standalone app function](@sec-launch-standalone-app-function).

```{r}
#| label: co_box_branches_chp_08
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = TRUE, look = "simple",
  header = "Chapter 8: GitHub Branches",
  contents = "
The code for Chapter 8 (Launch) is stored in the following branche(s):
  
- [`<branch>`](https://github.com/mjfrigaard/moviesApp/tree/<branch>)
  
"
)
```

### External files (Chapter 9)

[External files](external.qmd) covered how to include external files and/or resources in your app (i.e., those previously stored in `www/`): 

- [x] combining [`system.file()`](@sec-external-system-file) and [`addResourcePath()`](@sec-external-add-resource-path), and  

- [x] the various uses of the [`inst/` folder](@sec-inst-apps)

```{r}
#| label: co_box_branches_chp_09
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  fold = TRUE, look = "simple",
  header = "Chapter 9: GitHub Branches",
  contents = "
The code for Chapter 9 (External files) is stored in the following branche(s):
  
- [`<branch>`](https://github.com/mjfrigaard/moviesApp/tree/<branch>)
  
"
)
```


# Tests

We're now ready to test the code and features in our app-package. The next section covers the following topics:

## Test suite 

[Test suite](test_suite.qmd) starts by showing how to create the [`testthat` infrastructure](@sec-tests-suite-use-testthat) then, dives into

* [creating test files](@sec-tests-suite-use-test);

* the mechanics [unit tests](@sec-tests-suite-test-that) and [expectations](@sec-tests-suite-expectations); 

* and [running tests](@sec-tests-suite-running-tests) during development. 

This chapter also introduces [keyboard shortcuts for testing](@sec-tests-suite-keyboard-shortcuts) and `testthat`'s [behavior-driven development functions](@sec-tests-suite-bdd-intro).

## Specifications

[Specifications](test_specs.qmd) discusses how to collect and organize user specifications, features, and functional requirements. This chapter also gives example descriptions of features and scenarios in the behavior-driven development format, and how to track specifications and tests in a traceability matrix. 

## Test tools 

[This chapter](test_tools.qmd) introduces test fixtures and helpers. Each tool can contribute to testing your shiny app-package in a unique way (they're also relatively recent additions to the `testthat` framework) 

## Testing modules 

Shiny's `testServer()` function can be useful for performing integration tests with module server functions. [Testing modules](test_modules.qmd) gives examples of using `testServer()` to verify module communication (i.e., passing data between modules). 

## System tests 

The [final chapter](test_system.qmd) in this section covers setting up and running system (or end-to-end tests with `shinytest2`).
